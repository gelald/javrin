import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-859571d0.js";const t={},e=p(`<h1 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式" aria-hidden="true">#</a> 享元模式</h1><p>定义：提供了减少对象数量从而改善应用所需的对象结构的方式，是对象池的一种实现。最典型的例子就是线程池，线程池可以避免不停地创建和销毁多个对象而导致性能的消耗</p><p>宗旨：共享细粒度对象，将多个对同一个对象的访问集中起来</p><p>适用场景：系统有大量相似对象、需要缓存池</p><p>优点：</p><ol><li>减少对象的创建，降低内存中对象的数量，提高程序运行效率</li><li>减少内存之外的资源占用，如：连接池，每一个连接都和数据库有一个TCP连接，占用着网络资源</li></ol><p>缺点：</p><ol><li>需要关注内、外部状态，关注线程安全问题</li><li>使程序逻辑变得复杂</li></ol><h2 id="享元模式的内部状态和外部状态" tabindex="-1"><a class="header-anchor" href="#享元模式的内部状态和外部状态" aria-hidden="true">#</a> 享元模式的内部状态和外部状态</h2><p>享元模式的定义提出了两个要求：细粒度和共享对象。因为要求细粒度对象，所以不可避免地会使对象数量多且性质相近，此时我们需要将这些对象的信息分为两个部分</p><p>内部状态：存储在享元对象内部并且不会随环境的改变而改变。如数据库连接的用户名、密码、url等信息</p><p>外部状态：享元对象得以依赖的一个标记，是随环境的改变而改变的。如每个连接回收利用时，需要给它标记为可用状态</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>以火车票为例</p><p>票据统一接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITicket</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> bunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>火车票的实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainTicket</span> <span class="token keyword">implements</span> <span class="token class-name">ITicket</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> from<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TrainTicket</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> from<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> bunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s-&gt;%s：%s价格：%s 元&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">,</span> bunk<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>票据的创建工厂，用于通过查询返回票据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ITicket</span><span class="token punctuation">&gt;</span></span> sTicketPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ITicket</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ITicket</span> <span class="token function">queryTicket</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> from <span class="token operator">+</span> <span class="token string">&quot;-&gt;&quot;</span> <span class="token operator">+</span> <span class="token keyword">to</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TicketFactory</span><span class="token punctuation">.</span>sTicketPool<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用缓存：&quot;</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">TicketFactory</span><span class="token punctuation">.</span>sTicketPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;首次查询，创建对象: &quot;</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ITicket</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainTicket</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TicketFactory</span><span class="token punctuation">.</span>sTicketPool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ticket<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个写法和注册式单例没有太大的区别，但是注册式单例侧重的是创建对象，而享元模式侧重的是整个票据管理的结构，达到资源重复利用的目的</p><h2 id="享元模式在源码中的体现" tabindex="-1"><a class="header-anchor" href="#享元模式在源码中的体现" aria-hidden="true">#</a> 享元模式在源码中的体现</h2><h3 id="string中的享元模式" tabindex="-1"><a class="header-anchor" href="#string中的享元模式" aria-hidden="true">#</a> String中的享元模式</h3><p>Java中将 <code>String</code> 类定义为 <code>final</code> （不可变），<code>JVM</code> 中字符串一般保存在字符串常量池中，确保一个字符串在常量池中只有一个拷贝</p><h3 id="integer中的享元模式" tabindex="-1"><a class="header-anchor" href="#integer中的享元模式" aria-hidden="true">#</a> Integer中的享元模式</h3><p><code>Integer</code> 中的 <code>valueOf()</code> 方法做了一个条件判断，如果目标值在 -128 到 127 之间，就直接从缓存中取值，否则新建对象。这么做的原因可能是认为 -128 ~ 127 这个范围的数据使用是最为频繁的，为了节省频繁创建对象带来的内存消耗</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","flyweight.html.vue"]]);export{r as default};
