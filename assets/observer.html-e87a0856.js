const e=JSON.parse('{"key":"v-911a4876","path":"/writings/pattern/observer.html","title":"观察者模式","lang":"zh-CN","frontmatter":{"title":"观察者模式","icon":"article","category":["设计模式"],"description":"观察者模式 定义：定义一种一对多的依赖关系，一个主题对象可以被多个观察者对象同时监听，使得每当主题对象状态变化时，所有依赖于它的对象都会得到通知并自动更新 适用场景： 当一个或者多个对象的变化依赖于另一个对象的变化 需要实现类似广播的功能，无需知道具体收听者，只需要分发广播，系统中感兴趣的对象会自动接收该广播 多层嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知 优点： 观察者和被观察者是松耦合的，只是在抽象层面耦合，符合依赖倒置原则 实现了一对多的通讯机制，支持事件注册机制，支持兴趣分发机制","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/observer.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"观察者模式"}],["meta",{"property":"og:description","content":"观察者模式 定义：定义一种一对多的依赖关系，一个主题对象可以被多个观察者对象同时监听，使得每当主题对象状态变化时，所有依赖于它的对象都会得到通知并自动更新 适用场景： 当一个或者多个对象的变化依赖于另一个对象的变化 需要实现类似广播的功能，无需知道具体收听者，只需要分发广播，系统中感兴趣的对象会自动接收该广播 多层嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知 优点： 观察者和被观察者是松耦合的，只是在抽象层面耦合，符合依赖倒置原则 实现了一对多的通讯机制，支持事件注册机制，支持兴趣分发机制"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"JDK 实现","slug":"jdk-实现","link":"#jdk-实现","children":[]},{"level":3,"title":"Guava 实现","slug":"guava-实现","link":"#guava-实现","children":[]}]},{"level":2,"title":"观察者模式在源码中的体现","slug":"观察者模式在源码中的体现","link":"#观察者模式在源码中的体现","children":[{"level":3,"title":"SpringMVC","slug":"springmvc","link":"#springmvc","children":[]}]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":3,"words":899},"filePathRelative":"writings/pattern/observer.md","localizedDate":"2023年3月1日","excerpt":"<h1> 观察者模式</h1>\\n<p>定义：定义一种一对多的依赖关系，一个主题对象可以被多个观察者对象同时监听，使得每当主题对象状态变化时，所有依赖于它的对象都会得到通知并自动更新</p>\\n<p>适用场景：</p>\\n<ol>\\n<li>当一个或者多个对象的变化依赖于另一个对象的变化</li>\\n<li>需要实现类似广播的功能，无需知道具体收听者，只需要分发广播，系统中感兴趣的对象会自动接收该广播</li>\\n<li>多层嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知</li>\\n</ol>\\n<p>优点：</p>\\n<ol>\\n<li>观察者和被观察者是松耦合的，只是在抽象层面耦合，符合依赖倒置原则</li>\\n<li>实现了一对多的通讯机制，支持事件注册机制，支持兴趣分发机制</li>\\n</ol>","autoDesc":true}');export{e as data};
