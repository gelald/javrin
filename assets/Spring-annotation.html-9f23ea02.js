import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,e as c}from"./app-85442c0b.js";const t={},a=c('<h2 id="component-和-bean-的区别" tabindex="-1"><a class="header-anchor" href="#component-和-bean-的区别" aria-hidden="true">#</a> @Component 和 @Bean 的区别</h2><p><code>@Component</code> 注解是一个通用的注解，可以作用在任何想交给 SpringIoC 容器管理的类上，Spring 会自动创建这个类的实例对象注入 IoC 容器中</p><p><code>@Bean</code> 注解是用于<strong>配置类</strong>中声明一个 Bean 的，用于配置类的方法上面，表示把这个方法返回的对象注册到 IoC 容器中，可以自定义 Bean 的创建和初始化过程，包括 Bean 名称、作用域、依赖等</p><ol><li>用途不同： <ul><li><code>@Component</code> 注解用于标识一个想交给 SpringIoC 容器管理的类，Spring 会通过 <code>@ComponentScan</code> 注解扫描这些被修饰的类，自动创建这些类的实例对象并注册到 IoC 容器中</li><li><code>@Bean</code> 注解用于配置类中声明和配置 Bean 对象，表示把方法返回的对象注册到 IoC 容器中</li></ul></li><li>控制权不同： <ul><li><code>@Component</code> 修饰的类是通过 Spring 框架来创建和初始化的</li><li><code>@Bean</code> 修饰的方法返回的对象是由开发人员手动控制 Bean 的创建和配置过程</li></ul></li></ol>',4),i=[a];function l(r,d){return e(),n("div",null,i)}const _=o(t,[["render",l],["__file","Spring-annotation.html.vue"]]);export{_ as default};
