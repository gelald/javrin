import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-ztW5o0ZG.js";const n={},l=e(`<h1 id="组件篇" tabindex="-1"><a class="header-anchor" href="#组件篇"><span>组件篇</span></a></h1><h2 id="spring-cloud-netflix核心组件" tabindex="-1"><a class="header-anchor" href="#spring-cloud-netflix核心组件"><span>Spring Cloud Netflix核心组件</span></a></h2><h3 id="eureka" tabindex="-1"><a class="header-anchor" href="#eureka"><span>Eureka</span></a></h3><p><strong>关键：注册表</strong></p><p>当调用其他服务时，Eureka Client组件会找Eureka Server咨询：需要使用的服务的信息（IP地址、端口号），然后就可以把这些相关信息从Eureka Server的注册表中拉取到自己<strong>本地缓存起来</strong>。</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaenolne2j30kp07kju0.jpg" alt="img"></p><ul><li>Eureka Client：当服务启动时，负责将这个服务的信息注册到Eureka Server中；反过来，可以从Eureka Server拉取注册表，从而知道其他服务所在位置</li><li>Eureka Server：注册中心，里面有一个注册表，保存了各个服务所在的IP地址和端口号</li></ul><h3 id="feign" tabindex="-1"><a class="header-anchor" href="#feign"><span>Feign</span></a></h3><p><strong>关键：动态代理</strong></p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaenyintlj30in070q4d.jpg" alt="img"></p><ul><li>如果对某个接口定义了<code>@FeignClient</code>注解，Feign就会针对这个接口创建一个动态代理</li><li>接着调用那个接口，本质就是会调用 Feign创建的<strong>动态代理</strong>，这是核心中的核心</li><li>Feign的动态代理会根据你在接口上的<code>@RequestMapping</code>等注解，来动态<strong>构造出你要请求的服务的地址</strong></li><li>最后针对这个地址，发起请求、解析响应</li></ul><h3 id="ribbon" tabindex="-1"><a class="header-anchor" href="#ribbon"><span>Ribbon</span></a></h3><p><strong>关键：负载均衡</strong></p><p>如果被调用的服务部署在5台机器上做了集群，那么Ribbon会帮忙解决机器选择的问题，它的作用是负载均衡，会帮你在每次请求时选择一台机器，<strong>均匀的把请求分发到各个机器上</strong></p><hr><p><strong>默认负载均衡算法：轮询</strong></p><p>简单来说，就是如果订单服务对库存服务发起10次请求，那就先让你请求第1台机器、然后是第2台机器、第3台机器、第4台机器、第5台机器，接着再来—个循环，第1台机器、第2台机器。。。以此类推。</p><hr><p>工作流程：</p><ol><li>首先Ribbon会从 Eureka Client里已缓存的服务注册表获取到对应的服务信息，也就知道了所有的服务都部署在了哪些机器上，在监听哪些端口号。</li><li>然后Ribbon就可以使用默认的Round Robin算法，从中选择一台机器</li><li>Feign就会针对这台机器，构造并发起请求</li></ol><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaezdxtn0j30kr08640v.jpg" alt="img"></p><h3 id="zuul" tabindex="-1"><a class="header-anchor" href="#zuul"><span>Zuul</span></a></h3><p><strong>关键：统一网关</strong></p><p>工作：负责网络路由。目的是让前端不用去关系后端各个服务的地址，前端在调用后端服务时只需知道网关的地址，然后网关会根据请求的一些特征(url等)，转发给后端的各个服务。</p><p>此外还可以做一些统一的操作，如：限流、认证授权等</p><h3 id="hystrix" tabindex="-1"><a class="header-anchor" href="#hystrix"><span>Hystrix</span></a></h3><p>关键：<strong>服务隔离、熔断、降级</strong></p><p>场景：如果系统处于高并发的场景下，且B服务的响应速度较慢，大量请求涌过来的时候，A服务的100个线程都会卡在B积分服务这块。导致A服务没有一个线程可以处理请求。然后就会导致用户请求A服务的时候，发现A服务也挂了，不响应任何请求了。这就是微服务架构中恐怖的服务雪崩问题。</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaf40ad3bj30js0d1t9z.jpg" alt="img"></p><p><strong>Hystrix是隔离、熔断以及降级的一个框架</strong>。说白了，<strong>Hystrix会为不同服务构建一个独立的线程池仅供它使用</strong>，比如订单服务请求库存服务是一个线程池，请求仓储服务是一个线程池，请求积分服务是一个线程池。<strong>每个线程池里的线程就仅仅用于请求那个服务。</strong></p><p>打个比方：现在很不幸，积分服务挂了，会导致订单服务里的那个用来调用积分服务的线程都卡死不能工作了！但是由于订单服务调用库存服务、仓储服务的这两个线程池都是正常工作的，<strong>所以这两个服务不会受到任何影响</strong>。</p><hr><p>服务熔断：如果一个服务调用后返回结果的时间较长，那么可以选择在一定时间内请求积分服务直接就返回了（不执行具体逻辑），不去走网络请求卡住几秒钟，过段时间后恢复正常。</p><p>服务降级：每次调用积分服务，就在数据库里记录一条消息，说给某某用户增加了多少积分，因为积分服务挂了，导致没增加成功！这样等积分服务恢复了，可以根据这些记录手工加一下积分。这个过程，就是所谓的降级。通常和熔断一起使用</p><hr><p>Hystrix隔离、熔断、降级的全流程：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaf97a437j30kf0eaadz.jpg" alt="img"></p><h3 id="hystrix-dashboard" tabindex="-1"><a class="header-anchor" href="#hystrix-dashboard"><span>Hystrix Dashboard</span></a></h3><p>自身服务的监控面板</p><h3 id="turbine" tabindex="-1"><a class="header-anchor" href="#turbine"><span>Turbine</span></a></h3><p>Hystrix Dashboard智能监控自己服务，这个可以将多个服务的信息汇总到一起来监控</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggafj3fxpkj30ks0ajgo9.jpg" alt="img"></p><h2 id="spring-cloud-alibaba核心组件" tabindex="-1"><a class="header-anchor" href="#spring-cloud-alibaba核心组件"><span>Spring Cloud Alibaba核心组件</span></a></h2><p>Spring Cloud Alibaba和Spring Cloud Netflix相比的优势在于：这套组件经历过数次双11的考验，处理高并发的能力比较好</p><p>Sentinel</p><p>Nacos</p><p>Seate</p><p>Dubbo</p><h2 id="注册中心组件" tabindex="-1"><a class="header-anchor" href="#注册中心组件"><span>注册中心组件</span></a></h2><p>本质：解耦服务提供者与服务消费者；更进一步，为了支持弹性扩容缩容特性，因为服务的数目和分布往往是动态确定的</p><h3 id="注册中心的引入" tabindex="-1"><a class="header-anchor" href="#注册中心的引入"><span>注册中心的引入</span></a></h3><p>随着单体应用拆分，首当面临的第一份挑战就是服务实例的数量较多，并且服务自身对外暴露的访问地址也具有动态性。可能因为服务扩容、服务的失败和更新等因素，导致服务实例的运行时状态（地址）经常变化。如果把服务地址写到配置类中则需要重启系统，如果写到配置文件中则需要频繁变更</p><h3 id="cap理论" tabindex="-1"><a class="header-anchor" href="#cap理论"><span>CAP理论</span></a></h3><ul><li>一致性(<strong>C</strong>onsistency)：所有节点在同一时间具有相同的数据</li><li>可用性(<strong>A</strong>vailability)：保证每个请求不管成功或者失败都有响应；即如果服务宕机，不影响系统接受或发出请求的行为。</li><li>分隔容忍(<strong>P</strong>artition tolerance)：系统中任意信息的丢失或失败不会影响系统的继续运作；即系统中某个部分宕机了，并不影响整个系统的正常运作。</li></ul><p>此外，<strong>CAP不可兼得</strong>。原因：</p><ol><li>如果C是第一需求的话，那么会影响A的性能，<strong>因为要数据同步，不然请求结果会有差异，但是数据同步会消耗时间，期间可用性就会降低。</strong></li><li>如果A是第一需求，那么只要有一个服务在，就能正常接受请求，但是对于返回结果不能保证，原因是，<strong>在分布式部署的时候，数据一致的过程不可能像切换线路那么快。</strong></li><li>再如果，同时满足一致性和可用性，那么分区容错就很难保证了，也就是只能单点部署，集群部署是分布式的基本核心</li></ol><h4 id="关于cp-ap的选择" tabindex="-1"><a class="header-anchor" href="#关于cp-ap的选择"><span>关于CP/AP的选择</span></a></h4><p>现在的注册中心组件都能集群化部署，尽管集群模式不尽相同（主从模式、对等模式）</p><p>对于服务发现来说，针对同一个服务，即使注册中心的不同节点保存的服务提供者信息不尽相同，也不会造成灾难性的后果</p><p>但是对于服务消费者来说，如果注册中心导致消费不能正常进行，对于系统来说是灾难性的，因此我认为注册中心选型<strong>应该关注可用性</strong>，而非一致性</p><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h3><p>负载均衡的实现方式有两种</p><ol><li>服务端的负载均衡，给服务提供者更强的流量控制权，但是无法满足不同的消费者希望使用不同负载均衡策略的需求。服务端负载均衡的经典代表是<code>Nginx</code></li><li>客户端的负载均衡，提供了不同消费者使用不同负载均衡策略的需求，对用户扩展提供更好的支持，但是如果设置不当可能导致获取不到任何服务提供者。客户端负载均衡的经典代表是<code>Ribbon</code></li></ol><h4 id="负载均衡的常见算法" tabindex="-1"><a class="header-anchor" href="#负载均衡的常见算法"><span>负载均衡的常见算法</span></a></h4><ul><li>轮询法：将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载</li><li>加权轮询法：不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端</li><li>随机法：通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多；其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果</li><li>加权随机法：与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序</li><li>哈希算法：哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问</li><li>最小连接数法：最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前 积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器</li></ul><h3 id="考虑" tabindex="-1"><a class="header-anchor" href="#考虑"><span>考虑</span></a></h3><ol><li>服务注册，每一个新启动的服务都需要注册到注册中心中</li><li>服务发现：针对同一个服务，即使注册中心的<strong>不同节点保存的服务提供者信息不尽相同，也并不会造成灾难性的后果。</strong></li><li>服务消费：<strong>能消费才是最重要的</strong>，消费者虽然拿到可能不正确的服务实例信息后尝试消费一下，也要胜过因为无法获取实例信息而不去消费，导致系统异常要好（淘宝的双十一，京东的618就是紧遵AP的最好参照）。</li><li>服务测活，测活保证服务的可用性</li><li>负载均衡，多个服务提供者，如何均衡各个提供者的负载</li><li>集成，服务提供者或消费者集成注册中心的问题</li><li>运行时依赖，引入注册中心后，对应用的运行时环境的影响</li><li>可用性，保证这侧中心本身的可用性，特别是消除单点故障</li><li>服务变更：服务消费者如何及时知道服务的生产者如何及时变更的 <ol><li><strong>发布订阅模式</strong>：服务消费者能够实时监控服务更新状态，通常采用监听器以及回调机制，例子：<code>Zookeeper</code></li><li><strong>主动拉取策略</strong>：服务消费者定期调用注册中心提供的服务获取接口获取最新的服务列表并更新本地缓存，例子：<code>Eureka</code></li></ol></li></ol><h3 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h3><table><thead><tr><th></th><th>Nacos</th><th>Eureka</th><th>Zookeeper</th><th>Consul</th><th>CoreDNS</th></tr></thead><tbody><tr><td>一致性协议（关注点）</td><td>CP+AP</td><td>AP</td><td>CP</td><td>CP</td><td>-</td></tr><tr><td>健康检查</td><td>TCP/HTTP<br>MySQL/Client Beat</td><td>Client Beat</td><td>Keep Alive</td><td>TCP/HTTP/gRPC/Cmd</td><td>-</td></tr><tr><td>负载均衡策略</td><td>权重/metadata/Selector</td><td>Ribbon</td><td>-</td><td>Fabio</td><td>RoundRobin</td></tr><tr><td>雪崩保护</td><td>有</td><td>有</td><td>无</td><td>无</td><td>无</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>访问协议</td><td>HTTP/DNS</td><td>HTTP</td><td>TCP</td><td>HTTP/DNS</td><td>DNS</td></tr><tr><td>监听支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>多数据中心</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>跨注册中心同步</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>SpringCloud集成</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>Dubbo集成</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>K8S集成</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td><td>支持</td></tr></tbody></table><h3 id="apache-zookeeper" tabindex="-1"><a class="header-anchor" href="#apache-zookeeper"><span>Apache ZooKeeper</span></a></h3><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20211117184241.png" alt=""></p><p><code>ZooKeeper</code> 遵循CP原则，任何时候对 <code>ZooKeeper</code> 的访问请求能得到一致的数据结果，同时系统对网络分割具备容错性，但是 <code>ZooKeeper</code> 不能保证每次服务请求都是可达的</p><p><code>ZooKeeper</code> 集群中 <code>master</code> 节点宕机了或者因为网络原因与其他节点失去联系时，就要进行 <code>Leader</code> 的选举，<strong>这个选举时间太长，一般是30-120秒，这段时间无法处理请求导致选举期间注册服务瘫痪</strong>，在云部署环境下，因为网络问题使得 <code>ZooKeeper</code> 集群失去 <code>master</code> 节点是大概率事件，<strong>虽然服务能最终恢复，但是漫长的选举事件导致注册长期不可用是不能容忍的</strong>，所以不能保证服务可用性（A）</p><h4 id="角色" tabindex="-1"><a class="header-anchor" href="#角色"><span>角色</span></a></h4><ul><li><code>Leader</code>：一个 <code>ZooKeeper</code> 集群同一时间内只会有一个实际工作的 <code>Leader</code>，它会发起并维护与各个 <code>Follower</code> 和 <code>Observer</code> 间的心跳。所有的写操作必须通过 <code>Leader</code> 完成再由 <code>Leader</code> 将写操作广播给其他服务器</li><li><code>Follower</code>：一个 <code>ZooKeeper</code> 集群同一时间内可能存在多个 <code>Follower</code> ，它会响应 <code>Leader</code> 的心跳。<code>Follower</code> 可以直接处理并返回客户端的读请求，同时会把写请求转发给 <code>Leader</code> 处理，并且负责在 <code>Leader</code> 处理写请求时对请求进行投票</li><li><code>Observer</code>：与 <code>Follower</code> 角色类似，但是没有投票权</li></ul><h4 id="节点" tabindex="-1"><a class="header-anchor" href="#节点"><span>节点</span></a></h4><ul><li><code>PERSISTENT</code> - 持久节点：客户端与 <code>ZooKeeper</code> 断开连接后，该节点依旧存在，只能手动删除</li><li><code>PERSISTENT_SEQUENTIAL</code> - 持久顺序节点：和 <code>PERSISTENT</code> 节点相同，增加了顺序属性，节点名后会追加一个由父节点维护的自增整型数字</li><li><code>EPHEMERAL</code> - 临时节点：生命周期和会话绑定，一旦客户端与 <code>ZooKeeper</code> 断开连接，该节点就会被删除</li><li><code>EPHEMERAL_SEQUENTIAL</code> -临时顺序节点：和 <code>EPHEMERAL</code> 节点相同，增加了顺序属性</li></ul><h4 id="watch机制" tabindex="-1"><a class="header-anchor" href="#watch机制"><span>Watch机制</span></a></h4><ul><li>推：一旦服务端感知主题变化了，那么只会发送一个事件类型和节点信息给关注的客户端，而不会包括具体的变更内容</li><li>拉：收到变更通知的客户端需要自己去拉具体变更的数据</li></ul><h3 id="spring-cloud-netflix-eureka" tabindex="-1"><a class="header-anchor" href="#spring-cloud-netflix-eureka"><span>Spring Cloud Netflix Eureka</span></a></h3><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggp754cvvtj30m80azwg8.jpg" alt="img"></p><p><code>Eureka</code> 遵循AP原则，<code>Eureka Server</code> 解决单点的问题是建立多个对等的实例，去中心化，使用彼此相互注册的方式提高可用性，虽然节点的数据不一定完全一致，但是能保证每一个节点都能正常提供服务</p><ul><li>当一个新的 <code>Eureka Server</code> 节点启动后，会首先尝试从邻近节点获取所有注册列表信息，并完成初始化。<code>Eureka Server</code> 通过 <code>getEurekaServiceUrls()</code> 方法获取所有的节点，并且会通过<strong>心跳契约</strong>的方式定期更新</li><li>在集群环境中如果某台 <code>Eureka Server</code> 宕机，<code>Eureka Client</code> 的请求会自动切换到新的 <code>Eureka Server</code> 节点上，当宕机的服务器重新恢复后，<code>Eureka</code> 会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会在节点间进行复制（Replicate To Peer）操作，将请求复制到该 <code>Eureka Server</code> 当前所知的其它所有节点中</li><li><code>Eureka</code> 的集群中，只要有一台 <code>Eureka Server</code> 还在，就能保证注册服务可用（保证可用性），只不过查到的信息可能不是最新的（无法保证一致性）</li><li><code>Eureka</code> 可以很好的应对因网络故障导致部分节点失去联系的情况，有一种<strong>自我保护机制</strong>，而不会像 <code>ZooKeeper</code> 一样导致整个注册服务瘫痪。如果在15分钟内超过85%的节点都没有正常的心跳，那么 <code>Eureka</code> 就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况： <ul><li><code>Eureka</code> 不再从注册表中移除因为长时间没有收到心跳而过期的服务</li><li><code>Eureka</code> 仍然能够接受新服务注册和查询请求，但是<strong>不会被同步到其它节点上（即保证当前节点依然可用）</strong></li><li>当网络稳定时，当前实例新注册的信息会被同步到其它节点中</li></ul></li></ul><h4 id="eureka常用配置" tabindex="-1"><a class="header-anchor" href="#eureka常用配置"><span>Eureka常用配置</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">	#eureka客户端配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">		#是否将自己注册到eureka服务端上去</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		register-with-eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">		#是否获取eureka服务端上注册的服务列表</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		fetch-registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">		#指定注册中心的地址</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        service-url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        	defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://localhost:8001/eureka/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        #启用eureka客户端</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        #定义去eureka服务端获取服务列表的时间间隔</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        registry-fetch-interval-seconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  	#eureka服务端配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  		#关闭eureka服务端的保护机制</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	enable-self-preservation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  	#eureka客户端实例配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  	instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  		#定义服务多久去注册中心续约</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	lease-renewal-interval-in-seconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    	#定义服务多久不去续约认为服务失效</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	lease-expiration-duration-in-seconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">90</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    	#服务主机名称</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	hostname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    	#是否优先使用ip来作为主机名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	prefer-ip-address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注册中心常用配置" tabindex="-1"><a class="header-anchor" href="#注册中心常用配置"><span>注册中心常用配置</span></a></h5><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  	instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	hostname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  	client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	fetch-registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	register-with-eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  	server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	enable-self-preservation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="服务常用配置" tabindex="-1"><a class="header-anchor" href="#服务常用配置"><span>服务常用配置</span></a></h5><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  	client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	serviceUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      		defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://localhost:8001/eureka/</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	fetch-registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	register-with-eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为eureka注册中心添加认证" tabindex="-1"><a class="header-anchor" href="#为eureka注册中心添加认证"><span>为Eureka注册中心添加认证</span></a></h4><h5 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h5><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-netflix-eureka-server&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-security&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h5><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8004</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">eureka-security-server</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  #配置SpringSecurity登录用户名和密码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  security</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">root</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">root</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    hostname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    fetch-registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    register-with-eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="添加websecurityconfig配置" tabindex="-1"><a class="header-anchor" href="#添加websecurityconfig配置"><span>添加WebSecurityConfig配置</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableWebSecurity</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      	/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">         *  默认情况下添加SpringSecurity依赖的应用每个请求都需要添加CSRF token才能访问，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">         *  Eureka客户端注册时并不会添加，所以需要配置/eureka/**路径不需要CSRF token。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">         */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">csrf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ignoringAntMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/eureka/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(http);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="运行服务" tabindex="-1"><a class="header-anchor" href="#运行服务"><span>运行服务</span></a></h5><p>进入注册中心时发现需要填写账号密码，填入配置文件中的账号、密码即可进入</p><h5 id="服务注册" tabindex="-1"><a class="header-anchor" href="#服务注册"><span>服务注册</span></a></h5><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		service-url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">			#填写注册中心地址时需要带上账号密码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">			defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://\${username}:\${password}@\${hostname}:\${port}/eureka/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-cloud-alibaba-nacos" tabindex="-1"><a class="header-anchor" href="#spring-cloud-alibaba-nacos"><span>Spring Cloud Alibaba Nacos</span></a></h3><ul><li>除了服务的注册发现之外，还支持动态配置服务。动态配置服务可以让开发者<strong>以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置</strong>。<strong>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷</strong>。配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</li><li>一句话概括：Nacos=Spring Cloud注册中心 + Spring Cloud配置中心</li></ul><h3 id="consul" tabindex="-1"><a class="header-anchor" href="#consul"><span>Consul</span></a></h3><ul><li>依赖Consul SDK发现服务</li><li>可以通过Consul Template定时从Consul集群获取最新的服务提供者列表并刷新LoadBalance配置，对于消费者来说只需要配置一个统一的服务调用地址</li></ul><p>Consul强一致性带来的是：</p><ol><li>服务注册相比Eureka稍慢，因为raft协议规定超过半数的节点都写入成功才算注册成功</li><li>master节点宕机后，重新选举，导致集群不可用</li></ol><h3 id="eureka和nacos的选择" tabindex="-1"><a class="header-anchor" href="#eureka和nacos的选择"><span>Eureka和Nacos的选择</span></a></h3><p>对于语言来说我们都是Java技术栈，所以注册中心我会更倾向于同一技术体系的 <code>Eureka</code> 和 <code>Nacos</code></p><p>但是我会选择 <code>Nacos</code> ，原因有二</p><ol><li><code>Eureka</code> 已经停止维护了，<code>Nacos</code> 还在一直维护中</li><li><code>Eureka</code> 只能实现最基本的服务发现、服务注册，但是 <code>Nacos</code> 除此之外还有管理界面，还实现了配置中心，显然优势更大</li></ol><h2 id="配置中心组件" tabindex="-1"><a class="header-anchor" href="#配置中心组件"><span>配置中心组件</span></a></h2><h3 id="spring-cloud-config" tabindex="-1"><a class="header-anchor" href="#spring-cloud-config"><span>Spring Cloud Config</span></a></h3><h4 id="配置为本地配置中心" tabindex="-1"><a class="header-anchor" href="#配置为本地配置中心"><span>配置为本地配置中心</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#配置文件在本地</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	profiles</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		active</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">native</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#配置文件的目录</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">			server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">				#配置业务服务获取配置文件时的前缀,非必须</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/config</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				native</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">					search-locations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${configLocation:/config-central}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="业务服务获取配置文件" tabindex="-1"><a class="header-anchor" href="#业务服务获取配置文件"><span>业务服务获取配置文件</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#由于要获取配置信息,所以必须要用bootstrap.yml,如果有application.yml会无法读取</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    	#快速失败响应,一旦无法读取配置文件,直接提示启动失败</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    	fail-fast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    	#配置中心地址</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://admin:admin@\${config.host:39.108.218.3}:\${config.port:8768}/config</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        #获取的配置文件名称</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${spring.profiles.active}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网关组件" tabindex="-1"><a class="header-anchor" href="#网关组件"><span>网关组件</span></a></h2><p>主要起屏蔽下游业务服务的作用，对于浏览器而言，只需要跟网关交互就相当于在与下游多个业务服务节点交互，让浏览器觉得他在和一台服务器交互。可以在网关层做一些最上层的公用的操作，如过<strong>滤恶意请求、设置ip黑白名单、做身份认证、限流、负载均衡</strong>等。</p><h3 id="zuul-1-x" tabindex="-1"><a class="header-anchor" href="#zuul-1-x"><span>Zuul(1.x)</span></a></h3><ul><li>底层是servlet，处理的是http请求</li><li>基于同步 IO</li><li>需要Ribbon、Hystrix配合实现负载均衡，熔断</li></ul><h3 id="zuul-2-x" tabindex="-1"><a class="header-anchor" href="#zuul-2-x"><span>Zuul(2.x)</span></a></h3><ul><li>基于 Netty Server 实现了异步 IO 来接入请求</li></ul><h3 id="gateway" tabindex="-1"><a class="header-anchor" href="#gateway"><span>Gateway</span></a></h3><ul><li>底层是servlet，但使用了webflux，多嵌套了一层框架</li><li>提供了异步支持</li><li>提供了抽象负载均衡，提供了抽象流控</li></ul><h4 id="spring-cloud-gateway解决跨域问题" tabindex="-1"><a class="header-anchor" href="#spring-cloud-gateway解决跨域问题"><span>Spring Cloud Gateway解决跨域问题</span></a></h4><h2 id="负载均衡组件" tabindex="-1"><a class="header-anchor" href="#负载均衡组件"><span>负载均衡组件</span></a></h2><h3 id="ribbon-1" tabindex="-1"><a class="header-anchor" href="#ribbon-1"><span>Ribbon</span></a></h3><h4 id="ribbon负载均衡策略" tabindex="-1"><a class="header-anchor" href="#ribbon负载均衡策略"><span>Ribbon负载均衡策略</span></a></h4><ul><li><code>com.netflix.loadbalancer.RandomRule</code>：从提供服务的实例中以随机的方式</li><li><code>com.netflix.loadbalancer.RoundRobinRule</code>： 以线性轮询的方式，就是维护一个计数器，从提供服务的实例中按顺序选取，第一次选第一个，第二次选第二个，以此类推，到最后一个以后再从头来过</li><li><code>com.netflix.loadbalancer.RetryRule</code>：在RoundRobinRule的基础上添加重试机制，即在指定的重试时间内，反复使用线性轮询策略来选择可用实例</li><li><code>com.netflix.loadbalancer.WeightedResponseTimeRule</code>：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</li><li><code>com.netflix.loadbalancer.BestAvailableRule</code>：选择并发较小的实例</li><li><code>com.netflix.loadbalancer.AvailabilityFilteringRule</code>：先过滤掉故障实例，再选择并发较小的实例</li><li><code>com.netflix.loadbalancer.ZoneAwareLoadBalancer</code>：采用双重过滤，同时过滤不是同一区域的实例和故障实例，选择并发较小的实例</li></ul><h2 id="服务容错保护组件" tabindex="-1"><a class="header-anchor" href="#服务容错保护组件"><span>服务容错保护组件</span></a></h2><h3 id="hystrix-1" tabindex="-1"><a class="header-anchor" href="#hystrix-1"><span>Hystrix</span></a></h3><h1 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h1><h3 id="eureka注册中心-服务注销马上被发现的原因" tabindex="-1"><a class="header-anchor" href="#eureka注册中心-服务注销马上被发现的原因"><span>Eureka注册中心，服务注销马上被发现的原因</span></a></h3><h3 id="eureka注册中心-服务重启不能马上被发现" tabindex="-1"><a class="header-anchor" href="#eureka注册中心-服务重启不能马上被发现"><span>Eureka注册中心，服务重启不能马上被发现</span></a></h3><p><code>一个服务启动后最长可能需要2分钟时间才能被其它服务感知到</code></p><p>原因：三处缓存+一处延迟</p><ul><li><p>Eureka对http响应做了缓存，缓存生命周期是<strong>30秒</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//响应客户端查询某个服务信息的HTTP请求</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Response</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PathParam</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">HeaderParam</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Accept&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> acceptHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">HeaderParam</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;X-Eureka-Accept&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> eurekaAccept){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  //从缓存中拿数据</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> payLoad </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">responseCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cacheKey);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  //get()方法首先会去缓存中查询数据，如果没有则生成数据返回（即真正去查询注册列表），且缓存的有效时间为30s。也就是说，客户端拿到Eureka的响应并不一定是即时的，大部分时候只是缓存信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (payLoad </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Found: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">appName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ok</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(payLoad).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Not Found: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">appName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">NOT_FOUND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Eureka Client对已经获取到的注册信息做了缓存。即服务通过eureka客户端第一次查询到可用服务地址后会将结果缓存，下次再调用时就不会真正向Eureka发起HTTP请求了，这个缓存时间是<strong>30秒</strong></p></li><li><p>负载均衡组件Ribbon也做了缓存。因为Eureka Client调用服务时是根据Ribbon动态选择具体的服务提供者（假设服务提供者有做集群）。Ribbon会从Eureka Client获取服务列表，然后将结果缓存<strong>30秒</strong>。</p></li><li><p>如果不是在Spring Cloud环境下使用这些组件(Eureka, Ribbon)，服务启动后并不会马上向Eureka注册，而是<strong>需要等到第一次发送心跳请求时才会注册</strong>。心跳请求的发送间隔也是<strong>30秒</strong>。（Spring Cloud对此做了修改，服务启动后会马上注册）</p></li></ul><hr><p><strong>另一说法</strong></p><ul><li><p>客户端获取服务实例信息定时任务。客户端在启动的时候会从注册中心<strong>全量获取</strong>所有实例信息，然后启动一个定时任务，定时（<strong>默认的时间是30秒</strong>）从注册中心<strong>差别获取</strong>实例信息。定时任务的执行间隔就导致了服务延迟。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    registry-fetch-interval-seconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> #默认30秒</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改这个时间后也不能解决，注册中心也会对实例进行缓存，有二级缓存，参考上面</p></li></ul><h3 id="eureka-server节点能否在配置文件里配置自身的server地址" tabindex="-1"><a class="header-anchor" href="#eureka-server节点能否在配置文件里配置自身的server地址"><span>Eureka Server节点能否在配置文件里配置自身的Server地址</span></a></h3><p>可以的！当一个Server解析配置的集群地址时，<strong>会过滤掉自身的地址</strong>，这样<strong>服务同步时就不需要同步自身</strong>了。我们配置多个Server时，不需要手动的排除Server自身的发现地址。假设三个注册中心的集群：Server 0,1,2，每个节点可以都加上他们3个的服务发现地址，但他们在实际初始化时，每个Server里<strong>只会生成2个用于数据同步的内置Node</strong>，比如 Server 0 初始化时生成1和2的数据同步Node，类名叫 PeerEurekaNode。</p><h3 id="eureka-server配置registerwitheureka和fetchregistry的区别" tabindex="-1"><a class="header-anchor" href="#eureka-server配置registerwitheureka和fetchregistry的区别"><span>Eureka Server配置registerWithEureka和fetchRegistry的区别</span></a></h3><p>其实每一个Eureka Server Node都内置了一个Eureka Client，也就是说一个Server Node节点可以接受其他Client的注册，<strong>也可以作为一个Client注册到其他Server上</strong>，被其他Client发现和调用。</p><p><strong>registerWithEureka</strong>和<strong>fetchRegistry</strong>的默认值都是<strong>true</strong>，他们<strong>都是客户端配置</strong></p><ul><li><strong>registerWithEureka</strong>：是否要注册到其他Server上。如果我的Server上其实开放了一些Http接口供调用，那么就需要注册，这样其他的Client才能发现我的服务，才能通过RPC调用我提供的Http接口。如果我的Server没有提供对外Http接口，那么这个参数可以设置为false。</li><li><strong>fetchRegistry</strong>：是否需要拉取服务信息。和是否注册一样，如果我的Server需要调用其他的Client的Http接口，那么就需要获取相应的服务发现信息，这样才能正常的调用。同时这个参数还有一个<strong>重要的作用，就是决定Server在初始化时是否立即全量同步其他节点的服务信息</strong>！！！Server初始化时会先初始化其内置的Client。若配置了fetchRegistry=true，那么Client在初始化时会从其他Server全量拉取服务信息，放进Client容器中。Server在初始化时会尝试同步Client容器里的服务信息，如果fetchRegistry=false，服务信息不存在，<strong>只能被动的等其他Server节点以增量的形式同步过来</strong>(Client在执行注册和心跳时对应的注册Server节点会广播此事件，同步给其他的Server节点。当其他Server节点还没有此服务信息时，改为注册此服务信息)。当然正常的通过心跳来同步，最多也仅需要30S而已，是否需要设置此参数就看各自的需求了。</li></ul><h3 id="eureka-server节点间的服务信息同步的流程是怎么样的" tabindex="-1"><a class="header-anchor" href="#eureka-server节点间的服务信息同步的流程是怎么样的"><span>Eureka Server节点间的服务信息同步的流程是怎么样的</span></a></h3><p>不同于Zookeeper，每个操作都需要过半数的节点执行成功才返回给Client。</p><p>Server在初始化时，会根据配置信息生成与其他的Server同步的客户端。每当Server接收到Client的服务请求时，会先处理请求，然后将自身作为一个Client的角色，用相同的请求信息去请求配置里的那些Server节点。会将同步请求封装成一个Task，然后存入一个Queue中，Server定时的提取Queue里的任务，批量的处理它们。</p><p>Server之间的同步只会传播一次，它们通过Header里的一个参数来标识是来自Client的请求还是Server的请求。如果是Server的请求，那么<strong>接收到此请求后不会再进行传播</strong></p><h3 id="eureka-server回收服务信息的自我保护机制是什么-要注意什么" tabindex="-1"><a class="header-anchor" href="#eureka-server回收服务信息的自我保护机制是什么-要注意什么"><span>Eureka Server回收服务信息的自我保护机制是什么？要注意什么？</span></a></h3><p>Server每隔60S执行一次服务信息回收，移除那些心跳时间超时的。能够回收有3个前提：</p><ol><li>心跳信息超时，回收时间距离上次心跳时间超过90秒</li><li>开启了租约过期功能，默认是开启的</li><li>未触发自我保护机制，实际发送心跳的总数小于总数的15%。所谓的自我保护机制，指的是上一分钟内，服务实际发送心跳的总数超过预计总数的85%，可以近似理解为正常存活的Client超过85%。</li></ol><p>那需要注意些什么？如果你的Client个数较少，比如就5个，或者说同一个Server对应的Client就5个，那么当其中的一个宕机了，1/5=20%，直接就触发了自我保护机制，宕机的服务信息会一直存在，不会被回收。对于这种情况，在学习的情况下，可以关闭自我保护机制：eureka.server.enable-self-preservation = false；后者也可以设置Server触发自我保护机制的临界值，eureka.server.renewal-percent-threshold = 0.85，默认是85%，可以修改成适当的值，比如0.5。</p><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="springcloud和dubbo如何选择" tabindex="-1"><a class="header-anchor" href="#springcloud和dubbo如何选择"><span>SpringCloud和Dubbo如何选择?</span></a></h2><p>知乎 廖雪峰老师回答:</p><p>一定要选SpringCloud全家桶：因为它社区支持非常强大，更新非常快。运行速度慢不是缺点，扩展性不强也不是缺点。中小型公司总是担心，如果到了BAT级别不知道SpringCloud撑不撑得住，多虑了，到了那个级别早就财富自由了，这个问题让老板花钱招人解决</p><hr><p>SpringCloud数据传输：http+json，Dubbo数据传输：rpc+二进制</p><p><strong>Dubbo 采用单一长连接和 NIO 异步通讯（保持连接/轮询处理），使用自定义报文的 TCP 协议，并且序列化使用定制 Hessian2 框架，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况，但不适用于传输大数据的服务调用。而 Spring Cloud 直接使用 HTTP 协议（但也不是强绑定，也可以使用 RPC 库，或者采用 HTTP 2.0 + 长链接方式（Fegin 可以灵活设置））且一般采用json的格式来传输数据。</strong></p>`,162),t=[l];function h(r,d){return a(),s("div",null,t)}const g=i(n,[["render",h],["__file","SpringCloud.html.vue"]]),c=JSON.parse('{"path":"/writings/SpringCloud/SpringCloud.html","title":"组件篇","lang":"zh-CN","frontmatter":{"description":"组件篇 Spring Cloud Netflix核心组件 Eureka 关键：注册表 当调用其他服务时，Eureka Client组件会找Eureka Server咨询：需要使用的服务的信息（IP地址、端口号），然后就可以把这些相关信息从Eureka Server的注册表中拉取到自己本地缓存起来。 img Eureka Client：当服务启动时，负责...","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/SpringCloud/SpringCloud.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"组件篇"}],["meta",{"property":"og:description","content":"组件篇 Spring Cloud Netflix核心组件 Eureka 关键：注册表 当调用其他服务时，Eureka Client组件会找Eureka Server咨询：需要使用的服务的信息（IP地址、端口号），然后就可以把这些相关信息从Eureka Server的注册表中拉取到自己本地缓存起来。 img Eureka Client：当服务启动时，负责..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaenolne2j30kp07kju0.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-14T05:20:02.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2022-07-14T05:20:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件篇\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaenolne2j30kp07kju0.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaenyintlj30in070q4d.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaezdxtn0j30kr08640v.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaf40ad3bj30js0d1t9z.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggaf97a437j30kf0eaadz.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggafj3fxpkj30ks0ajgo9.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20211117184241.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggp754cvvtj30m80azwg8.jpg\\"],\\"dateModified\\":\\"2022-07-14T05:20:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"Spring Cloud Netflix核心组件","slug":"spring-cloud-netflix核心组件","link":"#spring-cloud-netflix核心组件","children":[{"level":3,"title":"Eureka","slug":"eureka","link":"#eureka","children":[]},{"level":3,"title":"Feign","slug":"feign","link":"#feign","children":[]},{"level":3,"title":"Ribbon","slug":"ribbon","link":"#ribbon","children":[]},{"level":3,"title":"Zuul","slug":"zuul","link":"#zuul","children":[]},{"level":3,"title":"Hystrix","slug":"hystrix","link":"#hystrix","children":[]},{"level":3,"title":"Hystrix Dashboard","slug":"hystrix-dashboard","link":"#hystrix-dashboard","children":[]},{"level":3,"title":"Turbine","slug":"turbine","link":"#turbine","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"Spring Cloud Alibaba核心组件","slug":"spring-cloud-alibaba核心组件","link":"#spring-cloud-alibaba核心组件","children":[]},{"level":2,"title":"注册中心组件","slug":"注册中心组件","link":"#注册中心组件","children":[{"level":3,"title":"注册中心的引入","slug":"注册中心的引入","link":"#注册中心的引入","children":[]},{"level":3,"title":"CAP理论","slug":"cap理论","link":"#cap理论","children":[]},{"level":3,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]},{"level":3,"title":"考虑","slug":"考虑","link":"#考虑","children":[]},{"level":3,"title":"总览","slug":"总览","link":"#总览","children":[]},{"level":3,"title":"Apache ZooKeeper","slug":"apache-zookeeper","link":"#apache-zookeeper","children":[]},{"level":3,"title":"Spring Cloud Netflix Eureka","slug":"spring-cloud-netflix-eureka","link":"#spring-cloud-netflix-eureka","children":[]},{"level":3,"title":"Spring Cloud Alibaba Nacos","slug":"spring-cloud-alibaba-nacos","link":"#spring-cloud-alibaba-nacos","children":[]},{"level":3,"title":"Consul","slug":"consul","link":"#consul","children":[]},{"level":3,"title":"Eureka和Nacos的选择","slug":"eureka和nacos的选择","link":"#eureka和nacos的选择","children":[]}]},{"level":2,"title":"配置中心组件","slug":"配置中心组件","link":"#配置中心组件","children":[{"level":3,"title":"Spring Cloud Config","slug":"spring-cloud-config","link":"#spring-cloud-config","children":[]}]},{"level":2,"title":"网关组件","slug":"网关组件","link":"#网关组件","children":[{"level":3,"title":"Zuul(1.x)","slug":"zuul-1-x","link":"#zuul-1-x","children":[]},{"level":3,"title":"Zuul(2.x)","slug":"zuul-2-x","link":"#zuul-2-x","children":[]},{"level":3,"title":"Gateway","slug":"gateway","link":"#gateway","children":[]}]},{"level":2,"title":"负载均衡组件","slug":"负载均衡组件","link":"#负载均衡组件","children":[{"level":3,"title":"Ribbon","slug":"ribbon-1","link":"#ribbon-1","children":[]}]},{"level":2,"title":"服务容错保护组件","slug":"服务容错保护组件","link":"#服务容错保护组件","children":[{"level":3,"title":"Hystrix","slug":"hystrix-1","link":"#hystrix-1","children":[]},{"level":3,"title":"Eureka注册中心，服务注销马上被发现的原因","slug":"eureka注册中心-服务注销马上被发现的原因","link":"#eureka注册中心-服务注销马上被发现的原因","children":[]},{"level":3,"title":"Eureka注册中心，服务重启不能马上被发现","slug":"eureka注册中心-服务重启不能马上被发现","link":"#eureka注册中心-服务重启不能马上被发现","children":[]},{"level":3,"title":"Eureka Server节点能否在配置文件里配置自身的Server地址","slug":"eureka-server节点能否在配置文件里配置自身的server地址","link":"#eureka-server节点能否在配置文件里配置自身的server地址","children":[]},{"level":3,"title":"Eureka Server配置registerWithEureka和fetchRegistry的区别","slug":"eureka-server配置registerwitheureka和fetchregistry的区别","link":"#eureka-server配置registerwitheureka和fetchregistry的区别","children":[]},{"level":3,"title":"Eureka Server节点间的服务信息同步的流程是怎么样的","slug":"eureka-server节点间的服务信息同步的流程是怎么样的","link":"#eureka-server节点间的服务信息同步的流程是怎么样的","children":[]},{"level":3,"title":"Eureka Server回收服务信息的自我保护机制是什么？要注意什么？","slug":"eureka-server回收服务信息的自我保护机制是什么-要注意什么","link":"#eureka-server回收服务信息的自我保护机制是什么-要注意什么","children":[]}]},{"level":2,"title":"SpringCloud和Dubbo如何选择?","slug":"springcloud和dubbo如何选择","link":"#springcloud和dubbo如何选择","children":[]}],"git":{"createdTime":null,"updatedTime":1657776002000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":26.42,"words":7925},"filePathRelative":"writings/SpringCloud/SpringCloud.md","autoDesc":true}');export{g as comp,c as data};
