const e=JSON.parse('{"key":"v-9d2dfb2e","path":"/writings/pattern/proxy.html","title":"代理模式","lang":"zh-CN","frontmatter":{"title":"代理模式","icon":"article","category":["设计模式"],"description":"代理模式 定义：为其他对象提供一种代理，以控制对这个对象的访问，代理对象在客户端和目标对象之间起到中介作用，达到代码增强的目的 适用场景 保护目标对象 增强目标对象 优点： 将代理对象和真实被调用的目标对象分离，一定程度上降低了系统的耦合程度 可以保护目标对象，增强目标对象的功能 缺点： 使用代理模式会增加系统的复杂度 在客户端和目标对象之间增加了一个代理对象，会导致请求处理速度变慢","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/proxy.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"代理模式"}],["meta",{"property":"og:description","content":"代理模式 定义：为其他对象提供一种代理，以控制对这个对象的访问，代理对象在客户端和目标对象之间起到中介作用，达到代码增强的目的 适用场景 保护目标对象 增强目标对象 优点： 将代理对象和真实被调用的目标对象分离，一定程度上降低了系统的耦合程度 可以保护目标对象，增强目标对象的功能 缺点： 使用代理模式会增加系统的复杂度 在客户端和目标对象之间增加了一个代理对象，会导致请求处理速度变慢"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"代理模式中的角色","slug":"代理模式中的角色","link":"#代理模式中的角色","children":[]},{"level":2,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[]},{"level":2,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[{"level":3,"title":"jdk实现","slug":"jdk实现","link":"#jdk实现","children":[]},{"level":3,"title":"CGLib实现","slug":"cglib实现","link":"#cglib实现","children":[]},{"level":3,"title":"JDK实现与CGLib实现的区别","slug":"jdk实现与cglib实现的区别","link":"#jdk实现与cglib实现的区别","children":[]}]},{"level":2,"title":"静态代理和动态代理的区别","slug":"静态代理和动态代理的区别","link":"#静态代理和动态代理的区别","children":[]},{"level":2,"title":"Spring中的代理选择原则","slug":"spring中的代理选择原则","link":"#spring中的代理选择原则","children":[]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":3.85,"words":1155},"filePathRelative":"writings/pattern/proxy.md","localizedDate":"2023年3月1日","excerpt":"<h1> 代理模式</h1>\\n<p>定义：为其他对象提供一种代理，以控制对这个对象的访问，代理对象在客户端和目标对象之间起到<strong>中介</strong>作用，达到代码<strong>增强</strong>的目的</p>\\n<p>适用场景</p>\\n<ol>\\n<li>保护目标对象</li>\\n<li>增强目标对象</li>\\n</ol>\\n<p>优点：</p>\\n<ol>\\n<li>\\n<p>将代理对象和真实被调用的目标对象分离，一定程度上降低了系统的耦合程度</p>\\n</li>\\n<li>\\n<p>可以保护目标对象，增强目标对象的功能</p>\\n</li>\\n</ol>\\n<p>缺点：</p>\\n<ol>\\n<li>\\n<p>使用代理模式会增加系统的复杂度</p>\\n</li>\\n<li>\\n<p>在客户端和目标对象之间增加了一个代理对象，会导致请求处理速度变慢</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
