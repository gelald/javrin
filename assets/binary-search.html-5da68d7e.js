import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-85442c0b.js";const e={},p=t(`<h1 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h1><p>概述：二分查找参考了二叉查找树的原理对<strong>数组</strong>进行数据查询，每次都用一个<strong>中间值</strong>与目标值做比较从而划分出两个下一轮的查询区间，直到找到目标值为止。</p><p>适用场景：<strong>数组中的数据是有序的，而是元素不能重复</strong></p><p>在写二分查找，经常容易纠结的点在于：</p><ul><li>新一轮查找区间的右边界是 middle 还是 middle - 1</li><li>while 条件中要写 left &lt; right 还是 left &lt;= right</li><li>数组的长度是奇数和偶数时，对中间值有什么影响</li></ul><p>总的来说只要把区间划分讨论清楚，上面的问题就迎刃而解了</p><p>区间划分方式：</p><ul><li>写法一：[left, right]</li><li>写法二：[left, right)</li></ul><h2 id="写法一" tabindex="-1"><a class="header-anchor" href="#写法一" aria-hidden="true">#</a> 写法一</h2><p>我们定义 target 是在一个在左闭右闭的区间里，<strong>也就是[left, right]</strong></p><h3 id="程序实现" tabindex="-1"><a class="header-anchor" href="#程序实现" aria-hidden="true">#</a> 程序实现</h3><ul><li><p>初始 left 是最左边的索引，初始 right 是最右边的索引</p></li><li><p>循环条件：left &lt;= right，当 left = right 的时候，区间内只有一个值，此时这个值也是有比较意义的</p></li><li><p>middle = ( left + right ) / 2</p><blockquote><p>为了防止 left + right 的值溢出取值范围，用一个等式替换：left + (( right - left ) / 2)</p></blockquote></li><li><p>target 值和 middle 比</p><ul><li><p>如果相等就返回索引值</p></li><li><p>如果小于 middle 值，那么 left 不变，right = middle - 1 (因为 middle 已经被比较过了，所以下一个区间应该不包含 middle 值)</p></li><li><p>如果大于 middle 值，那么 right 不变，left = middle + 1 (理由同上)</p></li></ul></li></ul><p>所以整体代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> target <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果在数组中找到了目标值，返回下标</span>
            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//大于中间值，那么target可能位于右边的区间[middle+1, right]</span>
            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//小于中间值，那么target可能位于左边的区间[left, middle+1]</span>
            right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如果数组长度是奇数" tabindex="-1"><a class="header-anchor" href="#如果数组长度是奇数" aria-hidden="true">#</a> 如果数组长度是奇数</h3><p>假设如下数组：[1, 4, 7, 9, 16, 20, 23]，数组长度是7，目标值是 1</p><ul><li>初始 <ul><li>left = 0，right = 6</li></ul></li><li>第一次循环 <ul><li>middle = 3，array[middle] = 9</li><li>大于 target 值，圈定左边的区间，right = 2</li></ul></li><li>第二次循环 <ul><li>middle = 1，array[middle] = 4</li><li>大于 target 值，圈定左边的区间，right = 0</li></ul></li><li>第三次循环 <ul><li>middle = 0，array[middle] = 1</li><li>等于 target 值，返回下标 0</li></ul></li></ul><h3 id="如果数组长度是偶数" tabindex="-1"><a class="header-anchor" href="#如果数组长度是偶数" aria-hidden="true">#</a> 如果数组长度是偶数</h3><p>假设如下数组：[1, 4, 7, 9, 16, 20]，数组长度是6，目标值是 20</p><ul><li>初始 <ul><li>left = 0，right = 5</li></ul></li><li>第一次循环 <ul><li>middle = 2， array[middle] = 7</li><li>小于 target 值，圈定右边区间，left = 3</li></ul></li><li>第二次循环 <ul><li>middle = 4，array[middle] = 16</li><li>小于 target 值，圈定右边区间，left = 5</li></ul></li><li>第三次循环 <ul><li>middle = 5，array[middle] = 20</li><li>等于 target 值，返回下标 5</li></ul></li></ul><p><strong>可以看到只要区间变化、中间值讨论得合理，无论数组长度是奇数还是偶数，都是没有影响的</strong></p><h2 id="写法二" tabindex="-1"><a class="header-anchor" href="#写法二" aria-hidden="true">#</a> 写法二</h2><p>我们定义 target 是在一个在左闭右开的区间里，<strong>也就是[left, right)</strong></p><h3 id="程序实现-1" tabindex="-1"><a class="header-anchor" href="#程序实现-1" aria-hidden="true">#</a> 程序实现</h3><ul><li><p>初始 left 是最左边索引，初始 right 是数组长度 (因为定义了左闭右开区间的话，右边界是无法访问的)</p></li><li><p>循环条件：left &lt; right，因为在左闭右开区间中，是不存在 left == right 的情况的</p></li><li><p>middle 值不变，依旧是取中间值 middle = ( left + right ) / 2</p><blockquote><p>右边界无法触及，基本上的规律是写法二的 right 比 写法一的 right 大 1，虽然大 1 可能对中间值产生影响，但是是不会影响最终结果的，所以依旧这么取中间值</p></blockquote></li><li><p>target 值和 middle 比</p><ul><li><p>如果相等就返回索引值</p></li><li><p>如果小于 middle 值，那么 left 不变，right = middle (时刻记住右边界是不可触达的)</p></li><li><p>如果大于 middle 值，那么 right 不变，left = middle + 1 (这个 middle 已经被比较过了，所以区间中不需要再包含 middle 值)</p></li></ul></li></ul><p>所以整体代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//数组为空的情况</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//确定目标值是否位于数组中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> target <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target  <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//因为right右边界是无法触及的，再加上middle不应该包含在新的区间中</span>
            right <span class="token operator">=</span> middle<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//左边界更新规则和写法一无异</span>
            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>用主流的两种区间划定方案讨论了二分查找的写法，解决了以前写二分查找的纠结点</p>`,29),l=[p];function i(o,c){return a(),s("div",null,l)}const d=n(e,[["render",i],["__file","binary-search.html.vue"]]);export{d as default};
