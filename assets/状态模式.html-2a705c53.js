import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-f9042815.js";const p={},e=t(`<h1 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式" aria-hidden="true">#</a> 状态模式</h1><p>定义：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类</p><p>核心：排除掉 <code>if...else...</code> 代码块，把对象的行为和状态绑定在一起，对应状态下只能有对应的行为</p><p>适用场景：</p><ol><li>对象的行为随状态改变而改变</li><li>一个操作中含有庞大的多分支结构，并且这些分支取决于对象的状态</li></ol><p>优点：</p><ol><li>将独立的状态设置为类，消除了冗余的 <code>if...else...</code> 代码块</li><li>状态转换显示化：通常对象内部状态切换是通过赋不同的数值来表示，使用状态类让转换更加明确</li></ol><p>缺点：</p><ol><li>状态都用类来表示，类数目变多，增加维护难度</li><li>增加新的状态需要修改负责状态转换类的源代码、修改某个状态的行为需要修改这个状态类的源代码，不符合开闭原则</li></ol><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>以论坛为例，用户可以对文章进行收藏、评论等操作，但是这些操作都需要在登录状态下完成，未登录的状态需要先登录后才能进行收藏、评论</p><p>抽象状态</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">UserState</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">AppContext</span> context<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContext</span><span class="token punctuation">(</span><span class="token class-name">AppContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token class-name">String</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>登录状态，可以完成操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginState</span> <span class="token keyword">extends</span> <span class="token class-name">UserState</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收藏成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token class-name">String</span> comment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未登录状态，在操作前需要先切换状态</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnLoginState</span> <span class="token keyword">extends</span> <span class="token class-name">UserState</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switch2login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token class-name">String</span> comment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switch2login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">switch2login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;跳转到登录页！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token constant">STATE_LOGIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>状态上下文，默认状态为未登录状态</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppContext</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">UserState</span> <span class="token constant">STATE_LOGIN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">UserState</span> <span class="token constant">STATE_UNLOGIN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnLoginState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">UserState</span> currentState <span class="token operator">=</span> <span class="token constant">STATE_UNLOGIN</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
        <span class="token constant">STATE_LOGIN</span><span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">STATE_UNLOGIN</span><span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">UserState</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">UserState</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">comment</span><span class="token punctuation">(</span><span class="token class-name">String</span> comment<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端通过状态上下文来完成操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">favorite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string">&quot;评论：好文章，360个赞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="状态模式在源码中的体现" tabindex="-1"><a class="header-anchor" href="#状态模式在源码中的体现" aria-hidden="true">#</a> 状态模式在源码中的体现</h2><p>状态模式的具体应用在源码中非常少见，一般情况下只提供了通用的解决方案</p><h2 id="状态模式和责任链模式的区别" tabindex="-1"><a class="header-anchor" href="#状态模式和责任链模式的区别" aria-hidden="true">#</a> 状态模式和责任链模式的区别</h2><p>在某些情况下，状态模式中的状态可以理解为责任，这种情况下两种设计模式都可以用</p><ul><li><p>从定义看：状态模式强调的是一个对象内部状态的改变；责任链模式强调的是外部节点对象间的改变</p></li><li><p>从代码看：状态模式各个状态之间会知道自己下一个要进入的状态对象，因为状态的切换过程是内部决定的；责任链模式并不清楚下一个节点处理的对象，因为链式组装是由客户端决定的</p></li></ul><h2 id="状态模式和策略模式的区别" tabindex="-1"><a class="header-anchor" href="#状态模式和策略模式的区别" aria-hidden="true">#</a> 状态模式和策略模式的区别</h2><ul><li><p>策略模式是先把一系列的策略设计好，提供给用户选择，而且每一个策略是独立的、可以相互替换的</p></li><li><p>状态模式每个状态是存在相互关系的，彼此之间在一定条件下存在自动切换状态的效果，用户无法选择状态，只能设置初始状态</p></li></ul><h2 id="状态模式和代理模式的联系" tabindex="-1"><a class="header-anchor" href="#状态模式和代理模式的联系" aria-hidden="true">#</a> 状态模式和代理模式的联系</h2><p>状态模式使用了静态代理模式，组合的形式一般都使用了静态代理模式，状态模式中的上下文角色就是对状态对象的全权代理</p><h2 id="状态模式和委派模式的联系" tabindex="-1"><a class="header-anchor" href="#状态模式和委派模式的联系" aria-hidden="true">#</a> 状态模式和委派模式的联系</h2><p>状态模式使用了委派模式，状态模式中的上下文角色就是一个委派角色，委派其实就是全权的静态代理</p>`,32),c=[e];function o(i,l){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","状态模式.html.vue"]]);export{d as default};
