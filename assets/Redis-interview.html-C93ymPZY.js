import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as i,a as n}from"./app-R_JIpTO7.js";const t={},a=n('<h1 id="redis-面试突击" tabindex="-1"><a class="header-anchor" href="#redis-面试突击"><span>Redis 面试突击</span></a></h1><h2 id="redis-是什么" tabindex="-1"><a class="header-anchor" href="#redis-是什么"><span>Redis 是什么</span></a></h2><p>Redis 是一个基于内存的数据库，其对数据的读写都是在内存中完成的，因此读写速度非常快，常用于缓存、消息队列、分布式锁等</p><p>Redis 提供了多种数据类型来支持不同的业务场景，比如 String(字符串)、Hash(哈希)、List (列表)、Set(集合)、Zset(有序集合)、Bitmaps（位图）、HyperLogLog（基数统计）、GEO（地理信息）、Stream（流），并且对数据类型的操作都是<strong>原子性</strong>的，因为执行命令由单线程负责的，不存在并发竞争的问题。</p><p>除此之外，Redis 还支持<strong>事务 、持久化、Lua 脚本、多种集群方案（主从复制、哨兵）、内存淘汰机制</strong></p><h2 id="为什么选择-redis-作为-mysql-的缓存" tabindex="-1"><a class="header-anchor" href="#为什么选择-redis-作为-mysql-的缓存"><span>为什么选择 Redis 作为 MySQL 的缓存</span></a></h2><p>最主要的原因是：<strong>高性能、高并发</strong></p><ul><li>高性能：用户第一次访问 MySQL 中的数据，这个过程可能比较慢，因为数据需要从磁盘上读取；假如把这些从 MySQL 读取出来的数据放到 Redis 中，这样下一次访问就是直接读取内存中的数据了，速度非常快。如果 MySQL 中的数据有改变，那么也需要同步修改 Redis 中的数据，这里会涉及到 MySQL 和 Redis 双写一致性的问题</li><li>高并发：单机 MySQL 的 QPS 一般来说最高在 1w 左右，而单机 Redis 的 QPS 可以比较轻松地突破 10w，所以直接访问 Redis 能处理的请求数量是远大于直接访问 MySQL 的，所以可以考虑把一部分数据放到 Redis 中，这样需要访问这些数据的请求就可以直接访问 Redis 而不用访问 MySQL</li></ul><h2 id="redis-的数据类型及其使用场景" tabindex="-1"><a class="header-anchor" href="#redis-的数据类型及其使用场景"><span>Redis 的数据类型及其使用场景</span></a></h2><h3 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串"><span>String 字符串</span></a></h3><p>String 可以存储字符串，并针对字符串做一定操作；还可以存储整型、浮点型数据，并针对它们做自增或自减的操作</p><p>底层<strong>使用 SDS 简单动态字符串</strong>来实现，SDS 有以下特点：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602175402.png" alt=""></p><ul><li>SDS 不仅可以保存字符串，还可以保存二进制数据</li><li>SDS 维护了一个 len 属性记录了字符串长度，获取字符串长度的时间复杂度为 O(1)</li><li>SDS 在拼接字符串前会做空间检查，如果空间不足会自动扩容，拼接字符串不会造成缓冲区溢出，保证 API 使用安全</li></ul><p>使用场景：</p><ul><li>缓存常规数据：如 session 信息、序列化后的对象等</li><li>计数场景：单位时间访问数等</li><li><strong>分布式锁</strong>，可以使用 <code>SETNX KEY VALUE</code> 简单实现，但是对于释放锁会有缺陷</li></ul><h3 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表"><span>List 列表</span></a></h3><p>List 是一个链表结构，链表上每一个节点都可以存储 String 类型的数据，可以对链表两端进行 push、pop 操作</p><p>3.2 版本后底层是使用 QuickList 来实现，之前的版本是用压缩列表（元素少于 512 个，元素大小小于 64 字节）或双向链表共同实现的</p><p>使用场景：</p><ul><li><strong>信息流展示</strong>，最新的动态</li><li><strong>消息队列</strong>，但是对消息丢失、消息堆积处理方面存在不足</li></ul><h3 id="压缩列表" tabindex="-1"><a class="header-anchor" href="#压缩列表"><span>压缩列表</span></a></h3><p>压缩列表为了节约内存而开发的，它是<strong>由连续内存块组成的顺序型数据结构</strong>，有点类似于数组，压缩列表上有 4。个固定的字段：</p><ul><li><strong>zlbytes</strong>，记录整个压缩列表占用对内存字节数；</li><li><strong>zltail</strong>，记录压缩列表「尾部」节点距离起始地址由多少字节，也就是列表尾的偏移量；</li><li><strong>zllen</strong>，记录压缩列表包含的节点数量；</li><li><strong>zlend</strong>，标记压缩列表的结束点，固定值 0xFF（十进制255）。</li></ul><p>使得查询第一个、最后一个元素时效率非常高效，但是查询其他元素就还是需要遍历查询，因此不适合存放过多元素</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602210722.png" alt=""></p><h3 id="listpack" tabindex="-1"><a class="header-anchor" href="#listpack"><span>ListPack</span></a></h3><p>ListPack 吸收了压缩列表很多优点，比如用一块连续的内存空间，比较主要的不同是节点数据不再维护上一个节点的长度，这样可以<strong>避免其他节点的长度变化时引起的连锁更新</strong></p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602214014.png" alt=""></p><h3 id="quicklist" tabindex="-1"><a class="header-anchor" href="#quicklist"><span>QuickList</span></a></h3><p><strong>QuickList 实际上是压缩列表和双向链表的混合体</strong>，它将双向链表按段切分，每一段使用压缩列表来紧凑存储，多个压缩列表之间使用双向指针串接起来</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602171833.png" alt=""></p><h3 id="hash-哈希" tabindex="-1"><a class="header-anchor" href="#hash-哈希"><span>Hash 哈希</span></a></h3><p>Hash 是一个 String 类型的键值对映射表，类似于 Java 中 HashMap，当发生哈希冲突时，和 HashMap 一样，也是使用链式哈希的方式解决；哈希表扩容时是<strong>使用渐进式 rehash 的方式扩容</strong>的，每次对元素进行操作时会顺序将 Hash1 上对应索引的元素 迁移到 Hash2 上</p><p>底层使用压缩列表（元素少于 512 个，元素大小小于 64 字节）或哈希表来实现</p><p>使用场景：</p><ul><li>缓存对象数据</li><li><strong>存储购物车信息</strong>，key 为用户 id，field 为商品 id，value 为商品数量</li></ul><h3 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合"><span>Set 集合</span></a></h3><p>Set 是一个包含字符串的无序集合，集合中的元素没有顺序但是能保证唯一，有点类似 Java 中的 HashSet 集合</p><p>底层使用整数集合（元素少于 512 个，元素大小小于 64 字节）或哈希表来实现</p><p>使用场景：</p><ul><li><strong>随机获取集合中元素</strong>：抽奖系统、随机点名系统；SPOP：随机获取并移除元素；SRANGMEMBER：随机获取元素</li><li>获取<strong>多个数据源做交集并集差集</strong>的场景：得益于 Set 集合可以轻松做交集、并集、差集的操作，共同关注、共同好友点赞的场景都可以满足</li></ul><h3 id="zset-有序集合" tabindex="-1"><a class="header-anchor" href="#zset-有序集合"><span>ZSet 有序集合</span></a></h3><p>ZSet 和 Set 有点类似，但是每一个元素都多了一个 score 权重参数，使得集合中的数据可以按照 score 来进行有序排序，还可以通过 score 范围获取元素列表</p><p>底层使用压缩列表（元素少于 128 个，元素大小小于 64 字节）或跳表来实现</p><p>使用场景：</p><ul><li><strong>满足大多数排序场景</strong>：排行榜，微信步数排行榜等</li></ul><h3 id="跳表" tabindex="-1"><a class="header-anchor" href="#跳表"><span>跳表</span></a></h3><p>跳表是在链表的基础上进行的改良，实现了一种二维链表，头节点是一个数组，数组中的元素维护了一个数组，根据跨度分别指向不同层级的节点，每个层级的节点都通过指针相互连接起来；链表中的节点也维护了一个数组，分别指向不同跨度的下一个节点</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602213319.png" alt=""></p><h2 id="redis-线程模型" tabindex="-1"><a class="header-anchor" href="#redis-线程模型"><span>Redis 线程模型</span></a></h2><h3 id="redis-单线程模型" tabindex="-1"><a class="header-anchor" href="#redis-单线程模型"><span>Redis 单线程模型</span></a></h3><p>Redis 单线程模型是指：<code>接收客户端请求 -&gt; 解析客户端请求 -&gt; 进行数据读写 -&gt; 响应数据给客户端</code> 这个过程由 Redis 的一个线程完成</p><p>但是 Redis 还是会启动后台线程的，比如关闭文件、AOF 刷盘、释放内存，因为这些任务的操作都是很耗时的，如果放在主线程，那么 Redis 的主线程很容易导致阻塞，无法处理请求，效率降低。</p><ul><li><strong>删除大 key 数据时</strong>，应该使用 unlink key 命令，而不要直接执行 del key 命令，因为直接删除会在主线程中执行，效率低，<strong>应该使用 unlink 来进行异步删除</strong></li></ul><h3 id="redis-监听大量客户端连接的做法" tabindex="-1"><a class="header-anchor" href="#redis-监听大量客户端连接的做法"><span>Redis 监听大量客户端连接的做法</span></a></h3><p>Redis 通过 <strong>IO 多路复用器</strong> 来监听来自客户端的大量连接（或者说是监听多个 socket），当客户端发送事件时，交给<strong>事件分发器</strong>根据不同的时间类型来调用不同的<strong>事件处理器</strong></p><p>这样做的好处是：IO 多路复用使 Redis 只需要一个线程就可以管理每一个客户端的连接，只有等客户端的数据到达后，才为其服务（通过事件分发器分发到具体处理器上）</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230603161415.png" alt=""></p><h3 id="redis-的后台线程" tabindex="-1"><a class="header-anchor" href="#redis-的后台线程"><span>Redis 的后台线程</span></a></h3><p>虽然 Redis 对数据的操作主要逻辑是单线程来处理，但是对于一些耗时操作，Redis 还是使用了其他子线程来协助完成。</p><p>后台线程相当于一个消费者，生产者把耗时任务丢到任务队列中，消费者（BIO）不停轮询这个队列，拿出任务就去执行对应的方法即可。</p><p>主要有三个后台线程：</p><ul><li>关闭文件：<code>bio_close_file</code> 后台线程监听关闭文件任务队列来释放 AOF / RDB 等过程中产生的临时文件资源</li><li>AOF 文件刷盘：<code>bio_aof_fsync</code> 后台线程监听 AOF 刷盘任务队列调用 <code>fsync</code> 函数将系统内核缓冲区还未同步到到磁盘的数据强制刷到磁盘（ AOF 文件）</li><li>释放内存：<code>bio_lazy_free</code>后台线程监听 lazy free 任务队列释放通过异步删除的大对象占用的内存空间</li></ul><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230603161934.png" alt=""></p><h3 id="redis-6-之前为什么使用单线程" tabindex="-1"><a class="header-anchor" href="#redis-6-之前为什么使用单线程"><span>Redis 6 之前为什么使用单线程</span></a></h3><ol><li><strong>CPU 并不是制约 Redis 性能表现的瓶颈所在</strong>，更多情况下是受到内存大小和网络I/O的限制，所以 Redis 核心模型使用单线程</li><li>使用多线程会增加系统复杂度，引入其他线程问题，如加锁、释放锁甚至死锁带来的线程安全问题，线程上下文切换也会带来性能消耗，使用单线程模型简单，维护容易</li></ol><h3 id="redis-6-后为什么引入多线程" tabindex="-1"><a class="header-anchor" href="#redis-6-后为什么引入多线程"><span>Redis 6 后为什么引入多线程</span></a></h3><p>鉴于单线程模型的 Redis 性能瓶颈在网络 IO 上，Redis 6 引入多线程主要是提高网络 IO 的读写性能。<strong>但是对于 Redis 的命令执行，Redis 依然是采用单线程的方式执行的</strong></p><p>并且默认情况下，Redis 的 IO 多线程<strong>只针对发送相应数据流程</strong>，对于处理读请求流程还需要在 <code>redis.conf</code> 配置文件中额外启动；<strong>官方推荐 IO 多线程数 = 机器核心数 - 1</strong>，因为主线程也是其中一个 IO 线程</p><h3 id="为什么-redis-单线程性能也这么高" tabindex="-1"><a class="header-anchor" href="#为什么-redis-单线程性能也这么高"><span>为什么 Redis 单线程性能也这么高</span></a></h3><ol><li>Redis 大部分操作都在内存中完成，并且采用了高效的数据结构，Redis 性能瓶颈往往不在 CPU，而在内存大小和网络 IO 方面</li><li>单线程操作可以避免多线程带来的问题，比如线程上下文切换的时间消耗，并且不用加锁，也不会导致出现死锁</li><li>Redis 是采用了 IO 多路复用模型来处理大量的客户端请求的，简单来说是一个线程管理多个客户端连接，只要当客户端有数据发送，那么就交给事件分发器让具体的事件处理器响应请求</li></ol><h2 id="redis-持久化" tabindex="-1"><a class="header-anchor" href="#redis-持久化"><span>Redis 持久化</span></a></h2><p>Redis 性能高的一个重要原因是数据操作都放在内存中处理，当 Redis 重启时，为了保证内存中的数据不丢失，Redis 提供了数据持久化机制，把数据持久化到磁盘，保证了重启时能够从磁盘中恢复原有数据</p><h3 id="redis-提供三种持久化策略" tabindex="-1"><a class="header-anchor" href="#redis-提供三种持久化策略"><span>Redis 提供三种持久化策略</span></a></h3><ul><li><p>RDB 快照：将某一时刻的内存数据以<strong>二进制</strong>的方式写入磁盘。默认会开启 RDB 持久化策略，Redis 会 fork 一个子线程来执行，不会阻塞主线程</p></li><li><p>AOF 日志：每执行一条<strong>写操作命令</strong>，就把命令追加到日志文件中</p><ul><li><p>整体流程：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230604174756.png" alt=""></p></li><li><p>随着 AOF 文件不断写入，AOF 文件的体积会越来越大，这时候需要对 AOF 文件进行重写，达到压缩的目的</p></li></ul></li><li><p>混合模式：Redis 4 新增的策略，结合了两种策略的优点，把 RDB 的内容写入到 AOF 文件的开头处，可以快速加载并且同时避免丢失过多数据，缺点是 RDB 部分是压缩格式，可读性差</p></li></ul><p>如何选择：</p><p>由于 RDB 文件一般会比记录每条写操作语句的 AOF 文件体积小，AOF 记录的是写操作命令，RDB 记录的是内存数据的快照，在数据恢复时，RDB 的策略恢复会更快。</p><p>但是从数据安全性的方面来说，因为 RDB 无法做到实时的持久化，假如把 RDB 的持久化策略配置成每秒都做全量快照，一意义不大，二对 CPU 资源消耗也是非常大的，甚至会导致宕机。所以 RDB 的实时性不如 AOF，那么在数据恢复中，RDB 有可能会丢失宕机到最后一次持久化这段时间的数据。</p><ul><li><strong>如果对于少量数据丢失来说影响不大的话，可以放心选择 RDB</strong></li><li><strong>如果对数据安全性要求比较高的话</strong>，也不建议单独使用 AOF，因为 AOF 恢复数据较慢，还要考虑 AOF 文件膨胀的问题，<strong>推荐使用混合模式持久化，同时兼顾性能与安全</strong></li></ul>',80),l=[a];function r(d,o){return i(),s("div",null,l)}const h=e(t,[["render",r],["__file","Redis-interview.html.vue"]]),c=JSON.parse('{"path":"/writings/Redis/Redis-interview.html","title":"Redis 面试突击","lang":"zh-CN","frontmatter":{"description":"Redis 面试突击 Redis 是什么 Redis 是一个基于内存的数据库，其对数据的读写都是在内存中完成的，因此读写速度非常快，常用于缓存、消息队列、分布式锁等 Redis 提供了多种数据类型来支持不同的业务场景，比如 String(字符串)、Hash(哈希)、List (列表)、Set(集合)、Zset(有序集合)、Bitmaps（位图）、Hyp...","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Redis/Redis-interview.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Redis 面试突击"}],["meta",{"property":"og:description","content":"Redis 面试突击 Redis 是什么 Redis 是一个基于内存的数据库，其对数据的读写都是在内存中完成的，因此读写速度非常快，常用于缓存、消息队列、分布式锁等 Redis 提供了多种数据类型来支持不同的业务场景，比如 String(字符串)、Hash(哈希)、List (列表)、Set(集合)、Zset(有序集合)、Bitmaps（位图）、Hyp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602175402.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-27T12:37:11.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-07-27T12:37:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 面试突击\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602175402.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602210722.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602214014.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602171833.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230602213319.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230603161415.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230603161934.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230604174756.png\\"],\\"dateModified\\":\\"2023-07-27T12:37:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"Redis 是什么","slug":"redis-是什么","link":"#redis-是什么","children":[]},{"level":2,"title":"为什么选择 Redis 作为 MySQL 的缓存","slug":"为什么选择-redis-作为-mysql-的缓存","link":"#为什么选择-redis-作为-mysql-的缓存","children":[]},{"level":2,"title":"Redis 的数据类型及其使用场景","slug":"redis-的数据类型及其使用场景","link":"#redis-的数据类型及其使用场景","children":[{"level":3,"title":"String 字符串","slug":"string-字符串","link":"#string-字符串","children":[]},{"level":3,"title":"List 列表","slug":"list-列表","link":"#list-列表","children":[]},{"level":3,"title":"压缩列表","slug":"压缩列表","link":"#压缩列表","children":[]},{"level":3,"title":"ListPack","slug":"listpack","link":"#listpack","children":[]},{"level":3,"title":"QuickList","slug":"quicklist","link":"#quicklist","children":[]},{"level":3,"title":"Hash 哈希","slug":"hash-哈希","link":"#hash-哈希","children":[]},{"level":3,"title":"Set 集合","slug":"set-集合","link":"#set-集合","children":[]},{"level":3,"title":"ZSet 有序集合","slug":"zset-有序集合","link":"#zset-有序集合","children":[]},{"level":3,"title":"跳表","slug":"跳表","link":"#跳表","children":[]}]},{"level":2,"title":"Redis 线程模型","slug":"redis-线程模型","link":"#redis-线程模型","children":[{"level":3,"title":"Redis 单线程模型","slug":"redis-单线程模型","link":"#redis-单线程模型","children":[]},{"level":3,"title":"Redis 监听大量客户端连接的做法","slug":"redis-监听大量客户端连接的做法","link":"#redis-监听大量客户端连接的做法","children":[]},{"level":3,"title":"Redis 的后台线程","slug":"redis-的后台线程","link":"#redis-的后台线程","children":[]},{"level":3,"title":"Redis 6 之前为什么使用单线程","slug":"redis-6-之前为什么使用单线程","link":"#redis-6-之前为什么使用单线程","children":[]},{"level":3,"title":"Redis 6 后为什么引入多线程","slug":"redis-6-后为什么引入多线程","link":"#redis-6-后为什么引入多线程","children":[]},{"level":3,"title":"为什么 Redis 单线程性能也这么高","slug":"为什么-redis-单线程性能也这么高","link":"#为什么-redis-单线程性能也这么高","children":[]}]},{"level":2,"title":"Redis 持久化","slug":"redis-持久化","link":"#redis-持久化","children":[{"level":3,"title":"Redis 提供三种持久化策略","slug":"redis-提供三种持久化策略","link":"#redis-提供三种持久化策略","children":[]}]}],"git":{"createdTime":1690461431000,"updatedTime":1690461431000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":11.06,"words":3318},"filePathRelative":"writings/Redis/Redis-interview.md","localizedDate":"2023年7月27日","autoDesc":true}');export{h as comp,c as data};
