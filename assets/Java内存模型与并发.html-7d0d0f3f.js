const e=JSON.parse('{"key":"v-a414611e","path":"/writings/JVM/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B9%B6%E5%8F%91.html","title":"Java 内存模型与并发","lang":"zh-CN","frontmatter":{"description":"Java 内存模型与并发 这一节我们结合 Java 内存模型来理解并发编程中的一些经典问题，为后续学习并发编程做铺垫 基础 并发编程模型的分类 在处理并发编程时，我们需要处理两个关键的问题 线程之间如何进行通信。线程之间通过哪种方式来进行交换信息 线程之间如何进行同步。用于控制不同线程之间操作发生相对顺序的机制 并发编程中常见有两种模型，分别用不同的方式解决了上述两个关键问题： 共享内存的并发编程模型 通信：线程之间共享程序的公共状态，线程之间通过「读-写」公共状态来隐式进行通信 同步：开发人员必须显式地控制某个方法或某段代码需要在线程之间互斥地执行 消息传递的并发编程模型 通信：线程之间通过发送消息来显式进行通信 同步：消息发送一定位于消息接收之前，这里存在了一个隐式的同步控制","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/JVM/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B9%B6%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Java 内存模型与并发"}],["meta",{"property":"og:description","content":"Java 内存模型与并发 这一节我们结合 Java 内存模型来理解并发编程中的一些经典问题，为后续学习并发编程做铺垫 基础 并发编程模型的分类 在处理并发编程时，我们需要处理两个关键的问题 线程之间如何进行通信。线程之间通过哪种方式来进行交换信息 线程之间如何进行同步。用于控制不同线程之间操作发生相对顺序的机制 并发编程中常见有两种模型，分别用不同的方式解决了上述两个关键问题： 共享内存的并发编程模型 通信：线程之间共享程序的公共状态，线程之间通过「读-写」公共状态来隐式进行通信 同步：开发人员必须显式地控制某个方法或某段代码需要在线程之间互斥地执行 消息传递的并发编程模型 通信：线程之间通过发送消息来显式进行通信 同步：消息发送一定位于消息接收之前，这里存在了一个隐式的同步控制"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 内存模型与并发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"并发编程模型的分类","slug":"并发编程模型的分类","link":"#并发编程模型的分类","children":[]},{"level":3,"title":"Java 内存模型","slug":"java-内存模型","link":"#java-内存模型","children":[]}]},{"level":2,"title":"重排序","slug":"重排序","link":"#重排序","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"重排序可能引发的问题","slug":"重排序可能引发的问题","link":"#重排序可能引发的问题","children":[]},{"level":3,"title":"happens-before","slug":"happens-before","link":"#happens-before","children":[]},{"level":3,"title":"内存屏障类型","slug":"内存屏障类型","link":"#内存屏障类型","children":[]}]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.83,"words":1449},"filePathRelative":"writings/JVM/Java内存模型与并发.md","localizedDate":"2023年2月28日","excerpt":"<h1> Java 内存模型与并发</h1>\\n<blockquote>\\n<p>这一节我们结合 Java 内存模型来理解并发编程中的一些经典问题，为后续学习并发编程做铺垫</p>\\n</blockquote>\\n<h2> 基础</h2>\\n<h3> 并发编程模型的分类</h3>\\n<p>在处理并发编程时，我们需要处理两个关键的问题</p>\\n<ul>\\n<li>线程之间如何进行通信。线程之间通过哪种方式来进行交换信息</li>\\n<li>线程之间如何进行同步。用于控制不同线程之间操作发生相对顺序的机制</li>\\n</ul>\\n<p>并发编程中常见有两种模型，分别用不同的方式解决了上述两个关键问题：</p>\\n<ul>\\n<li>\\n<p><strong>共享内存</strong>的并发编程模型</p>\\n<ul>\\n<li>通信：线程之间共享程序的公共状态，线程之间通过「读-写」公共状态来隐式进行通信</li>\\n<li>同步：开发人员必须<strong>显式地控制</strong>某个方法或某段代码需要在线程之间互斥地执行</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>消息传递</strong>的并发编程模型</p>\\n<ul>\\n<li>通信：线程之间通过发送消息来显式进行通信</li>\\n<li>同步：消息发送一定位于消息接收之前，这里存在了一个隐式的同步控制</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
