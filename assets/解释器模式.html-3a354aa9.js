const e=JSON.parse('{"key":"v-6d98a6e7","path":"/writings/pattern/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"解释器模式","lang":"zh-CN","frontmatter":{"description":"解释器模式 定义：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器用于解释语言中的句子 特征：为了解释一种语言而创建的解释器 优点：扩展性强，解释器模式中语法是由很多类表示的，当语法规则更改时只需要更改相应的非终结符表达式即可；当语法扩展时只需要添加相应的非终结符类即可 缺点： 当语法规则比较复杂时，会增加大量的解释类，增加系统维护难度 解释器模式采用递归调用方式，当完整的表达式层级较深时，解释效率下降，出错调试困难 示例","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"解释器模式"}],["meta",{"property":"og:description","content":"解释器模式 定义：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器用于解释语言中的句子 特征：为了解释一种语言而创建的解释器 优点：扩展性强，解释器模式中语法是由很多类表示的，当语法规则更改时只需要更改相应的非终结符表达式即可；当语法扩展时只需要添加相应的非终结符类即可 缺点： 当语法规则比较复杂时，会增加大量的解释类，增加系统维护难度 解释器模式采用递归调用方式，当完整的表达式层级较深时，解释效率下降，出错调试困难 示例"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解释器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"解释器模式在源码中的体现","slug":"解释器模式在源码中的体现","link":"#解释器模式在源码中的体现","children":[{"level":3,"title":"JDK","slug":"jdk","link":"#jdk","children":[]},{"level":3,"title":"Spring","slug":"spring","link":"#spring","children":[]}]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":1.09,"words":328},"filePathRelative":"writings/pattern/解释器模式.md","localizedDate":"2023年3月1日","excerpt":"<h1> 解释器模式</h1>\\n<p>定义：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器用于解释语言中的句子</p>\\n<p>特征：为了解释一种语言而创建的解释器</p>\\n<p>优点：扩展性强，解释器模式中语法是由很多类表示的，当语法规则更改时只需要更改相应的非终结符表达式即可；当语法扩展时只需要添加相应的非终结符类即可</p>\\n<p>缺点：</p>\\n<ol>\\n<li>当语法规则比较复杂时，会增加大量的解释类，增加系统维护难度</li>\\n<li>解释器模式采用递归调用方式，当完整的表达式层级较深时，解释效率下降，出错调试困难</li>\\n</ol>\\n<h2> 示例</h2>\\n","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
