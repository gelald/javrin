const n=JSON.parse('{"key":"v-7c80b44a","path":"/writings/MySQL/MySQL-paging-query.html","title":"MySQL 分页查询优化","lang":"zh-CN","frontmatter":{"title":"MySQL 分页查询优化","icon":"article","category":["数据库"],"tag":["MySQL","优化","分页查询"],"description":"MySQL 分页查询 在业务中，分页查询还是较为常用的，特别是数据量大时，分页查询能有效提高执行效率，也能降低网络传输的资源消耗 业务引入 现在有一张订单表，结构大致是这样 CREATE TABLE `order` ( `id` int NOT NULL AUTO_INCREMENT COMMENT \'主键\', `user_name` varchar(255) NOT NULL COMMENT \' 用户名\', `create_time` datetime DEFAULT NULL COMMENT \'发生时间\', `price` decimal(10,2) DEFAULT NULL COMMENT \'价格\', PRIMARY KEY (`id`), KEY `idx_user_name` (`user_name`) ) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/MySQL/MySQL-paging-query.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"MySQL 分页查询优化"}],["meta",{"property":"og:description","content":"MySQL 分页查询 在业务中，分页查询还是较为常用的，特别是数据量大时，分页查询能有效提高执行效率，也能降低网络传输的资源消耗 业务引入 现在有一张订单表，结构大致是这样 CREATE TABLE `order` ( `id` int NOT NULL AUTO_INCREMENT COMMENT \'主键\', `user_name` varchar(255) NOT NULL COMMENT \' 用户名\', `create_time` datetime DEFAULT NULL COMMENT \'发生时间\', `price` decimal(10,2) DEFAULT NULL COMMENT \'价格\', PRIMARY KEY (`id`), KEY `idx_user_name` (`user_name`) ) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"优化"}],["meta",{"property":"article:tag","content":"分页查询"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 分页查询优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"业务引入","slug":"业务引入","link":"#业务引入","children":[]},{"level":2,"title":"分页查询原理","slug":"分页查询原理","link":"#分页查询原理","children":[{"level":3,"title":"查看执行计划","slug":"查看执行计划","link":"#查看执行计划","children":[]}]},{"level":2,"title":"分页查询隐藏的问题","slug":"分页查询隐藏的问题","link":"#分页查询隐藏的问题","children":[]},{"level":2,"title":"分页查询优化","slug":"分页查询优化","link":"#分页查询优化","children":[{"level":3,"title":"B+ 树结构","slug":"b-树结构","link":"#b-树结构","children":[]},{"level":3,"title":"拆分子查询","slug":"拆分子查询","link":"#拆分子查询","children":[]},{"level":3,"title":"深度分页","slug":"深度分页","link":"#深度分页","children":[]}]},{"level":2,"title":"导出数据时分页查询","slug":"导出数据时分页查询","link":"#导出数据时分页查询","children":[]}],"git":{"createdTime":1667639767000,"updatedTime":1677655655000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":7.02,"words":2107},"filePathRelative":"writings/MySQL/MySQL-paging-query.md","localizedDate":"2022年11月5日","excerpt":"<h1> MySQL 分页查询</h1>\\n<blockquote>\\n<p>在业务中，分页查询还是较为常用的，特别是数据量大时，分页查询能有效提高执行效率，也能降低网络传输的资源消耗</p>\\n</blockquote>\\n<h2> 业务引入</h2>\\n<p>现在有一张订单表，结构大致是这样</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">TABLE</span> <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>order<span class=\\"token punctuation\\">`</span></span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>id<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">AUTO_INCREMENT</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\'主键\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>user_name<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">255</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\' 用户名\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>create_time<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">datetime</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\'发生时间\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>price<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">decimal</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">\'价格\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token keyword\\">PRIMARY</span> <span class=\\"token keyword\\">KEY</span> <span class=\\"token punctuation\\">(</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>id<span class=\\"token punctuation\\">`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token keyword\\">KEY</span> <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>idx_user_name<span class=\\"token punctuation\\">`</span></span> <span class=\\"token punctuation\\">(</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>user_name<span class=\\"token punctuation\\">`</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">ENGINE</span><span class=\\"token operator\\">=</span><span class=\\"token keyword\\">InnoDB</span> <span class=\\"token keyword\\">AUTO_INCREMENT</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CHARSET</span><span class=\\"token operator\\">=</span>utf8mb4 <span class=\\"token keyword\\">COLLATE</span><span class=\\"token operator\\">=</span>utf8mb4_0900_ai_ci<span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
