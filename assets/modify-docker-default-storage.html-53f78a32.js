import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as n}from"./app-f9042815.js";const d={},i=n(`<h1 id="修改-docker-默认存储路径" tabindex="-1"><a class="header-anchor" href="#修改-docker-默认存储路径" aria-hidden="true">#</a> 修改 Docker 默认存储路径</h1><h2 id="问题引入" tabindex="-1"><a class="header-anchor" href="#问题引入" aria-hidden="true">#</a> 问题引入</h2><p>今天在服务器(操作系统: CentOS)上创建新容器的时候看到容器创建失败，并提示磁盘空间不足。</p><p>输入查询磁盘空间命令后发现，<code>/</code> 目录只分配了50G空间，而 <code>/home</code> 目录却分配了198G空间。</p><p>而 Docker 默认的存储路径是 <code>/var/lib/docker</code> ，是在 <code>/</code> 目录下的，在不修改操作系统磁盘挂载的前提下，想要 Docker 能正常使用、创建容器，我们需要把 Docker 默认存储路径修改到 <code>/home</code> 目录下。</p><h2 id="修改方法一" tabindex="-1"><a class="header-anchor" href="#修改方法一" aria-hidden="true">#</a> 修改方法一</h2><p>直接修改 docker 的启动参数</p><ul><li><p>暂时停止 Docker 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>保险起见，再次确认 Docker 的存储路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> info <span class="token operator">|</span> <span class="token function">grep</span> Dir

Docker Root Dir: /var/lib/docker              <span class="token comment"># docker默认的存储路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>/home</code> 目录下新建存储目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>迁移原有数据到新目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /var/lib/docker/* /home/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改 docker.service 配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> /usr/lib/systemd/system/docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找到这一行</p><p><code>ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</code></p><p>修改如下</p><p><code>ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --graph /home/docker</code></p></li><li><p>使这份配置文件生效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动 Docker 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看是否修改成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> info <span class="token operator">|</span> <span class="token function">grep</span> Dir

Docker Root Dir: /home/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>如果 <code>Docker</code> 的版本是 <code>1.12</code> 或以上的，可以修改或新建 <code>daemon.json</code> 文件。修改后会立即生效，不需重启 <code>Docker</code> 服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改配置文件</span>
<span class="token function">vi</span> /etc/docker/daemon.json


<span class="token punctuation">{</span>
    <span class="token string">&quot;graph&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;/new-path/docker&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改方法二" tabindex="-1"><a class="header-anchor" href="#修改方法二" aria-hidden="true">#</a> 修改方法二</h2><p>不修改启动参数，创建目录的软链接，存放目录依旧是那个，但是实际存放目录已经被修改了</p><ul><li><p>我们知道在操作系统当中，默认情况下 <code>Docker</code> 容器的存放位置在 <code>/var/lib/docker</code> 目录下面，可以通过下面命令查看具体位置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> info <span class="token operator">|</span> <span class="token function">grep</span> Dir

Docker Root Dir: /var/lib/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解决默认存储容量不足的情况，最直接且最有效的方法就是挂载新的分区到该目录。但是在原有系统空间不变的情况下，所以采用软链接的方式，修改镜像和容器的存放路径达到同样的目的。</p></li><li><p>停掉 Docker 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>然后移动整个 <code>/var/lib/docker</code> 目录到空间不较大的目的路径。这时候启动 <code>Docker</code> 时发现存储目录依旧是 <code>/var/lib/docker</code> 目录，但是实际上是存储在数据盘 <code>/data/docker</code> 上了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 移动原有的内容</span>
<span class="token function">mv</span> /var/lib/docker /home/docker

<span class="token comment"># 创建链接</span>
<span class="token function">ln</span> <span class="token parameter variable">-sf</span> /home/docker /var/lib/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>接下来 Docker 服务运行过程中的镜像、容器全都存储到空间更大的 <code>/home</code> 目录下了，又可以愉快地创建容器了😉</p><p>参考链接：https://huaweicloud.csdn.net/6331127bd3efff3090b513db.html</p>`,15),c=[i];function o(r,l){return a(),s("div",null,c)}const u=e(d,[["render",o],["__file","modify-docker-default-storage.html.vue"]]);export{u as default};
