const e=JSON.parse('{"key":"v-54099d6e","path":"/writings/SpringSecurity/SpringSecurity.html","title":"SpringSecurity 学习","lang":"zh-CN","frontmatter":{"title":"SpringSecurity 学习","icon":"article","order":1,"category":["干货","SpringSecurity"],"tag":["SpringSecurity"],"description":"Spring Security 概念 认证（Authentication）：验证某个用户是否是在系统中已注册的合法用户 授权（Authorization）：授予某个用户具有哪些权限，一般在认证之后进行。实现授权的方式有：Cookie、Session、Token、OAuth Cookie和Session的区别 从安全性看，Session存储在服务端，Cookie存储在客户端，所以Session比Cookie安全 从存储的内容看，Session可以存储任意数据类型，Cookie只支持存字符串数据，如果想要设置其他类型数据则需要转换成字符串 从有效期看，Cookie可设置为长时间保存，Session一般失效的时间较短，客户端关闭或者Session超时都会使其失效 从存储大小看，单个Cookie保存的数据不能超过4KB，Session没有存储大小限制，但是如果存储太多数据会占用较多服务器资源","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/SpringSecurity/SpringSecurity.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"SpringSecurity 学习"}],["meta",{"property":"og:description","content":"Spring Security 概念 认证（Authentication）：验证某个用户是否是在系统中已注册的合法用户 授权（Authorization）：授予某个用户具有哪些权限，一般在认证之后进行。实现授权的方式有：Cookie、Session、Token、OAuth Cookie和Session的区别 从安全性看，Session存储在服务端，Cookie存储在客户端，所以Session比Cookie安全 从存储的内容看，Session可以存储任意数据类型，Cookie只支持存字符串数据，如果想要设置其他类型数据则需要转换成字符串 从有效期看，Cookie可设置为长时间保存，Session一般失效的时间较短，客户端关闭或者Session超时都会使其失效 从存储大小看，单个Cookie保存的数据不能超过4KB，Session没有存储大小限制，但是如果存储太多数据会占用较多服务器资源"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-09T04:24:19.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"SpringSecurity"}],["meta",{"property":"article:modified_time","content":"2022-11-09T04:24:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringSecurity 学习\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-09T04:24:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"Cookie和Session的区别","slug":"cookie和session的区别","link":"#cookie和session的区别","children":[]}]},{"level":2,"title":"安全架构的演进","slug":"安全架构的演进","link":"#安全架构的演进","children":[{"level":3,"title":"单块阶段","slug":"单块阶段","link":"#单块阶段","children":[]},{"level":3,"title":"粘性会话阶段(Sticky Session)","slug":"粘性会话阶段-sticky-session","link":"#粘性会话阶段-sticky-session","children":[]},{"level":3,"title":"集中会话阶段(Centralized Session)","slug":"集中会话阶段-centralized-session","link":"#集中会话阶段-centralized-session","children":[]},{"level":3,"title":"微服务阶段-Auth Service+Token","slug":"微服务阶段-auth-service-token","link":"#微服务阶段-auth-service-token","children":[]},{"level":3,"title":"微服务阶段-Auth Service+网关+Token","slug":"微服务阶段-auth-service-网关-token","link":"#微服务阶段-auth-service-网关-token","children":[]},{"level":3,"title":"微服务阶段-Auth Service+网关+JWT","slug":"微服务阶段-auth-service-网关-jwt","link":"#微服务阶段-auth-service-网关-jwt","children":[]}]},{"level":2,"title":"Spring Security基本使用","slug":"spring-security基本使用","link":"#spring-security基本使用","children":[{"level":3,"title":"开启SpringSecurity","slug":"开启springsecurity","link":"#开启springsecurity","children":[]},{"level":3,"title":"角色-资源访问控制","slug":"角色-资源访问控制","link":"#角色-资源访问控制","children":[]},{"level":3,"title":"URL拦截匹配规则","slug":"url拦截匹配规则","link":"#url拦截匹配规则","children":[]}]},{"level":2,"title":"Spring Security核心组件","slug":"spring-security核心组件","link":"#spring-security核心组件","children":[{"level":3,"title":"SecurityContext","slug":"securitycontext","link":"#securitycontext","children":[]},{"level":3,"title":"SecurityContextHolder","slug":"securitycontextholder","link":"#securitycontextholder","children":[]},{"level":3,"title":"SecurityContextPersistenceFilter","slug":"securitycontextpersistencefilter","link":"#securitycontextpersistencefilter","children":[]},{"level":3,"title":"Authentication","slug":"authentication","link":"#authentication","children":[]},{"level":3,"title":"UserDetails","slug":"userdetails","link":"#userdetails","children":[]},{"level":3,"title":"UserDetailsService","slug":"userdetailsservice","link":"#userdetailsservice","children":[]},{"level":3,"title":"AuthenticationManager","slug":"authenticationmanager","link":"#authenticationmanager","children":[]},{"level":3,"title":"PasswordEncoder","slug":"passwordencoder","link":"#passwordencoder","children":[]}]}],"git":{"createdTime":null,"updatedTime":1667967859000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":2},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":14.01,"words":4204},"filePathRelative":"writings/SpringSecurity/SpringSecurity.md","excerpt":"<h1> Spring Security</h1>\\n<h2> 概念</h2>\\n<p>认证（Authentication）：验证某个用户是否是在系统中已注册的合法用户</p>\\n<p>授权（Authorization）：授予某个用户具有哪些权限，一般在认证之后进行。实现授权的方式有：Cookie、Session、Token、OAuth</p>\\n<h3> Cookie和Session的区别</h3>\\n<ol>\\n<li>从安全性看，Session存储在服务端，Cookie存储在客户端，所以Session比Cookie安全</li>\\n<li>从存储的内容看，Session可以存储任意数据类型，Cookie只支持存字符串数据，如果想要设置其他类型数据则需要转换成字符串</li>\\n<li>从有效期看，Cookie可设置为长时间保存，Session一般失效的时间较短，客户端关闭或者Session超时都会使其失效</li>\\n<li>从存储大小看，单个Cookie保存的数据不能超过4KB，Session没有存储大小限制，但是如果存储太多数据会占用较多服务器资源</li>\\n</ol>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
