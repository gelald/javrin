import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as r,a as o}from"./app-BLfEJaid.js";const n={},a=o(`<h1 id="rocketmq-learning" tabindex="-1"><a class="header-anchor" href="#rocketmq-learning"><span>RocketMQ-Learning</span></a></h1><blockquote><p>这个项目使用两种依赖方式整合了 RocketMQ 常见的使用方式</p><p>适合入门学习的小伙伴，也可以作为平时开发要使用 RocketMQ 时参考的原型</p></blockquote><p>项目 Github 传送门 👉 : <a href="https://github.com/gelald/rocketmq-learning" target="_blank" rel="noopener noreferrer">rocketmq-learning</a>，如果帮到你了，麻烦给我一个 star 噢 😊</p><h2 id="模块说明" tabindex="-1"><a class="header-anchor" href="#模块说明"><span>模块说明</span></a></h2><h3 id="rocketmq-learning-1" tabindex="-1"><a class="header-anchor" href="#rocketmq-learning-1"><span>rocketmq-learning</span></a></h3><p>这个是所有模块的父工程，主要是统一子工程使用的依赖版本，统一打包配置</p><p>本项目使用的主要依赖的版本:</p><table><thead><tr><th>🔧依赖</th><th>📖版本</th></tr></thead><tbody><tr><td>spring-boot</td><td>2.6.1</td></tr><tr><td>rocketmq-client</td><td>4.9.3</td></tr><tr><td>rocketmq-spring-boot-starter</td><td>2.2.2</td></tr></tbody></table><h3 id="rocketmq-common" tabindex="-1"><a class="header-anchor" href="#rocketmq-common"><span>rocketmq-common</span></a></h3><p>这个模块负责了一些基础相关的工作，能让其他模块更专注 RocketMQ 的使用：</p><ul><li>统筹共用的常量</li><li>统一异常处理</li><li>统一包装响应</li><li>knife4j 统一配置</li></ul><h3 id="rocketmq-client" tabindex="-1"><a class="header-anchor" href="#rocketmq-client"><span>rocketmq-client</span></a></h3><p>这个模块展示了 SpringBoot 集成 rocketmq-client 的使用方式</p><p>其中 <code>rocketmq-consumer-client</code> 是消费者模块，<code>rocketmq-producer-client</code> 是生产者模块</p><h3 id="rocketmq-starter" tabindex="-1"><a class="header-anchor" href="#rocketmq-starter"><span>rocketmq-starter</span></a></h3><p>这个模块展示了 SpringBoot 集成 rocketmq-spring-boot-starter 的使用方式</p><p>其中 <code>rocketmq-consumer-starter</code> 是消费者模块，<code>rocketmq-producer-starter</code> 是生产者模块</p><h2 id="部署说明" tabindex="-1"><a class="header-anchor" href="#部署说明"><span>部署说明</span></a></h2><h3 id="rocketmq-部署方式" tabindex="-1"><a class="header-anchor" href="#rocketmq-部署方式"><span>RocketMQ 部署方式</span></a></h3><p>RocketMQ 部署方式官网中提供了源码部署方式，我们这里使用 docker-compose 的部署方式</p><p>在 rocketmq-learning 下有一个目录 docker，这个目录下包含了：</p><ul><li>docker-compose.yaml：docker compose 配置文件，里面已经编辑好 name-server、broker、dashboard 三个容器启动的相关配置</li><li>rocketmq-broker：broker 容器中挂载的目录，其中 conf 目录下是 broker 的启动配置，启动时需要修改其中的 brokerIP1 为本机 IP 地址</li><li>rocketmq-dashboard：dashboard 容器中挂载的目录</li><li>rocketmq-name-server：name-server 容器中挂载的目录</li></ul><p>启动方式：在 docker-compose.yaml 文件同目录下打开终端，输入命令 <code>docker-compose up -d</code> 启动</p><p>验证是否启动成功：输入命令 <code>docker-compose ps</code> 可以看到 name-server、broker、dashboard 三个容器</p><p>其中 broker 容器有可能会 <code>exited with code 253</code>，解决方法可以看这篇文章：<a href="https://blog.csdn.net/weixin_43955543/article/details/124047740" target="_blank" rel="noopener noreferrer">Docker 搭建部署 RocketMQ 遇到broker 253问题</a></p><h3 id="项目部署方式" tabindex="-1"><a class="header-anchor" href="#项目部署方式"><span>项目部署方式</span></a></h3><p>无论是使用哪一种集成方式，启动前都要在生产者消费者模块中 resource 目录下的 application.yml 文件中修改 name-server 地址</p><p>如需启动其他生产者/消费者，需要在配置文件中手动设置为 true，具体在下面详细说明。</p><p>因为生产者项目中都集成了knife4j文档组件，所以正常启动的标志是能打开文档页面👇。</p><table><thead><tr><th>rocketmq-client</th><th>rocketmq-starter</th></tr></thead><tbody><tr><td><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220904181131.png" alt=""></td><td><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220904181402.png" alt=""></td></tr></tbody></table><h2 id="模块详细说明" tabindex="-1"><a class="header-anchor" href="#模块详细说明"><span>模块详细说明</span></a></h2><p>这里介绍两个模块的使用方式以及一些特别的设计</p><h3 id="rocketmq-client-1" tabindex="-1"><a class="header-anchor" href="#rocketmq-client-1"><span>rocketmq-client</span></a></h3><p>可以配合集成 <code>rocketmq-client</code> 的落地实现讲解来一起学习：<a href="https://gelald.github.io/javrin/writings/message-queue/RocketMQ-operation-client.html" target="_blank" rel="noopener noreferrer">RocketMQ 操作落地 (rocketmq-client 方式)</a></p><h4 id="rocketmq-consumer-client" tabindex="-1"><a class="header-anchor" href="#rocketmq-consumer-client"><span>rocketmq-consumer-client</span></a></h4><p>定义消费者的配置类都需要继承基类 <code>RocketMQBaseConsumerConfiguration</code>，并且在定义时都需要把定义出来的生产者加入到基类中管理消费者的 <code>mqConsumers</code> 集合中。这样做的目的是基类实现了 <code>DisposableBean</code> 这个后置处理器，在销毁 Bean 的时候先把集合中所有的生产者都逐一销毁，以便释放资源。</p><p>消费者与消息监听器的定义分离，方便独立维护，每一个消费者定义时都要传入特定的一个消息监听器，传入的监听器变量名为监听器类名<strong>首字母小写</strong>，这样 Spring 可以根据名字寻找具体的 Bean 注入。</p><p>例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean</span></span>
<span class="line"><span>public DefaultMQPushConsumer defaultMQPushConsumer(MessageListenerConcurrently defaultListener) throws MQClientException {</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了默认的消费者，其他记录在 <code>RocketMQConsumerProperties.ConsumerSwitch</code> 类型的消费者支持开关配置，开关配置是为了不启动所有的消费者以便节省资源，当然全部设置为 <code>true</code> 也是能正常启动的。</p><h4 id="rocketmq-producer-client" tabindex="-1"><a class="header-anchor" href="#rocketmq-producer-client"><span>rocketmq-producer-client</span></a></h4><p>与消费者一致，定义生产者的配置类也需要继承基类 <code>RocketMQBaseProducerConfiguration</code>，并且在定义时也需要把生产者加入 <code>mqProducers</code> 集合中。</p><p>除了默认的生产者，顺序消息生产者和事务消息生产者支持开关配置，配置项可以参考 <code>RocketMQProducerProperties.ProducerSwitch</code>，全部设置为 <code>true</code> 也是可以正常启动的。</p><p>为了方便大家学习调试，本项目集成了 knife4j 文档组件，直接打开 localhost:9091/doc.html 就能进行调试了，正常启动后的界面：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220905161550.png" alt=""></p><h3 id="rocketmq-starter-1" tabindex="-1"><a class="header-anchor" href="#rocketmq-starter-1"><span>rocketmq-starter</span></a></h3><p>可以配合集成 <code>rocketmq-spring-boot-starter</code> 的落地实现讲解来一起学习：<a href="https://gelald.github.io/javrin/writings/message-queue/RocketMQ-operation-starter.html" target="_blank" rel="noopener noreferrer">RocketMQ 操作落地 (rocketmq-starter 方式)</a></p><h4 id="rocketmq-consumer-starter" tabindex="-1"><a class="header-anchor" href="#rocketmq-consumer-starter"><span>rocketmq-consumer-starter</span></a></h4><p>使用这种集成方式定义消费者变得非常简单，直接使用注解 <code>@RocketMQMessageListener</code>，另外如果同一个组要定义多个消费者实例，那么需要实现接口 <code>RocketMQPushConsumerLifecycleListener</code> 来修改实例名。</p><p>除了默认的消费者，其他记录在 <code>RocketMQConsumerProperties.ConsumerSwitch</code> 类型的消费者支持开关配置，开关配置是为了不启动所有的消费者以便节省资源，当然全部设置为 <code>true</code> 也是能正常启动的。</p><h4 id="rocketmq-producer-starter" tabindex="-1"><a class="header-anchor" href="#rocketmq-producer-starter"><span>rocketmq-producer-starter</span></a></h4><p>使用这种集成方式后，直接使用框架中定义好的生产者就可以了，非常方便。</p><p>其中 <code>LocalTransactionListener</code> 是生产者事务消息监听器，负责执行本地事务以及提供事务回查。</p><p>为了方便大家学习调试，本项目集成了 knife4j 文档组件，直接打开 localhost:9093/doc.html 就能进行调试了，正常启动后的界面：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220905165851.png" alt=""></p>`,55),c=[a];function i(s,l){return r(),t("div",null,c)}const m=e(n,[["render",i],["__file","RocketMQ-learning.html.vue"]]),h=JSON.parse('{"path":"/learning/RocketMQ-learning.html","title":"RocketMQ-Learning 项目介绍","lang":"zh-CN","frontmatter":{"title":"RocketMQ-Learning 项目介绍","icon":"article","category":["干货","coding","消息队列"],"tag":["基础","RocketMQ"],"description":"RocketMQ-Learning 这个项目使用两种依赖方式整合了 RocketMQ 常见的使用方式 适合入门学习的小伙伴，也可以作为平时开发要使用 RocketMQ 时参考的原型 项目 Github 传送门 👉 : rocketmq-learning，如果帮到你了，麻烦给我一个 star 噢 😊 模块说明 rocketmq-learning 这个...","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/learning/RocketMQ-learning.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"RocketMQ-Learning 项目介绍"}],["meta",{"property":"og:description","content":"RocketMQ-Learning 这个项目使用两种依赖方式整合了 RocketMQ 常见的使用方式 适合入门学习的小伙伴，也可以作为平时开发要使用 RocketMQ 时参考的原型 项目 Github 传送门 👉 : rocketmq-learning，如果帮到你了，麻烦给我一个 star 噢 😊 模块说明 rocketmq-learning 这个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220904181131.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-05T09:09:50.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:tag","content":"RocketMQ"}],["meta",{"property":"article:modified_time","content":"2022-09-05T09:09:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ-Learning 项目介绍\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220904181131.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220904181402.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220905161550.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220905165851.png\\"],\\"dateModified\\":\\"2022-09-05T09:09:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"模块说明","slug":"模块说明","link":"#模块说明","children":[{"level":3,"title":"rocketmq-learning","slug":"rocketmq-learning-1","link":"#rocketmq-learning-1","children":[]},{"level":3,"title":"rocketmq-common","slug":"rocketmq-common","link":"#rocketmq-common","children":[]},{"level":3,"title":"rocketmq-client","slug":"rocketmq-client","link":"#rocketmq-client","children":[]},{"level":3,"title":"rocketmq-starter","slug":"rocketmq-starter","link":"#rocketmq-starter","children":[]}]},{"level":2,"title":"部署说明","slug":"部署说明","link":"#部署说明","children":[{"level":3,"title":"RocketMQ 部署方式","slug":"rocketmq-部署方式","link":"#rocketmq-部署方式","children":[]},{"level":3,"title":"项目部署方式","slug":"项目部署方式","link":"#项目部署方式","children":[]}]},{"level":2,"title":"模块详细说明","slug":"模块详细说明","link":"#模块详细说明","children":[{"level":3,"title":"rocketmq-client","slug":"rocketmq-client-1","link":"#rocketmq-client-1","children":[]},{"level":3,"title":"rocketmq-starter","slug":"rocketmq-starter-1","link":"#rocketmq-starter-1","children":[]}]}],"git":{"createdTime":1662368990000,"updatedTime":1662368990000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.74,"words":1422},"filePathRelative":"learning/RocketMQ-learning.md","localizedDate":"2022年9月5日","autoDesc":true}');export{m as comp,h as data};
