const e=JSON.parse('{"key":"v-f7ad2856","path":"/writings/SpringSecurity/JWT.html","title":"JWT 学习","lang":"zh-CN","frontmatter":{"title":"JWT 学习","icon":"article","order":4,"category":["干货","SpringSecurity"],"tag":["JWT"],"description":"JWT 随着移动互联网的兴起，传统基于 Session+Cookie 的Web网站认证方式转变成了基于 OAuth2 等开放授权协议的单点登录模式（SSO，Single Sign On），相应的基于服务器 Session+Cookie 的 Auth 手段也转变成 JWT(Json Web Token) 为代表Token Auth机制。 JWT是一个非常轻巧的规范，这个规范允许我们使用 JWT 在两个组织之间传递安全可靠的信息。Session+Cookie的方式把认证信息放在了服务端，JWT把认证信息放在了客户端，减轻了服务端的内存压力","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/SpringSecurity/JWT.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"JWT 学习"}],["meta",{"property":"og:description","content":"JWT 随着移动互联网的兴起，传统基于 Session+Cookie 的Web网站认证方式转变成了基于 OAuth2 等开放授权协议的单点登录模式（SSO，Single Sign On），相应的基于服务器 Session+Cookie 的 Auth 手段也转变成 JWT(Json Web Token) 为代表Token Auth机制。 JWT是一个非常轻巧的规范，这个规范允许我们使用 JWT 在两个组织之间传递安全可靠的信息。Session+Cookie的方式把认证信息放在了服务端，JWT把认证信息放在了客户端，减轻了服务端的内存压力"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-09T04:24:19.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"JWT"}],["meta",{"property":"article:modified_time","content":"2022-11-09T04:24:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JWT 学习\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-09T04:24:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"JWS","slug":"jws","link":"#jws","children":[{"level":3,"title":"Header 头部","slug":"header-头部","link":"#header-头部","children":[]},{"level":3,"title":"Payload 负载","slug":"payload-负载","link":"#payload-负载","children":[]},{"level":3,"title":"Signature 签名","slug":"signature-签名","link":"#signature-签名","children":[]}]},{"level":2,"title":"JWE","slug":"jwe","link":"#jwe","children":[{"level":3,"title":"生成步骤","slug":"生成步骤","link":"#生成步骤","children":[]}]},{"level":2,"title":"JWT流程","slug":"jwt流程","link":"#jwt流程","children":[{"level":3,"title":"HMAC流程","slug":"hmac流程","link":"#hmac流程","children":[]},{"level":3,"title":"RSA流程","slug":"rsa流程","link":"#rsa流程","children":[]}]}],"git":{"createdTime":null,"updatedTime":1667967859000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":3},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.02,"words":1207},"filePathRelative":"writings/SpringSecurity/JWT.md","excerpt":"<h1> JWT</h1>\\n<p>随着移动互联网的兴起，传统基于 <code>Session+Cookie</code> 的Web网站认证方式转变成了基于 <code>OAuth2</code> 等开放授权协议的单点登录模式（SSO，Single Sign On），相应的基于服务器 <code>Session+Cookie</code> 的 <code>Auth</code> 手段也转变成 <code>JWT(Json Web Token)</code> 为代表<code>Token Auth</code>机制。</p>\\n<p><code>JWT</code>是一个非常轻巧的规范，这个规范允许我们使用 <code>JWT</code> 在两个组织之间传递安全可靠的信息。<code>Session+Cookie</code>的方式把认证信息放在了服务端，<code>JWT</code>把认证信息放在了客户端，减轻了服务端的内存压力</p>","autoDesc":true}');export{e as data};
