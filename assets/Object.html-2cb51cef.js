import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-859571d0.js";const t={},p=e(`<h1 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h1><blockquote><p>Object 是 Java 所有类的最顶层的父类，它的地位不言而喻，有必要研究一番～</p></blockquote><p>这里先主要介绍一下 Object 一些经典的方法，关于它的其他研究，放在后面</p><h2 id="native" tabindex="-1"><a class="header-anchor" href="#native" aria-hidden="true">#</a> native</h2><p>开始学习 Object 的方法前，先了解一下 native 关键字</p><p>native 关键字用于修饰方法，native 意为原生的，那么原生的方法代表什么意思呢？</p><blockquote><p>其实被 native 修饰的方法含义就是交给我们的操作系统来实现这个方法，换言之在程序中这个方法是没有方法体的。</p></blockquote><p>native 方法一般都是出现在 Java 源码中，但其实我们可以自定义，不过我们一般不这么做，而且实现起来也有一定的门槛，作为了解即可。</p><h2 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals</h2><p>equals 方法是用于比较两个对象</p><p>默认是比较两个对象的地址指是否相同，和使用 == 比较两个对象作用是一样的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在很多类中都会对 equals 方法进行重写，为的实现比较两个对象中的内容是否一样，比较地址值再使用 == 来完成</p><p>Integer，equals 方法比较的是两个对象中底层的 int 值是否相等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>String，equals 方法是对对象中的字符数组进行逐一字符相等判断</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上在开发中，我们也会有重写 equals 方法的场景，那么重写 equals 方法，需要的是</p><ol><li>使用 <code>==</code> 来检查实参是否为对象的一个引用，如果是，返回 <code>false</code></li><li>使用 <code>isinstanceof</code> 来检查实参是否为正确的类型（和我同一个类型），如果不是，返回 <code>false</code></li><li>把参数进行强制类型转换，转换成同一个类型</li><li>检查实参中的域与当前对象中对应的域值是否匹配 <ol><li>除去 <code>float</code>、<code>double</code> 的基本数据类型，可以使用 <code>==</code> 进行比较</li><li><code>float</code> 类型使用 <code>Float.floatToIntBits</code> 转换成 <code>int</code> 类型的值，然后使用 <code>==</code> 操作符比较值</li><li><code>double</code> 类型使用 <code>Double.doubleToLongBits</code> 转换成 <code>long</code> 类型的值，然后使用 <code>==</code> 操作符比较值</li><li>引用类型，可以递归调用这个类型的 <code>equals</code> 方法</li></ol></li><li>完成以上步骤后，需要再考虑几个问题 <ol><li>是否有自反性</li><li>是否有传递性</li><li>是否有一致性</li></ol></li></ol><h2 id="hashcode" tabindex="-1"><a class="header-anchor" href="#hashcode" aria-hidden="true">#</a> hashCode</h2><p>返回这个对象的哈希值（由操作系统给出一个整数值）</p><p>一般重写 equals 方法的时候，都会重写 hashCode 方法，目的是为了保证两个等价的对象哈希值也相等。因为在某些场景下，我们希望如果两个对象从内容上看是相等的（是等价的），那么它们拥有同一个哈希值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>

<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如在 HashSet 中，内容同为 hello 的字符串保证只能被添加一次。</p><blockquote><p>可以这么理解：equals 为了让开发者知道两个对象等价；hashCode 为了让程序知道两个对象等价</p></blockquote><p>两个对象用 equals 方法判定后相等，则它们的 hashCode 一定相等。但 hashCode 相等的情况下，equals 方法判定不一定相等。因为有可能存在哈希冲突等问题。</p><h2 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString</h2><p>这个方法一般用于输出对象的信息</p><p>默认是 类名+@+hasCode的16进制值 的形式</p><h2 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone</h2><p>这个方法用于从原对象中拷贝一个新对象出来</p><p>值得注意的是：</p><ul><li>clone 方法在 Object 类中使用 <code>protected</code> 修饰，一个类如果不显式地重写 clone 方法，那么在其他类中就无法直接调用这个对象的 clone 方法</li><li>重写 clone 方法的时候需要实现 Cloneable 接口</li></ul><p>拷贝往往伴随着浅拷贝、深拷贝这个话题</p><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h3><p>拷贝对象的基本数据类型及其包装类型和 String 类型克隆后修改不影响原始对象</p><p>引用类型修改后会影响原始对象，存在被覆盖的风险，因为引用的是同一个对象</p><p>方式：通过调用父类的 clone 方法</p><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><p>拷贝对象中所有属性包括引用类型的属性都被彻底地复制了一份新的出来，修改后都不影响原始对象</p><p>方式：通过转成字节流后再转换成对象</p>`,41),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Object.html.vue"]]);export{d as default};
