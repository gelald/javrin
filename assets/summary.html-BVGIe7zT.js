import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as s,o as n}from"./app-BH1OTr4j.js";const r={};function h(p,a){return n(),t("div",null,[...a[0]||(a[0]=[s('<h1 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h1><blockquote><p>集合是我们日常开发中最常用的对象，集合是可以容纳 Java 对象的对象，便利、简单是它最大的优点</p></blockquote><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>当我们刚入门学习 Java 时，第一个接触的数据结构应该是数组，数组是存放一组相同类型对象的容器，然而我们学习数组时可以发现，元素的存取都不是通过数组自己的 API 实现，而是通过索引进行访问。</p><p>由于数组使用起来不方便，且只能表示一种线性序列的结构，所以 Java 推出了集合这一类数据结构，极大地降低数据操作难度，还带来了双列结构的集合，而且可以使用面向对象的方式进行开发，可以说是一次技术的革新！</p><p>Java 中的集合主要包含两大类：Collection 和 Map，引用一下网上大神集合的架构图~</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220312194155.png" alt=""></p><h2 id="collection" tabindex="-1"><a class="header-anchor" href="#collection"><span>Collection</span></a></h2><blockquote><p>Collection 是单列集合，也就是说集合中的一个空间只存储一个对象，比较有代表性的实现有Set、List、Queue</p></blockquote><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h3><p>特点：集合中的元素是唯一的</p><h4 id="hashset" tabindex="-1"><a class="header-anchor" href="#hashset"><span>HashSet</span></a></h4><p>Set 的常用实现类，基于哈希表实现，支持快速查找，但不支持有序性操作。并且<strong>失去了元素的插入顺序信息</strong>，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p><h4 id="linkedhashset" tabindex="-1"><a class="header-anchor" href="#linkedhashset"><span>LinkedHashSet</span></a></h4><p>除了具有 HashSet 的查找效率，并且内部<strong>使用双向链表维护元素的插入顺序</strong>。</p><h4 id="treeset" tabindex="-1"><a class="header-anchor" href="#treeset"><span>TreeSet</span></a></h4><p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h3><p>有索引、有顺序的集合，允许存储重复的元素</p><h4 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h4><p>基于数组及动态扩容的机制实现，允许随机访问。</p><h4 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist"><span>LinkedList</span></a></h4><p>基于双向链表实现，只能顺序访问，但可以方便地在集合中间增删元素。LinkedList 可以用作栈、队列的具体实现。</p><h4 id="vector" tabindex="-1"><a class="header-anchor" href="#vector"><span>Vector</span></a></h4><p>与 ArrayList 原理类似，但是是线程安全的。</p><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue"><span>Queue</span></a></h3><p>Queue 接口定义了队列数据结构，元素是有序的(按插入顺序)，先进先出</p><h4 id="priorityqueue" tabindex="-1"><a class="header-anchor" href="#priorityqueue"><span>PriorityQueue</span></a></h4><p>优先队列，底层使用数组实现了堆的结构。和普通的队列的 FIFO 特性不同，优先队列内部维护着一个堆，每次取数据的时候都从堆顶拿数据（堆顶的优先级最高）。每次集合中有数据添加或删除的时候都会对堆进行调整。</p><h4 id="deque" tabindex="-1"><a class="header-anchor" href="#deque"><span>Deque</span></a></h4><p>Deque (Double-ended queue) 是一个继承了 Queue 的子接口，可以创建双向队列，灵活性更强，可以前向或后向迭代，在队头队尾均可插入或删除元素。它的两个主要实现类是 ArrayDeque 和 LinkedList。</p><h5 id="arraydeque" tabindex="-1"><a class="header-anchor" href="#arraydeque"><span>ArrayDeque</span></a></h5><p>实现了 DeQueue 接口，双向队列，底层是用循环数组实现。虽然 Java 有提供栈的数据结构，但是开发中一般使用 ArrayDeque 进行栈功能的实现，更高效。</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><blockquote><p>Map 是双列集合，集合中一个空间存储着一个键值对(两个对象)，比较有代表性的实现有HashMap</p></blockquote><h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap"><span>HashMap</span></a></h3><p>基于一个哈希表来实现键值对的存储，但是元素是无序的。</p><h3 id="linkedhashmap" tabindex="-1"><a class="header-anchor" href="#linkedhashmap"><span>LinkedHashMap</span></a></h3><p>在 HashMap 的基础上，使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。</p><h3 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable"><span>HashTable</span></a></h3><p>和 HashMap 的功能类似，但是是线程安全的。不过现在已经不推荐使用它了，因为它里面大部分方法都是使用了 <code>synchronized</code> 修饰，性能不高。推荐使用 ConcurrentHashMap 来支持线程安全，因为内部使用了分段锁，性能更高。</p><h3 id="treemap" tabindex="-1"><a class="header-anchor" href="#treemap"><span>TreeMap</span></a></h3><p>基于红黑树实现键值对的存储。</p>',43)])])}const c=e(r,[["render",h]]),d=JSON.parse('{"path":"/writings/Java-collection/summary.html","title":"Java 集合总览","lang":"zh-CN","frontmatter":{"title":"Java 集合总览","icon":"article","category":["Java集合"],"description":"集合 集合是我们日常开发中最常用的对象，集合是可以容纳 Java 对象的对象，便利、简单是它最大的优点 概念 当我们刚入门学习 Java 时，第一个接触的数据结构应该是数组，数组是存放一组相同类型对象的容器，然而我们学习数组时可以发现，元素的存取都不是通过数组自己的 API 实现，而是通过索引进行访问。 由于数组使用起来不方便，且只能表示一种线性序列的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 集合总览\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220312194155.png\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"],["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Java-collection/summary.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Java 集合总览"}],["meta",{"property":"og:description","content":"集合 集合是我们日常开发中最常用的对象，集合是可以容纳 Java 对象的对象，便利、简单是它最大的优点 概念 当我们刚入门学习 Java 时，第一个接触的数据结构应该是数组，数组是存放一组相同类型对象的容器，然而我们学习数组时可以发现，元素的存取都不是通过数组自己的 API 实现，而是通过索引进行访问。 由于数组使用起来不方便，且只能表示一种线性序列的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220312194155.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}]]},"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","username":"gelald","email":"yb.ng@foxmail.com","commits":1,"url":"https://github.com/gelald"}]},"readingTime":{"minutes":3.3,"words":991},"filePathRelative":"writings/Java-collection/summary.md","autoDesc":true}');export{c as comp,d as data};
