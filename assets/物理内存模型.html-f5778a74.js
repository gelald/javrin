const e=JSON.parse('{"key":"v-68c3a0ca","path":"/writings/JVM/%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html","title":"Java物理内存模型","lang":"zh-CN","frontmatter":{"description":"Java物理内存模型 本文从堆栈角度引入 JMM，然后介绍 JMM 和物理内存之间的关系 JMM 引入 在学习 JMM 之前，先简单回顾一下 JVM 运行时内存结构 JVM 堆栈内容 Heap （堆）包含了程序中创建的所有对象。无论是创建对象并将其分配给局部变量，还是创建为另一个对象的成员变量，该对象仍然存储在堆上，其次对象上的成员变量，无论是基本类型还是引用类型也是存储在堆上。静态类变量也与类定义一起存储在堆上。 Thread Stack（线程栈）包含了每个方法的所有局部变量。基本类型的局部变量完全存储在线程栈中，一个线程可以将一个基本类型变量的副本传递给另一个线程，但它不能共享原始局部变量本身。引用类型的局部变量，引用存储在线程栈中，指向的对象存储在堆上。","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/JVM/%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Java物理内存模型"}],["meta",{"property":"og:description","content":"Java物理内存模型 本文从堆栈角度引入 JMM，然后介绍 JMM 和物理内存之间的关系 JMM 引入 在学习 JMM 之前，先简单回顾一下 JVM 运行时内存结构 JVM 堆栈内容 Heap （堆）包含了程序中创建的所有对象。无论是创建对象并将其分配给局部变量，还是创建为另一个对象的成员变量，该对象仍然存储在堆上，其次对象上的成员变量，无论是基本类型还是引用类型也是存储在堆上。静态类变量也与类定义一起存储在堆上。 Thread Stack（线程栈）包含了每个方法的所有局部变量。基本类型的局部变量完全存储在线程栈中，一个线程可以将一个基本类型变量的副本传递给另一个线程，但它不能共享原始局部变量本身。引用类型的局部变量，引用存储在线程栈中，指向的对象存储在堆上。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java物理内存模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"JMM 引入","slug":"jmm-引入","link":"#jmm-引入","children":[{"level":3,"title":"JVM 堆栈内容","slug":"jvm-堆栈内容","link":"#jvm-堆栈内容","children":[]},{"level":3,"title":"Java 内存模型","slug":"java-内存模型","link":"#java-内存模型","children":[]}]},{"level":2,"title":"JMM 与硬件内存结构关系","slug":"jmm-与硬件内存结构关系","link":"#jmm-与硬件内存结构关系","children":[{"level":3,"title":"JMM 与硬件内存连接","slug":"jmm-与硬件内存连接","link":"#jmm-与硬件内存连接","children":[]},{"level":3,"title":"对象共享后的可见性","slug":"对象共享后的可见性","link":"#对象共享后的可见性","children":[]},{"level":3,"title":"竞态条件","slug":"竞态条件","link":"#竞态条件","children":[]}]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.71,"words":1412},"filePathRelative":"writings/JVM/物理内存模型.md","localizedDate":"2023年2月28日","excerpt":"<h1> Java物理内存模型</h1>\\n<blockquote>\\n<p>本文从堆栈角度引入 JMM，然后介绍 JMM 和物理内存之间的关系</p>\\n</blockquote>\\n<h2> JMM 引入</h2>\\n<p>在学习 JMM 之前，先简单回顾一下 JVM 运行时内存结构</p>\\n<h3> JVM 堆栈内容</h3>\\n<p><img src=\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220406100824.png\\" alt=\\"\\"></p>\\n<ul>\\n<li>\\n<p>Heap （堆）包含了程序中创建的所有对象。无论是创建对象并将其分配给局部变量，还是创建为另一个对象的成员变量，该对象仍然存储在堆上，其次对象上的成员变量，无论是基本类型还是引用类型也是存储在堆上。静态类变量也与类定义一起存储在堆上。</p>\\n</li>\\n<li>\\n<p>Thread Stack（线程栈）包含了每个方法的所有局部变量。基本类型的局部变量完全存储在线程栈中，一个线程可以将一个基本类型变量的<strong>副本传递</strong>给另一个线程，但它不能共享原始局部变量本身。引用类型的局部变量，引用存储在线程栈中，指向的对象存储在堆上。</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
