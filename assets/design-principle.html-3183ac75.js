const e=JSON.parse('{"key":"v-28444ace","path":"/writings/pattern/design-principle.html","title":"设计原则","lang":"zh-CN","frontmatter":{"title":"设计原则","icon":"article","category":["设计模式"],"description":"设计原则 开闭原则 开闭原则（Open Close Principal）定义：一个软件实体如类、模块和方法应该对扩展开放，对修改关闭，以降低代码修改的风险。 核心思想：用抽象构建框架，用实现扩展细节 优点： 有利于构建一个稳定的系统 提高软件系统的可复用性及可维护性 依赖倒置原则 依赖倒置原则（Dependence Inversion Principle）定义：高层模块不应该依赖低层模块，两者都应该依赖其抽象","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/design-principle.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"设计原则"}],["meta",{"property":"og:description","content":"设计原则 开闭原则 开闭原则（Open Close Principal）定义：一个软件实体如类、模块和方法应该对扩展开放，对修改关闭，以降低代码修改的风险。 核心思想：用抽象构建框架，用实现扩展细节 优点： 有利于构建一个稳定的系统 提高软件系统的可复用性及可维护性 依赖倒置原则 依赖倒置原则（Dependence Inversion Principle）定义：高层模块不应该依赖低层模块，两者都应该依赖其抽象"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"开闭原则","slug":"开闭原则","link":"#开闭原则","children":[]},{"level":2,"title":"依赖倒置原则","slug":"依赖倒置原则","link":"#依赖倒置原则","children":[]},{"level":2,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":2,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[{"level":3,"title":"单一职责原则与接口隔离原则对比","slug":"单一职责原则与接口隔离原则对比","link":"#单一职责原则与接口隔离原则对比","children":[]}]},{"level":2,"title":"迪米特法则","slug":"迪米特法则","link":"#迪米特法则","children":[]},{"level":2,"title":"里氏替换原则","slug":"里氏替换原则","link":"#里氏替换原则","children":[]},{"level":2,"title":"合成复用原则","slug":"合成复用原则","link":"#合成复用原则","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.52,"words":1356},"filePathRelative":"writings/pattern/design-principle.md","localizedDate":"2023年3月1日","excerpt":"<h1> 设计原则</h1>\\n<h2> 开闭原则</h2>\\n<p>开闭原则（Open Close Principal）定义：一个软件实体如类、模块和方法应该<strong>对扩展开放，对修改关闭</strong>，以降低代码修改的风险。</p>\\n<p>核心思想：<strong>用抽象构建框架，用实现扩展细节</strong></p>\\n<p>优点：</p>\\n<ol>\\n<li>有利于构建一个稳定的系统</li>\\n<li>提高软件系统的可复用性及可维护性</li>\\n</ol>\\n<h2> 依赖倒置原则</h2>\\n<p>依赖倒置原则（Dependence Inversion Principle）定义：高层模块不应该依赖低层模块，两者都应该依赖其抽象</p>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
