const n=JSON.parse('{"key":"v-1193dc5d","path":"/writings/algorithm/binary-tree-traversal.html","title":"二叉树的遍历方式","lang":"zh-CN","frontmatter":{"description":"二叉树的遍历方式 二叉树从遍历方向可以分为深度优先搜索和广度优先搜索 二叉树通用定义 public class TreeNode { \\tint val; \\tTreeNode left; \\tTreeNode right; \\t TreeNode() {} TreeNode(int val) { this.val = val; } \\t\\t TreeNode(int val, TreeNode left, TreeNode right) { \\t\\tthis.val = val; \\t\\tthis.left = left; \\t\\tthis.right = right; \\t} }","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/algorithm/binary-tree-traversal.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"二叉树的遍历方式"}],["meta",{"property":"og:description","content":"二叉树的遍历方式 二叉树从遍历方向可以分为深度优先搜索和广度优先搜索 二叉树通用定义 public class TreeNode { \\tint val; \\tTreeNode left; \\tTreeNode right; \\t TreeNode() {} TreeNode(int val) { this.val = val; } \\t\\t TreeNode(int val, TreeNode left, TreeNode right) { \\t\\tthis.val = val; \\t\\tthis.left = left; \\t\\tthis.right = right; \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-06T07:06:11.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-06T07:06:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二叉树的遍历方式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-06T07:06:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"二叉树通用定义","slug":"二叉树通用定义","link":"#二叉树通用定义","children":[]},{"level":2,"title":"深度优先搜索","slug":"深度优先搜索","link":"#深度优先搜索","children":[{"level":3,"title":"递归写法","slug":"递归写法","link":"#递归写法","children":[]},{"level":3,"title":"非递归写法","slug":"非递归写法","link":"#非递归写法","children":[]}]},{"level":2,"title":"广度优先搜索","slug":"广度优先搜索","link":"#广度优先搜索","children":[]}],"git":{"createdTime":1678085362000,"updatedTime":1678086371000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":2}]},"readingTime":{"minutes":1.62,"words":487},"filePathRelative":"writings/algorithm/binary-tree-traversal.md","localizedDate":"2023年3月6日","excerpt":"<h1> 二叉树的遍历方式</h1>\\n<p>二叉树从遍历方向可以分为深度优先搜索和广度优先搜索</p>\\n<h2> 二叉树通用定义</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TreeNode</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token class-name\\">TreeNode</span> left<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token class-name\\">TreeNode</span> right<span class=\\"token punctuation\\">;</span>\\n\\t\\n    <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">=</span> val<span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\t\\t\\n    <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TreeNode</span> left<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TreeNode</span> right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">=</span> val<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> left<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> right<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
