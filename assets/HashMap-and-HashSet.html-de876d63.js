const e=JSON.parse('{"key":"v-b6ed7b82","path":"/writings/Java-collection/HashMap-and-HashSet.html","title":"HashMap 与 HashSet","lang":"zh-CN","frontmatter":{"title":"HashMap 与 HashSet","icon":"article","category":["Java集合"],"description":"HashMap 与 HashSet 概述 把 HashSet 和 HashMap 放在一起讲解，是因为二者在 Java 里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说 HashSet 里面有一个 HashMap，体现了适配器模式。所以这里重点讲解 HashMap 底层实现 HashMap 底层是一个链表数组。 HashMap 跟 TreeMap 不同，这个集合不保证元素的顺序，因为插入元素时会对元素进行哈希，数组下标由哈希值决定，所以元素顺序会被打散。 其中哈希方法可能会产生哈希冲突，HashMap采用的是链地址法解决冲突，就是相同哈希值的元素使用一个链表连接起来。","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Java-collection/HashMap-and-HashSet.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"HashMap 与 HashSet"}],["meta",{"property":"og:description","content":"HashMap 与 HashSet 概述 把 HashSet 和 HashMap 放在一起讲解，是因为二者在 Java 里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说 HashSet 里面有一个 HashMap，体现了适配器模式。所以这里重点讲解 HashMap 底层实现 HashMap 底层是一个链表数组。 HashMap 跟 TreeMap 不同，这个集合不保证元素的顺序，因为插入元素时会对元素进行哈希，数组下标由哈希值决定，所以元素顺序会被打散。 其中哈希方法可能会产生哈希冲突，HashMap采用的是链地址法解决冲突，就是相同哈希值的元素使用一个链表连接起来。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HashMap 与 HashSet\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"底层实现","slug":"底层实现","link":"#底层实现","children":[]},{"level":2,"title":"计算哈希值","slug":"计算哈希值","link":"#计算哈希值","children":[{"level":3,"title":"哈希冲突的解决方式","slug":"哈希冲突的解决方式","link":"#哈希冲突的解决方式","children":[]}]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"容量方面","slug":"容量方面","link":"#容量方面","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"扩容","slug":"扩容","link":"#扩容","children":[]}]},{"level":2,"title":"添加元素","slug":"添加元素","link":"#添加元素","children":[]},{"level":2,"title":"获取元素","slug":"获取元素","link":"#获取元素","children":[]},{"level":2,"title":"删除元素","slug":"删除元素","link":"#删除元素","children":[]},{"level":2,"title":"遍历 HashMap","slug":"遍历-hashmap","link":"#遍历-hashmap","children":[]},{"level":2,"title":"HashSet","slug":"hashset","link":"#hashset","children":[]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":12.96,"words":3887},"filePathRelative":"writings/Java-collection/HashMap-and-HashSet.md","localizedDate":"2023年2月28日","excerpt":"<h1> HashMap 与 HashSet</h1>\\n<h2> 概述</h2>\\n<p>把 HashSet 和 HashMap 放在一起讲解，是因为二者在 Java 里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说 HashSet 里面有一个 HashMap，体现了适配器模式。所以这里重点讲解 HashMap</p>\\n<h2> 底层实现</h2>\\n<p>HashMap 底层是一个链表数组。</p>\\n<p>HashMap 跟 TreeMap 不同，这个集合不保证元素的顺序，因为插入元素时会对元素进行哈希，数组下标由哈希值决定，所以元素顺序会被打散。</p>\\n<p>其中哈希方法可能会产生哈希冲突，HashMap采用的是链地址法解决冲突，就是相同哈希值的元素使用一个链表连接起来。</p>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
