const t=JSON.parse('{"key":"v-17b52b24","path":"/writings/pattern/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html","title":"备忘录模式","lang":"zh-CN","frontmatter":{"description":"备忘录模式 定义：在不破坏封装的前提下，捕获一个对象的内部状态的快照，并在对象之外保存这个状态的快照。这样以后可以将对象恢复到之前保存的状态 适用场景： 需要保存历史快照 希望在对象之外保存状态，且除了自己，其他类对象无法访问状态保存具体内容 优点： 简化备忘录发起人职责，隔离快照存储与获取，实现了信息的封装，客户端无需关心快照的存储细节 提供快照回滚功能 缺点：存储快照需要消耗资源，当需要保存的快照过多的时候，会对内存产生压力","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"备忘录模式"}],["meta",{"property":"og:description","content":"备忘录模式 定义：在不破坏封装的前提下，捕获一个对象的内部状态的快照，并在对象之外保存这个状态的快照。这样以后可以将对象恢复到之前保存的状态 适用场景： 需要保存历史快照 希望在对象之外保存状态，且除了自己，其他类对象无法访问状态保存具体内容 优点： 简化备忘录发起人职责，隔离快照存储与获取，实现了信息的封装，客户端无需关心快照的存储细节 提供快照回滚功能 缺点：存储快照需要消耗资源，当需要保存的快照过多的时候，会对内存产生压力"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"备忘录模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"备忘录模式在源码中的体现","slug":"备忘录模式在源码中的体现","link":"#备忘录模式在源码中的体现","children":[]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":1.94,"words":581},"filePathRelative":"writings/pattern/备忘录模式.md","localizedDate":"2023年3月1日","excerpt":"<h1> 备忘录模式</h1>\\n<p>定义：在不破坏封装的前提下，捕获一个对象的内部状态的快照，并在对象之外保存这个状态的快照。这样以后可以将对象恢复到之前保存的状态</p>\\n<p>适用场景：</p>\\n<ol>\\n<li>需要保存历史快照</li>\\n<li>希望在对象之外保存状态，且除了自己，其他类对象无法访问状态保存具体内容</li>\\n</ol>\\n<p>优点：</p>\\n<ol>\\n<li>简化备忘录发起人职责，隔离快照存储与获取，实现了信息的封装，客户端无需关心快照的存储细节</li>\\n<li>提供快照回滚功能</li>\\n</ol>\\n<p>缺点：存储快照需要消耗资源，当需要保存的快照过多的时候，会对内存产生压力</p>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{t as data};
