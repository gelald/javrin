const e=JSON.parse('{"key":"v-b2cb8c68","path":"/writings/Java-base/lambda-and-functional.html","title":"Lambda 表达式与函数式编程","lang":"zh-CN","frontmatter":{"title":"Lambda 表达式与函数式编程","icon":"article","category":["Java基础"],"description":"Lambda 表达式与函数式编程 Lambda 表达式和函数式接口都是 Java 8 的新特性，二者的有效结合形成了一个高级用法：函数式编程 Lambda 表达式 Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。使用 Lambda 表达式可以使代码变的更加简洁紧凑。 更优雅地使用函数式接口 当函数式接口作为一个方法地参数时，基于面向对象的知识，我们需要在方法的参数列表中新建一个匿名内部类，然后重写方法。","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Java-base/lambda-and-functional.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Lambda 表达式与函数式编程"}],["meta",{"property":"og:description","content":"Lambda 表达式与函数式编程 Lambda 表达式和函数式接口都是 Java 8 的新特性，二者的有效结合形成了一个高级用法：函数式编程 Lambda 表达式 Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。使用 Lambda 表达式可以使代码变的更加简洁紧凑。 更优雅地使用函数式接口 当函数式接口作为一个方法地参数时，基于面向对象的知识，我们需要在方法的参数列表中新建一个匿名内部类，然后重写方法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lambda 表达式与函数式编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"Lambda 表达式","slug":"lambda-表达式","link":"#lambda-表达式","children":[{"level":3,"title":"更优雅地使用函数式接口","slug":"更优雅地使用函数式接口","link":"#更优雅地使用函数式接口","children":[]},{"level":3,"title":"Lambda 延迟执行","slug":"lambda-延迟执行","link":"#lambda-延迟执行","children":[]},{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]}]},{"level":2,"title":"函数式接口","slug":"函数式接口","link":"#函数式接口","children":[]},{"level":2,"title":"常用的函数式接口","slug":"常用的函数式接口","link":"#常用的函数式接口","children":[{"level":3,"title":"Supplier","slug":"supplier","link":"#supplier","children":[]},{"level":3,"title":"Consumer","slug":"consumer","link":"#consumer","children":[]},{"level":3,"title":"Predicate","slug":"predicate","link":"#predicate","children":[]},{"level":3,"title":"Function","slug":"function","link":"#function","children":[]}]},{"level":2,"title":"方法引用","slug":"方法引用","link":"#方法引用","children":[]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":7.79,"words":2336},"filePathRelative":"writings/Java-base/lambda-and-functional.md","localizedDate":"2023年2月28日","excerpt":"<h1> Lambda 表达式与函数式编程</h1>\\n<blockquote>\\n<p>Lambda 表达式和函数式接口都是 Java 8 的新特性，二者的有效结合形成了一个高级用法：函数式编程</p>\\n</blockquote>\\n<h2> Lambda 表达式</h2>\\n<blockquote>\\n<p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p>\\n</blockquote>\\n<h3> 更优雅地使用函数式接口</h3>\\n<p>当函数式接口作为一个方法地参数时，基于面向对象的知识，我们需要在方法的参数列表中新建一个匿名内部类，然后重写方法。</p>","autoDesc":true}');export{e as data};
