import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-f9042815.js";const t={},p=e(`<h1 id="spring-cloud-openfeign-简记" tabindex="-1"><a class="header-anchor" href="#spring-cloud-openfeign-简记" aria-hidden="true">#</a> Spring Cloud OpenFeign 简记</h1><h2 id="简单介绍" tabindex="-1"><a class="header-anchor" href="#简单介绍" aria-hidden="true">#</a> 简单介绍</h2><p>OpenFeign 是 SpringCloud 针对 NetFlix 的 Feign 做的二次封装，它的前身 Feign 是 Http 通信的客户端，使用 Feign 可以让我们开发时<strong>屏蔽网络通信的细节，把所有的远程方法调用都变得像直接面向本地接口调用的方式一样方便</strong>。</p><p>OpenFeign 对 Feign 二次封装后，在其上<strong>加入了 SpringMVC 的注解支持</strong>，我们常用的 <code>@RequestMapping</code>、<code>@RequestBody</code> 等。</p><p>另外 OpenFeign 还<strong>集成了 Ribbon、Hystrix 组件</strong>。</p><ul><li>Ribbon 组件实现了客户端负载均衡，维护了一份服务(地址)清单，当这个服务有多个实例时，根据这份清单和负载均衡策略，选择其中一个实例进行调用。</li><li>Hystrix 组件实现了服务降级熔断，当目标服务不可用时，提供后备的配置方式来告诉调用方，调用失败。</li></ul><h2 id="一些特性" tabindex="-1"><a class="header-anchor" href="#一些特性" aria-hidden="true">#</a> 一些特性</h2><h3 id="gzip-压缩" tabindex="-1"><a class="header-anchor" href="#gzip-压缩" aria-hidden="true">#</a> Gzip 压缩</h3><p>我们知道，发送 Http 请求前，需要对数据进行一层一层的包装，那么这就会导致原本需要发送的“核心数据”变大了，那么发送数据时，需要的时间更长了，OpenFeign支持对请求和响应进行GZIP压缩，以此来提供通信效率，开启后可以有效节约网络资源，但同时也会增加 CPU 的负担，开启时需要考虑好压缩的大小</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token comment"># 压缩配置</span>
  <span class="token key atrule">compression</span><span class="token punctuation">:</span>
    <span class="token key atrule">request</span><span class="token punctuation">:</span>
	    <span class="token comment"># 配置请求GZIP压缩</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token comment"># 配置压缩支持的MIME TYPE</span>
      <span class="token key atrule">mime-types</span><span class="token punctuation">:</span> text/xml<span class="token punctuation">,</span> application/xml<span class="token punctuation">,</span> application/json
      <span class="token comment"># 配置压缩数据大小的下限</span>
      <span class="token key atrule">min-request-size</span><span class="token punctuation">:</span> <span class="token number">2048</span>
    <span class="token key atrule">response</span><span class="token punctuation">:</span>
    	<span class="token comment"># 配置响应GZIP压缩</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日志配置" tabindex="-1"><a class="header-anchor" href="#日志配置" aria-hidden="true">#</a> 日志配置</h3><p>针对 FeignClient 执行的方法，OpenFeign 为每一个 FeignClient 提供了单独的日志输出等级，核心的类是 <code>feign.Logger</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignClientConfiguration</span> <span class="token punctuation">{</span>
  
  	<span class="token doc-comment comment">/**
     * Logger.Level 的具体级别如下：
     * NONE：不记录任何信息
     * BASIC：仅记录请求方法、URL以及响应状态码和执行时间
     * HEADERS：除了记录 BASIC级别的信息外，还会记录请求和响应的头信息
     * FULL：记录所有请求与响应的明细，包括头信息、请求体、元数据
     */</span>
		<span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/////////////////////////////////////////////////////////////////</span>

<span class="token comment">//指定使用哪一个配置类</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;user-service&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">FeignClientConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/user/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外还要在配置文件中指定日志等级</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.hello.UserClient</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="底层通信的-http-组件" tabindex="-1"><a class="header-anchor" href="#底层通信的-http-组件" aria-hidden="true">#</a> 底层通信的 Http 组件</h3><p>OpenFeign Http 通信组件默认是使用 jdk 自带的 <code>HttpURLConnection</code>，由于没有连接池，性能不高，支持换成其他的 Http 通信组件，OpenFeign提供了 okhttp、httpclient 这两种，现在更为主流的是用 okhttp，支持连接池、多线程，使用后还不需要手动关闭释放资源</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
	<span class="token key atrule">httpclient</span><span class="token punctuation">:</span>
		<span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">okhttp</span><span class="token punctuation">:</span>
  	<span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用超时" tabindex="-1"><a class="header-anchor" href="#调用超时" aria-hidden="true">#</a> 调用超时</h3><p>关于 OpenFeign 调用超时，超过阈值就会返回失败，如果下游接口反应时间比较长，那么需要进行接口优化或者提高超时时间，一般 Ribbon 超时报错是这样的：<code>Read timed out executing POST http://***</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
	<span class="token comment"># 建立连接的超时时间</span>
  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>
  <span class="token comment"># 建立连接后从服务调用接口获取响应的超时时间</span>
  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="熔断降级" tabindex="-1"><a class="header-anchor" href="#熔断降级" aria-hidden="true">#</a> 熔断降级</h3><p>简单介绍一下降级和熔断</p><ol><li>降级（Fallback）：降级是一种在<strong>系统出现异常或超时</strong>的情况下，<strong>返回一个默认的结果</strong>或者一个备用的服务来避免系统崩溃的机制。降级可以在客户端或者服务端实现。</li><li>熔断（Circuit Breaker）：熔断是一种在系统出现异常或故障时，对该服务的请求进行熔断，避免大量请求涌入导致系统崩溃的机制。熔断器会在一段时间内监控服务的状态，<strong>当服务的失败率达到一定阈值时，熔断器会触发熔断操作</strong>，将请求转发到降级逻辑，避免向失败的服务发送请求。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;user-service&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">FeignClientConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">UserClientFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/user/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//////////////////////////////////////////////////////////////////////</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserClientFallback</span> <span class="token keyword">implements</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;用户接口调用失败&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工作原理简述" tabindex="-1"><a class="header-anchor" href="#工作原理简述" aria-hidden="true">#</a> 工作原理简述</h2><ul><li>在 SpringBoot 应用启动时，由于我们加上了 <code>@EnableOpenFeign</code> 注解，开启对包路径扫描，所有被 <code>@FeignClient</code> 注解修饰的类，会被注册到 SpringIoC 容器中。</li><li>由于没有写过实现类，那么注册到容器中的是一个代理类，具体是 Spring 通过 JDK 的代理方式生成代理对象。</li><li>当这些定义的 FeignClient 被调用时，OpenFeign 会为每个接口方法创建一个 <code>RequestTemplate</code> 对象。该对象封装了HTTP请求需要的所有信息，例如请求参数名、请求方法等信息。</li><li>然后由 <code>RequestTemplate</code> 生成 <code>Request</code>，把 <code>Request</code> 交给 <code>Client</code> 去处理，这里的 <code>Client</code> 可以是 JDK 原生的<code>URLConnection</code>、<code>HttpClient</code> 或 <code>Okhttp</code> 。最后 <code>Client</code> 被封装到 <code>LoadBalanceClient</code> 类，看这个类的名字既可以知道是结合 Ribbon 负载均衡发起服务之间的调用，因为在 OpenFeign 中默认是已经整合了 Ribbon 了。</li></ul>`,28),i=[p];function l(o,c){return s(),a("div",null,i)}const r=n(t,[["render",l],["__file","SpringCloud-OpenFeign.html.vue"]]);export{r as default};
