import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-859571d0.js";const e={},o=t(`<h1 id="java-内存模型与并发" tabindex="-1"><a class="header-anchor" href="#java-内存模型与并发" aria-hidden="true">#</a> Java 内存模型与并发</h1><blockquote><p>这一节我们结合 Java 内存模型来理解并发编程中的一些经典问题，为后续学习并发编程做铺垫</p></blockquote><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="并发编程模型的分类" tabindex="-1"><a class="header-anchor" href="#并发编程模型的分类" aria-hidden="true">#</a> 并发编程模型的分类</h3><p>在处理并发编程时，我们需要处理两个关键的问题</p><ul><li>线程之间如何进行通信。线程之间通过哪种方式来进行交换信息</li><li>线程之间如何进行同步。用于控制不同线程之间操作发生相对顺序的机制</li></ul><p>并发编程中常见有两种模型，分别用不同的方式解决了上述两个关键问题：</p><ul><li><p><strong>共享内存</strong>的并发编程模型</p><ul><li>通信：线程之间共享程序的公共状态，线程之间通过「读-写」公共状态来隐式进行通信</li><li>同步：开发人员必须<strong>显式地控制</strong>某个方法或某段代码需要在线程之间互斥地执行</li></ul></li><li><p><strong>消息传递</strong>的并发编程模型</p><ul><li>通信：线程之间通过发送消息来显式进行通信</li><li>同步：消息发送一定位于消息接收之前，这里存在了一个隐式的同步控制</li></ul></li></ul><p><strong>Java 中的并发编程模型使用的是共享内存模型</strong></p><h3 id="java-内存模型" tabindex="-1"><a class="header-anchor" href="#java-内存模型" aria-hidden="true">#</a> Java 内存模型</h3><p>回顾一下 Java 内存模型，JMM 定义了主内存和线程之间的抽象关系：所有的共享变量（实例域、静态域、数组）都存放在主内存中，所有线程都共享这一部分的数据；线程读写共享变量时需要需要在自己的工作内存中创建副本，修改完成后需要把副本数据更新到主内存中。</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220416221924.png" alt=""></p><p>从上图看，假设线程A需要与线程B进行通信的话，需要经历以下两个步骤</p><ul><li>线程A把工作内存中更新后的共享变量更新到主内存中</li><li>线程B从主内存中读取线程A更新后的变量</li></ul><p>可以看到整个通信过程中，主内存是一个核心的角色，<strong>JMM 通过控制主内存和各线程工作内存的交互，来提供内存可见性的保证</strong></p><h2 id="重排序" tabindex="-1"><a class="header-anchor" href="#重排序" aria-hidden="true">#</a> 重排序</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>在执行程序时<strong>为了提高性能</strong>，编译器和处理器常常会对指令做重排序</p><p>重排序会分为以下三类：</p><ul><li>（编译器）编译器优化的重排序。<strong>在不影响单线程程序语意的前提下</strong>，可以重新安排语句的执行顺序</li><li>（处理器）指令级并行的重排序。现代处理器采用了指令级并行技术将多条指令重叠执行。如果不存在数据的依赖性，处理器可以改变语句对应的机器指令的执行顺序</li><li>（处理器）内存系统的重排序。由于处理器使用缓存和「读-写」缓存区，这使得加载和存储操作看上去可能是乱序执行</li></ul><h3 id="重排序可能引发的问题" tabindex="-1"><a class="header-anchor" href="#重排序可能引发的问题" aria-hidden="true">#</a> 重排序可能引发的问题</h3><p>用单例模式引入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 检查1</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 检查2</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>singleton<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，在多线程环境下 <code>singleton = new Singleton();</code> 这一句可能会发生指令重排序</p><p>这一句的执行顺序为</p><ol><li>分配内存</li><li>初始化</li><li>把对象指向内存空间</li></ol><p>经过重排序后，执行顺序会变成</p><ol><li>分配内存</li><li>把对象指向内存空间</li><li>初始化</li></ol><p>在并发环境下，一个线程可能会得到一个还没完成初始化的单例对象，从而造成程序错误，因此需要将 singleton 使用 volatile 关键字来声明，禁止指令重排序</p><blockquote><p>当把对象指向内存空间后，线程在检查1时就不进入条件了</p></blockquote><p>而解决这种问题有两种解决方案：<strong>happen-before</strong>（指令重排序必须按照一定的规则）、<strong>内存屏障</strong>（禁止指令重排序）</p><h3 id="happens-before" tabindex="-1"><a class="header-anchor" href="#happens-before" aria-hidden="true">#</a> happens-before</h3><h4 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h4><p>「happens-before」这个概念用于阐述操作之间的内存可见性。如果一个操作执行的<strong>结果</strong>要对另一个操作<strong>可见</strong>，那么这两个操作之间存在 <code>happens-before</code> 关系，那么<strong>不允许进行重排序</strong></p><blockquote><p>注意，happens-before 强调的是结果的可见性，而不是执行的前后顺序</p></blockquote><h4 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h4><p>其中 happens-before 有几个重要的规则</p><ul><li>程序顺序规则：在一个线程内代码的执行结果是有序的</li><li>监视器锁规则：对一个监视器锁的解锁，happens-before 于随后对这个监视器锁的加锁</li><li>volatile 变量规则：对一个 volatile 变量的写，happens-before 于后续对这个变量的读</li><li>传递性规则：如果 A happens-before B，B happens-before C，那么 A happens-before C</li></ul><h3 id="内存屏障类型" tabindex="-1"><a class="header-anchor" href="#内存屏障类型" aria-hidden="true">#</a> 内存屏障类型</h3><table><thead><tr><th>屏障类型</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>LoadLoad屏障</td><td>Load1;<br>LoadLoad;<br>Load2</td><td>在Load2要读取的数据被访问前，<br>保证Load1要读取的数据被读取完毕</td></tr><tr><td>StoreStore屏障</td><td>Store1;<br>StoreStore;<br>Store2</td><td>在Store2写入前，<br>保证Store1的写入操作对其他处理器可见</td></tr><tr><td>LoadStore屏障</td><td>Load1;<br>LoadStore;<br>Store2</td><td>在Store写入前，<br>保证Load1要读取的数据被读取完毕</td></tr><tr><td><strong>StoreLoad屏障</strong></td><td>Store1;<br>StoreLoad;<br>Load2</td><td>在Load2要读取的数据被访问前，<br>保证Store1写入完毕</td></tr></tbody></table><p>其中重点提一下 「StoreLoad屏障」，它同时<strong>具备其他三个屏障的功能</strong>，同时也是<strong>开销最大的屏障</strong>，因为要求在当前处理器要把缓冲区的所有数据刷到主内存中</p>`,41),p=[o];function l(i,r){return a(),s("div",null,p)}const u=n(e,[["render",l],["__file","Java内存模型与并发.html.vue"]]);export{u as default};
