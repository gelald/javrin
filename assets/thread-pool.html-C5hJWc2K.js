import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-DVmJHiRi.js";const l={};function t(h,i){return n(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池"><span>线程池</span></a></h1><h2 id="线程池引入" tabindex="-1"><a class="header-anchor" href="#线程池引入"><span>线程池引入</span></a></h2><p>在 Java 中，我们一般通过继承 <code>Thread</code> 类和实现 <code>Runnnable</code> 接口，调用线程的 <code>start()</code> 方法实现线程的启动。但如果并发的数量很多，而且每个线程都是执行很短的时间便结束了，那样<strong>频繁的创建线程和销毁进程会大大的降低系统运行的效率</strong>。</p><p>线程池正是为了解决多线程效率低的问题而产生的，通过管理一组工作线程使得线程可以被复用，线程执行结束后不被销毁，而是可以继续执行其他任务。在高并发环境下，系统资源是宝贵的，需要节约资源才能提高可用性。</p><p>线程池的作用一言以蔽之，就是提高系统效率和吞吐量。如果服务器对每个请求都分别创建一个线程的话，在很短时间内就会产生很多创建和销毁的动作，然而服务器在创建和销毁线程上花费的时间和消耗的系统资源都相当大，线程池就可以尽量减少这种情况的发生。</p><h2 id="threadpoolexecutor" tabindex="-1"><a class="header-anchor" href="#threadpoolexecutor"><span>ThreadPoolExecutor</span></a></h2><p><code>ThreadPoolExecutor</code> 是 Java 中提供的常用的线程池对象。</p><h3 id="重要参数" tabindex="-1"><a class="header-anchor" href="#重要参数"><span>重要参数</span></a></h3><ul><li><p><code>corePoolSize</code>：核心线程数。</p><ul><li>核心线程默认情况下会<strong>一直存活</strong>，即使没有任务需要执行。</li><li>当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理。</li></ul></li><li><p><code>queueCapacity</code>：任务队列容量（默认：<code>Integer.MAX_VALUE</code>）。</p><ul><li>当核心线程数达到最大并且所有核心线程都在工作状态中，新任务会放在任务队列中等待执行。</li></ul></li><li><p><code>maxPoolSize</code>：最大线程数（默认：<code>Integer.MAX_VALUE</code>）。</p><ul><li>用于规定线程池的最大能创建的线程数量。</li><li>当线程数 &gt; <code>corePoolSize</code>，<strong>且任务队列已满时</strong>。线程池会创建新线程来处理任务，直到线程数量达到 <code>maxPoolSize</code> 。</li><li>当线程数已经 = <code>maxPoolSize</code>，<strong>且任务队列已满时</strong>，线程池会执行拒绝策略来<strong>拒绝处理</strong>任务。</li></ul></li><li><p><code>keepAliveTime</code>：线程空闲时间（秒）（默认：60）。</p><ul><li>当线程的空闲时间达到 <code>keepAliveTime</code> 时，线程会自动销毁，直到线程数等于 <code>corePoolSize</code> 。</li></ul></li><li><p><code>allowCoreThreadTimeout</code>：允许核心线程超时（默认：<code>false</code>）。</p><ul><li>当 <code>allowCoreThreadTimeout</code> = <code>true</code> 时，核心线程的空闲时间达到 <code>keepAliveTime</code> 也会自动销毁。</li></ul></li><li><p><code>rejectedExecutionHandler</code>：任务拒绝处理器（默认：<code>AbortPolicy</code>）</p><ul><li>当线程数达到 <code>maxPoolSize</code>，且任务队列已满时，就会采用设定的拒绝处理器来拒绝任务。</li></ul></li><li><p><code>RejectedExecutionHandler</code>：当线程池无法处理任务的拒绝策略接口，常见的实现类有以下几个：</p><ul><li><code>ThreadPoolExecutor.AbortPolicy</code> : 丢弃任务并抛出 <code>RejectedExecutionException</code>。</li><li><code>ThreadPoolExecutor.DiscardPolicy</code> : 丢弃任务，但是不抛出异常。</li><li><code>ThreadPoolExecutor.DiscardOldestPolicy</code> : 丢弃队列最前面的任务，然后重新尝试执行任务。</li><li><code>ThreadPoolExecutor.CallerRunsPolicy</code> : 不在新线程中执行任务，而是由调用者所在的线程来执行。</li><li>同时也可以实现 <code>RejectedExecutionHandler</code> 接口来自定义拒绝处理器，比如可以把无法处理的任务进行持久化，等到线程池可以处理时再重新处理。</li></ul></li></ul><h3 id="创建线程池" tabindex="-1"><a class="header-anchor" href="#创建线程池"><span>创建线程池</span></a></h3><p>一般创建线程池的方式有两种：构造方法 和 <code>Executors</code>，我们推荐使用构造方法来自行创建，原因后面再分析</p><h4 id="构造方法创建线程池" tabindex="-1"><a class="header-anchor" href="#构造方法创建线程池"><span>构造方法创建线程池</span></a></h4><p>结合以上参数来进一步学习 <code>ThreadPoolExecutor</code> 的构造方法</p><p>我们选择其中一个较为经典的构造方法来看</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                          int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maximumPoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                          long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> keepAliveTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                          TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> unit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                          BlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> workQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                          RejectedExecutionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> handler) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	this</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 核心线程数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		maximumPoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 最大线程数	</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		keepAliveTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 线程空闲时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		unit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               // 线程空闲时间单位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		workQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 缓存队列对象</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defaultThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 用于设置创建线程的工厂，可以通过线程工厂给每个线程做些更有意义的事情，比如设置daemon和优先级等等</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		handler)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           // 任务拒绝策略处理器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>workQueue</code> : 用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。</p><ul><li><code>ArrayBlockingQueue</code> : 一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）排序元素。</li><li><code>LinkedBlockingQueue</code> : 一个基于链表结构的无界(默认长度是Integer.MAX_VALUE)阻塞队列，此队列按 FIFO （先进先出） 排序元素，吞吐量通常要高于 <code>ArrayBlockingQueue</code>。静态工厂方法 <code>Executors.newFixedThreadPool()</code> 使用了这个队列。</li><li><code>SynchronousQueue</code> : 一个<strong>不存储元素的阻塞队列</strong>。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于 <code>LinkedBlockingQueue</code>。静态工厂方法 <code>Executors.newCachedThreadPool()</code> 使用了这个队列。</li><li><code>PriorityBlockingQueue</code> : 一个具有优先级(基于堆结构)的无界阻塞队列。</li></ul><h4 id="executors" tabindex="-1"><a class="header-anchor" href="#executors"><span>Executors</span></a></h4><p>除了使用构造方法，也可以通过 <code>Executors</code> 其中的静态方法来创建线程池。</p><p>可以创建4类预定义好参数的线程池，<strong>但是不推荐使用这些静态方法来创建线程池，因为容易导致 OOM 问题</strong>。</p><ul><li><code>CachedThreadPool</code> (可缓存线程池)</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newCachedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                                  60L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                                  new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SynchronousQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个任务提交时，<code>corePoolSize</code> 为 0 不创建核心线程，<code>SynchronousQueue</code> 是一个不存储元素的阻塞队列，可以理解为队里永远是满的，因此<strong>最终会创建非核心线程来执行任务</strong>。因为 <code>Integer.MAX_VALUE</code> 非常大，可以认为是<strong>可以无限创建线程</strong>的，在资源有限的情况下容易引起 OOM 异常。</p><p>应用场景：执行大量、耗时少的任务。</p><hr><ul><li><code>SingleThreadPool</code> (单线程线程池)</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newSingleThreadExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FinalizableDelegatedExecutorService</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                                0L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MILLISECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                                new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()))</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个任务提交时，<strong>只有一个核心线程来处理任务</strong>，缓存队列是长度为 <code>Integer.MAX_VALUE</code> 的 <code>LinkedBlockingQueue</code>，可以认为是无界队列，因此往<strong>队列中可以插入无限多的任务</strong>，在资源有限的时候容易引起 OOM 异常。</p><p>应用场景：不适合【并发但可能引起 IO 阻塞及影响 UI 线程响应】的操作，如数据库操作、文件操作等。</p><hr><ul><li><code>FixedThreadPool</code> (定长线程池)</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newFixedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nThreads) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(nThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                                  0L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MILLISECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                                  new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定长线程池其实和单个核心线程池类似，唯一区别是可以由用户定义一个固定的核心线程数量。</p><hr><ul><li><code>ScheduleThreadPool</code> (定时线程池)</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ScheduledExecutorService</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newScheduledThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> corePoolSize) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ScheduledThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(corePoolSize)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心线程数量固定，非核心线程数量<strong>无限</strong>，执行完闲置 10 ms 后回收，任务队列为 <code>DelayedWorkQueue</code> 延时阻塞队列。当任务堆积时，缓存队列满了之后，会<strong>创建大量非核心线程来处理任务</strong>，在资源有限的情况下容易引起 OOM 异常。</p><p>使用场景：执行定时或者周期性任务。</p><h3 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程"><span>执行流程</span></a></h3><p>其实从上面的核心线程、队列的参数大致可以了解到 <code>ThreadPoolExecutor</code> 的执行流程，这一小节来更进一步更详细地理解它的执行流程</p><p><code>ThreadPoolExecutor</code> 执行流程图</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220330155842.png" alt=""></p><p>当一个任务需要添加到线程池中执行时</p><ul><li>如果线程池中线程数量小于核心线程数，那么即使核心线程全部处于空闲状态，也要创建新的线程作为核心线程来处理这个任务</li><li>如果线程池中线程数量等于核心线程数，而且核心线程都不空闲，但是缓存队列未满，那么任务放到缓存队列中等待执行</li><li>如果线程池中线程数量大于核心线程数，缓存队列已满，但线程数小于最大线程数，那么创建新的线程来处理这个任务</li><li>如果线程池中线程数量大于核心线程数，缓存队列已满，而且线程数等于最大线程数，那么通过 <code>RejectedExecutionHandler</code> （拒绝处理器）来处理这个任务</li></ul><h3 id="为什么阿里巴巴规范明确说不允许使用-executors-创建线程池" tabindex="-1"><a class="header-anchor" href="#为什么阿里巴巴规范明确说不允许使用-executors-创建线程池"><span>为什么阿里巴巴规范明确说不允许使用 Executors 创建线程池</span></a></h3><p><code>Executors.newSingleThreadPool()</code> 和 <code>Executors.newFixedSingleThreadPool()</code> 定义的线程池缓存队列选型为 <code>LinkedBlockingQueue</code> 长度为 <code>Integer.MAX_VALUE</code> ，当堆积任务时容易占用大量内存进而导致 OOM 的发生</p><p><code>Executors.newCachedThreadPool()</code> 和 <code>Executors.newScheduleThreadPool()</code> 定义的最大线程数为 <code>Integer.MAX_VALUE</code> ，当任务堆积时可能会创建数量非常多的线程进行处理任务，容易占用大量内存进而导致 OOM 的发生</p><p>所以推荐使用构造方法来创建线程池，尽可能通过多次调整线程池参数，来得到一个最适合系统的线程池</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                          int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maximumPoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                          long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> keepAliveTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                          TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> unit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                          BlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> workQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                          ThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> threadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                          RejectedExecutionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> handler)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程池参数" tabindex="-1"><a class="header-anchor" href="#线程池参数"><span>线程池参数</span></a></h2><p><s>线程池参数我们一般会根据「每秒任务数」、「每个任务花费的时间」、「系统容忍的最大响应时间」(可以理解为任务超时时间)来调整 <code>corePoolSize</code>、<code>queueCapacity</code>、<code>maxPoolSize</code>、<code>rejectedExecutionHandler</code> 这几个核心的参数</s></p><p>思考了很久，这里还是不把之前写的线程池参数选择的思路写出来了。</p><p>因为并发环境非常复杂，服务器资源也是非常吃紧的，不是我说多少就敲定多少的，是需要不断地在实战中进行调整的。</p><h3 id="按线程池类型来简单划分线程池大小" tabindex="-1"><a class="header-anchor" href="#按线程池类型来简单划分线程池大小"><span>按线程池类型来简单划分线程池大小</span></a></h3><p>这里是我从一些技术平台上面找到的调整策略，但是也不能作为最终的数值，也是作为参考之后不断进行调整的。</p><ul><li><p>如果是 CPU 密集型任务，比如需要对大量数据进行排序、运算等，这些任务 CPU 利用率很高，尽量让这些任务并行执行，减少线程切换的开销，所以线程池大小可以设置为 NCPU + 1。（4核CPU，线程池大小设置为5）</p></li><li><p>如果是 IO 密集型任务，比如需要进行文件读取、网络读取，这些任务 IO 操作时间长，CPU 会处于空闲状态，导致 CPU 利用率不高，让这些线程在等待 IO 操作时，其他线程可以使用 CPU，所以线程池大小可以设置为 2*NCPU + 1。（4核CPU，线程池大小设置为9）</p></li></ul><blockquote><p>当然以上只是一个参考值，具体还是需要根据机器性能、系统运行情况来决定或者调整。可以尝试先根据任务类型把线程池大小设置为参考值，关注任务执行情况、系统资源利用率等指标进行适当调整。</p><p>比如线程未达到最大线程数时，服务器的 CPU 已经占满了，这时需要升级硬件或者是优化代码逻辑来调整。</p><p>如果线程池过大，会导致内存占用量过高，还可能会耗尽资源；如果线程池过小，会由于存在资源空闲的情况，对系统吞吐量造成损失。</p></blockquote>`,57)])])}const p=s(l,[["render",t]]),r=JSON.parse('{"path":"/writings/concurrency/thread-pool.html","title":"线程池基本概念","lang":"zh-CN","frontmatter":{"title":"线程池基本概念","icon":"article","isOriginal":true,"category":["并发"],"tag":["线程池","原理"],"description":"线程池 线程池引入 在 Java 中，我们一般通过继承 Thread 类和实现 Runnnable 接口，调用线程的 start() 方法实现线程的启动。但如果并发的数量很多，而且每个线程都是执行很短的时间便结束了，那样频繁的创建线程和销毁进程会大大的降低系统运行的效率。 线程池正是为了解决多线程效率低的问题而产生的，通过管理一组工作线程使得线程可以被...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池基本概念\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220330155842.png\\"],\\"dateModified\\":\\"2023-02-28T15:46:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"],["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/concurrency/thread-pool.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"线程池基本概念"}],["meta",{"property":"og:description","content":"线程池 线程池引入 在 Java 中，我们一般通过继承 Thread 类和实现 Runnnable 接口，调用线程的 start() 方法实现线程的启动。但如果并发的数量很多，而且每个线程都是执行很短的时间便结束了，那样频繁的创建线程和销毁进程会大大的降低系统运行的效率。 线程池正是为了解决多线程效率低的问题而产生的，通过管理一组工作线程使得线程可以被..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220330155842.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:46:06.000Z"}],["meta",{"property":"article:tag","content":"原理"}],["meta",{"property":"article:tag","content":"线程池"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:46:06.000Z"}]]},"git":{"createdTime":1659199509000,"updatedTime":1677599166000,"contributors":[{"name":"gelald","username":"gelald","email":"yb.ng@foxmail.com","commits":2,"url":"https://github.com/gelald"},{"name":"wuyingbin","username":"wuyingbin","email":"yb.ng@foxmail.com","commits":1,"url":"https://github.com/wuyingbin"}]},"readingTime":{"minutes":9.28,"words":2783},"filePathRelative":"writings/concurrency/thread-pool.md","autoDesc":true}');export{p as comp,r as data};
