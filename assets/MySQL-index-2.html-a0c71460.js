const e=JSON.parse('{"key":"v-4f99908e","path":"/writings/MySQL/MySQL-index-2.html","title":"MySQL 索引学习2","lang":"zh-CN","frontmatter":{"title":"MySQL 索引学习2","icon":"article","category":["文章","数据库"],"tag":["索引","MySQL"],"description":"1. MySQL 查询慢是什么体验？ 谢邀，利益相关。 大多数互联网应用场景都是读多写少，业务逻辑更多分布在写上。对读的要求大概就是要快。那么都有什么原因会导致我们完成一次出色的慢查询呢？ 1.1 索引 在数据量不是很大时，大多慢查询可以用索引解决，大多慢查询也因为索引不合理而产生。 MySQL 索引基于 B+ 树，这句话相信面试都背烂了，接着就可以问最左前缀索引、 B+ 树和各种树了。 说到最左前缀，实际就是组合索引的使用规则，使用合理组合索引可以有效的提高查询速度，为什么呢？ 因为索引下推。如果查询条件包含在了组合索引中，比如存在组合索引（a,b)，查询到满足 a 的记录后会直接在索引内部判断 b 是否满足，减少回表次数。同时，如果查询的列恰好包含在组合索引中，即为覆盖索引，无需回表。 索引规则估计都知道，实际开发中也会创建和使用。 问题可能更多的是：为什么建了索引还慢？","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/MySQL/MySQL-index-2.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"MySQL 索引学习2"}],["meta",{"property":"og:description","content":"1. MySQL 查询慢是什么体验？ 谢邀，利益相关。 大多数互联网应用场景都是读多写少，业务逻辑更多分布在写上。对读的要求大概就是要快。那么都有什么原因会导致我们完成一次出色的慢查询呢？ 1.1 索引 在数据量不是很大时，大多慢查询可以用索引解决，大多慢查询也因为索引不合理而产生。 MySQL 索引基于 B+ 树，这句话相信面试都背烂了，接着就可以问最左前缀索引、 B+ 树和各种树了。 说到最左前缀，实际就是组合索引的使用规则，使用合理组合索引可以有效的提高查询速度，为什么呢？ 因为索引下推。如果查询条件包含在了组合索引中，比如存在组合索引（a,b)，查询到满足 a 的记录后会直接在索引内部判断 b 是否满足，减少回表次数。同时，如果查询的列恰好包含在组合索引中，即为覆盖索引，无需回表。 索引规则估计都知道，实际开发中也会创建和使用。 问题可能更多的是：为什么建了索引还慢？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"索引"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 索引学习2\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"1. MySQL 查询慢是什么体验？","slug":"_1-mysql-查询慢是什么体验","link":"#_1-mysql-查询慢是什么体验","children":[{"level":3,"title":"1.1 索引","slug":"_1-1-索引","link":"#_1-1-索引","children":[]},{"level":3,"title":"1.2 等MDL锁","slug":"_1-2-等mdl锁","link":"#_1-2-等mdl锁","children":[]},{"level":3,"title":"1.3 等 flush","slug":"_1-3-等-flush","link":"#_1-3-等-flush","children":[]},{"level":3,"title":"1.4 等行锁","slug":"_1-4-等行锁","link":"#_1-4-等行锁","children":[]},{"level":3,"title":"1.5 当前读","slug":"_1-5-当前读","link":"#_1-5-当前读","children":[]},{"level":3,"title":"1.6 大表场景","slug":"_1-6-大表场景","link":"#_1-6-大表场景","children":[]},{"level":3,"title":"1.7 小结","slug":"_1-7-小结","link":"#_1-7-小结","children":[]}]}],"git":{"createdTime":1676279602000,"updatedTime":1677655655000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":2},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":8.03,"words":2409},"filePathRelative":"writings/MySQL/MySQL-index-2.md","localizedDate":"2023年2月13日","excerpt":"<h2> 1. MySQL 查询慢是什么体验？</h2>\\n<p>谢邀，利益相关。</p>\\n<p>大多数互联网应用场景都是读多写少，业务逻辑更多分布在写上。对读的要求大概就是要快。那么都有什么原因会导致我们完成一次出色的慢查询呢？</p>\\n<h3> 1.1 索引</h3>\\n<p>在数据量不是很大时，大多慢查询可以用索引解决，大多慢查询也因为索引不合理而产生。</p>\\n<p>MySQL 索引基于 B+ 树，这句话相信面试都背烂了，接着就可以问最左前缀索引、 B+ 树和各种树了。</p>\\n<p>说到最左前缀，实际就是组合索引的使用规则，使用合理组合索引可以有效的提高查询速度，为什么呢？</p>\\n<p>因为索引下推。如果查询条件包含在了组合索引中，比如存在组合索引（a,b)，查询到满足 a 的记录后会直接在索引内部判断 b 是否满足，减少回表次数。同时，如果查询的列恰好包含在组合索引中，即为覆盖索引，无需回表。\\n索引规则估计都知道，实际开发中也会创建和使用。 问题可能更多的是：为什么建了索引还慢？</p>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
