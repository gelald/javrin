const t=JSON.parse('{"key":"v-fd752168","path":"/writings/pattern/flyweight.html","title":"享元模式","lang":"zh-CN","frontmatter":{"title":"享元模式","icon":"article","category":["设计模式"],"description":"享元模式 定义：提供了减少对象数量从而改善应用所需的对象结构的方式，是对象池的一种实现。最典型的例子就是线程池，线程池可以避免不停地创建和销毁多个对象而导致性能的消耗 宗旨：共享细粒度对象，将多个对同一个对象的访问集中起来 适用场景：系统有大量相似对象、需要缓存池 优点： 减少对象的创建，降低内存中对象的数量，提高程序运行效率 减少内存之外的资源占用，如：连接池，每一个连接都和数据库有一个TCP连接，占用着网络资源 缺点： 需要关注内、外部状态，关注线程安全问题 使程序逻辑变得复杂","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/flyweight.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"享元模式 定义：提供了减少对象数量从而改善应用所需的对象结构的方式，是对象池的一种实现。最典型的例子就是线程池，线程池可以避免不停地创建和销毁多个对象而导致性能的消耗 宗旨：共享细粒度对象，将多个对同一个对象的访问集中起来 适用场景：系统有大量相似对象、需要缓存池 优点： 减少对象的创建，降低内存中对象的数量，提高程序运行效率 减少内存之外的资源占用，如：连接池，每一个连接都和数据库有一个TCP连接，占用着网络资源 缺点： 需要关注内、外部状态，关注线程安全问题 使程序逻辑变得复杂"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"享元模式的内部状态和外部状态","slug":"享元模式的内部状态和外部状态","link":"#享元模式的内部状态和外部状态","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"享元模式在源码中的体现","slug":"享元模式在源码中的体现","link":"#享元模式在源码中的体现","children":[{"level":3,"title":"String中的享元模式","slug":"string中的享元模式","link":"#string中的享元模式","children":[]},{"level":3,"title":"Integer中的享元模式","slug":"integer中的享元模式","link":"#integer中的享元模式","children":[]}]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":2.65,"words":795},"filePathRelative":"writings/pattern/flyweight.md","localizedDate":"2023年3月1日","excerpt":"<h1> 享元模式</h1>\\n<p>定义：提供了减少对象数量从而改善应用所需的对象结构的方式，是对象池的一种实现。最典型的例子就是线程池，线程池可以避免不停地创建和销毁多个对象而导致性能的消耗</p>\\n<p>宗旨：共享细粒度对象，将多个对同一个对象的访问集中起来</p>\\n<p>适用场景：系统有大量相似对象、需要缓存池</p>\\n<p>优点：</p>\\n<ol>\\n<li>减少对象的创建，降低内存中对象的数量，提高程序运行效率</li>\\n<li>减少内存之外的资源占用，如：连接池，每一个连接都和数据库有一个TCP连接，占用着网络资源</li>\\n</ol>\\n<p>缺点：</p>\\n<ol>\\n<li>需要关注内、外部状态，关注线程安全问题</li>\\n<li>使程序逻辑变得复杂</li>\\n</ol>","autoDesc":true}');export{t as data};
