import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-NUm0icOp.js";const l={};function t(r,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="jvm-远程监控" tabindex="-1"><a class="header-anchor" href="#jvm-远程监控"><span>JVM 远程监控</span></a></h1><h2 id="jvm-可视化监控工具" tabindex="-1"><a class="header-anchor" href="#jvm-可视化监控工具"><span>JVM 可视化监控工具</span></a></h2><p>JDK 中提供了两款可视化监控工具：</p><ul><li>jconsole，可以查看当前 cpu、内存、类、线程的使用情况。</li><li>jvisualvm，与 jconsole 的功能差别不大，但是 jvisualvm 可以安装 Visual GC 插件，Visual GC 是常常使用的一个功能，可以明显的看到年轻代、老年代的内存变化，以及 gc 频率、gc 的时间等。关于 jvisualvm 的使用这一篇文章有简单介绍：<a href="https://mp.weixin.qq.com/s/tR6MzCg8lCC0vD6UtFu8LQ" target="_blank" rel="noopener noreferrer">这款 Java 性能调优的可视化工具，你真的会用吗</a></li></ul><h2 id="远程监控方式" tabindex="-1"><a class="header-anchor" href="#远程监控方式"><span>远程监控方式</span></a></h2><ul><li>jmx</li><li>jstatd</li></ul><h2 id="jmx" tabindex="-1"><a class="header-anchor" href="#jmx"><span>jmx</span></a></h2><p>如果需要使用 jmx 的远程监控的功能，那在程序启动的时候就需要加入必要的 vm 参数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># 开启 jmx 远程监控功能</span></span>
<span class="line"><span>-Dcom.sun.management.jmxremote</span></span>
<span class="line"><span># 配置提供远程服务的端口</span></span>
<span class="line"><span>-Dcom.sun.management.jmxremote.port=8777</span></span>
<span class="line"><span># 本地 jmx client 提供服务的端口</span></span>
<span class="line"><span>-Dcom.sun.management.jmxremote.rmi.port=8777</span></span>
<span class="line"><span># 关闭 jmx 远程服务 ssl 和认证功能</span></span>
<span class="line"><span>-Dcom.sun.management.jmxremote.authenticate=false</span></span>
<span class="line"><span>-Dcom.sun.management.jmxremote.ssl=false</span></span>
<span class="line"><span># jmx 默认是通过 localhost 的 ip 地址提供 RMI 服务的，需要明确指定 RMI 服务的地址</span></span>
<span class="line"><span>-Djava.rmi.server.hostname=192.168.1.90</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 java 程序启动命令中加入以上 vm 参数后，远程监控工具就可以通过 <code>&lt;远程主机名或 IP 地址&gt;:8777</code>+用户名密码或者<code>service:jmx:rmi:///jndi/rmi://&lt;远程主机名或 ip 地址&gt;:8777/jmxrmi</code> 远程连接 Java 应用进行监控了</p><h2 id="jstatd" tabindex="-1"><a class="header-anchor" href="#jstatd"><span>jstatd</span></a></h2><p>jstatd 是 jdk 中一个独立的工具，jvisualvm 只有使用 jstatd 连接才能使用 Visual GC 功能</p><p>使用 jstatd 连接需要指定一个策略文件<code>.policy</code></p><p><code>vi allpermission.policy</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grant</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  codebase</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;file:</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">home</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/lib/tools.jar&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# 表示开放所有权限</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	permission</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java.security.AllPermission</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用这个策略文件来启动 jstatd</p><p><code>jstatd -J-Djava.security.policy=allpermission.policy -J-Djava.rmi.server.hostname=192.168.1.90</code></p><p>jstatd 默认用一个 1099 端口，可以使用 <code>-nr -p 端口</code> 的方式修改 jstatd 尝试去连接的 rmi register 端口，另外还会使用一个随机的端口</p><h2 id="jmx-和-jstatd-区别" tabindex="-1"><a class="header-anchor" href="#jmx-和-jstatd-区别"><span>jmx 和 jstatd 区别</span></a></h2><ul><li>生命周期 <ul><li>jmx 的生命周期严格和 Java 程序的生命周期绑定，只要启动时没有加上 jmx 的配置项，那么就需要停止运行、加入 jmx 选项，重新启动，才能通过 jmx 的方式连接</li><li>jstatd 是 jdk 中一个独立的工具，所以他的生命周期也是相对独立的，当需要进行远程监控时，可以随时打开</li></ul></li><li>功能方面：只有通过 jstatd 连接才能使用 jvisualvm 中 visual gc 的功能</li><li>jstatd 端口：jstatd server 的端口是随机选择的，不能指定，只能指定尝试去连接的 rmi register 端口</li></ul><h2 id="docker-容器无法使用-jdk-命令的问题" tabindex="-1"><a class="header-anchor" href="#docker-容器无法使用-jdk-命令的问题"><span>docker 容器无法使用 JDK 命令的问题</span></a></h2><p>在容器中使用 jps 命令是可以正常返回的，看到各个 java 程序的进程 id。然而需要使用 jmap 命令打印堆栈信息时，提示了以下这个错误：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process: ptrace(PTRACE_ATTACH, ..) failed for 1: Operation not permitted</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个问题其实不是什么 bug，是 docker 的一个安全特性，类似于 jmap 这些 JDK 工具依赖于 Linux 的 PTRACE_ATTACH，而是 docker 自 1.10 版本后在默认的 seccomp 配置文件中禁用了 ptrace，所以 PTRACE 功能默认是关闭的。</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h3><p>主要的解决方向是把 SYS_PTRACE 功能打开，或者获取主机访问权限</p><ul><li><p>docker 命令行启动，根据上面的意思能得到两个启动语句，二选一执行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cap-add=SYS_PTRACE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --privileged</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>docker compose 启动，也可以根据解决方向得到两份 compose 文件：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tomcat:latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    cap_add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SYS_PTRACE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tomcat:latest</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 获取主机访问权限</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    privileged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>rancher 管理容器方式启动，获取主机访问权限，其实类似于 <code>-privileged</code> 选项：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221212163918.png" alt=""></p></li><li><p>K8S 启动方式：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Pod</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tomcat-2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  containers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tomcat-2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tomcat:latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    securityContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      capabilities</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SYS_PTRACE&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://www.jianshu.com/p/5a5972d821e1" target="_blank" rel="noopener noreferrer">jvisualvm 监控远程 jvm 的两种连接方式对比</a></p><p><a href="https://my.oschina.net/lik/blog/5583380" target="_blank" rel="noopener noreferrer">JVisualVM 远程连接 JVM 的两种方式---jstatd 方式含泪踩坑</a></p><p><a href="https://blog.51cto.com/u_12393361/5021517" target="_blank" rel="noopener noreferrer">Can‘t attach the process:ptrace(PTRACE_ATTACH)</a></p><p><a href="https://www.jb51.net/article/201427.htm" target="_blank" rel="noopener noreferrer">Docker 解决 openjdk 容器里无法使用 JDK 的 jmap 等命令问题</a></p><p><a href="https://jarekprzygodzki.wordpress.com/2016/12/19/jvm-in-docker-and-ptrace_attach/" target="_blank" rel="noopener noreferrer">JVM in Docker and PTRACE_ATTACH</a></p><p><a href="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities" target="_blank" rel="noopener noreferrer">Docker run reference | Docker Documentation</a></p><p><a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/" target="_blank" rel="noopener noreferrer">Configure a Security Context for a Pod or Container | Kubernetes</a></p>`,35)])])}const d=i(l,[["render",t]]),k=JSON.parse('{"path":"/writings/JVM/jvm-remote-monitor.html","title":"JVM 远程监控","lang":"zh-CN","frontmatter":{"title":"JVM 远程监控","icon":"note-sticky","category":["JVM"],"tag":["监控","调优"],"description":"JVM 远程监控 JVM 可视化监控工具 JDK 中提供了两款可视化监控工具： jconsole，可以查看当前 cpu、内存、类、线程的使用情况。 jvisualvm，与 jconsole 的功能差别不大，但是 jvisualvm 可以安装 Visual GC 插件，Visual GC 是常常使用的一个功能，可以明显的看到年轻代、老年代的内存变化，以及...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 远程监控\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221212163918.png\\"],\\"dateModified\\":\\"2025-09-07T08:25:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"],["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/JVM/jvm-remote-monitor.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"JVM 远程监控"}],["meta",{"property":"og:description","content":"JVM 远程监控 JVM 可视化监控工具 JDK 中提供了两款可视化监控工具： jconsole，可以查看当前 cpu、内存、类、线程的使用情况。 jvisualvm，与 jconsole 的功能差别不大，但是 jvisualvm 可以安装 Visual GC 插件，Visual GC 是常常使用的一个功能，可以明显的看到年轻代、老年代的内存变化，以及..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221212163918.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T08:25:53.000Z"}],["meta",{"property":"article:tag","content":"调优"}],["meta",{"property":"article:tag","content":"监控"}],["meta",{"property":"article:modified_time","content":"2025-09-07T08:25:53.000Z"}]]},"git":{"createdTime":1670838054000,"updatedTime":1757233553000,"contributors":[{"name":"wuyingbin","username":"wuyingbin","email":"yb.ng@foxmail.com","commits":1,"url":"https://github.com/wuyingbin"},{"name":"gelald","username":"gelald","email":"yb.ng@foxmail.com","commits":2,"url":"https://github.com/gelald"}]},"readingTime":{"minutes":3.63,"words":1088},"filePathRelative":"writings/JVM/jvm-remote-monitor.md","autoDesc":true}');export{d as comp,k as data};
