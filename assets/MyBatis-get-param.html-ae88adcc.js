const e=JSON.parse('{"key":"v-643f40d0","path":"/writings/MyBatis/MyBatis-get-param.html","title":"MyBatis 获取参数指南","lang":"zh-CN","frontmatter":{"title":"MyBatis 获取参数指南","icon":"article","category":["框架","文章"],"tag":["MyBatis","源码"],"description":"MyBatis 获取参数指南 MyBatis 是一个轻量级，性能出色的半 ORM 框架，支持定制化 SQL，SQL 和 Java 代码分开，功能边界清晰。Java 代码专注于业务、SQL 语句专注于数据操作。 接下来我们学习一下 MyBatis 框架中，Java 代码如何传递参数，SQL 语句如何获取接口参数。 ${} 和 #{} 的区别 在 MyBatis 中，SQL 语句获取参数一般用 ${} 和 #{} 这两种方式，这两种方式的区别在于： ${} 使用字符串拼接的方式拼接 SQL 语句，容易发生 SQL 注入，一般不用这种方式，同时也需要频繁手动添加单引号。 #{} 使用占位符赋值的方式拼接 SQL 语句，有效防止 SQL 注入，当参数是字符串类型和日期类型时，能自动添加单引号。","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/MyBatis/MyBatis-get-param.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"MyBatis 获取参数指南"}],["meta",{"property":"og:description","content":"MyBatis 获取参数指南 MyBatis 是一个轻量级，性能出色的半 ORM 框架，支持定制化 SQL，SQL 和 Java 代码分开，功能边界清晰。Java 代码专注于业务、SQL 语句专注于数据操作。 接下来我们学习一下 MyBatis 框架中，Java 代码如何传递参数，SQL 语句如何获取接口参数。 ${} 和 #{} 的区别 在 MyBatis 中，SQL 语句获取参数一般用 ${} 和 #{} 这两种方式，这两种方式的区别在于： ${} 使用字符串拼接的方式拼接 SQL 语句，容易发生 SQL 注入，一般不用这种方式，同时也需要频繁手动添加单引号。 #{} 使用占位符赋值的方式拼接 SQL 语句，有效防止 SQL 注入，当参数是字符串类型和日期类型时，能自动添加单引号。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:46:06.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:tag","content":"源码"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:46:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis 获取参数指南\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:46:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"${} 和 #{} 的区别","slug":"和-的区别","link":"#和-的区别","children":[{"level":3,"title":"SQL注入简介","slug":"sql注入简介","link":"#sql注入简介","children":[]}]},{"level":2,"title":"各种数据类型参数的获取方式","slug":"各种数据类型参数的获取方式","link":"#各种数据类型参数的获取方式","children":[{"level":3,"title":"推荐使用","slug":"推荐使用","link":"#推荐使用","children":[]}]},{"level":2,"title":"@Param 源码解读","slug":"param-源码解读","link":"#param-源码解读","children":[{"level":3,"title":"SqlSession","slug":"sqlsession","link":"#sqlsession","children":[]},{"level":3,"title":"MapperProxy","slug":"mapperproxy","link":"#mapperproxy","children":[]},{"level":3,"title":"MapperMethod","slug":"mappermethod","link":"#mappermethod","children":[]},{"level":3,"title":"ParamNameResolver","slug":"paramnameresolver","link":"#paramnameresolver","children":[]}]},{"level":2,"title":"使用 #{} 的特殊情况","slug":"使用-的特殊情况","link":"#使用-的特殊情况","children":[{"level":3,"title":"模糊查询","slug":"模糊查询","link":"#模糊查询","children":[]},{"level":3,"title":"where in","slug":"where-in","link":"#where-in","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1667902400000,"updatedTime":1677599166000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":2}]},"readingTime":{"minutes":8.61,"words":2583},"filePathRelative":"writings/MyBatis/MyBatis-get-param.md","localizedDate":"2022年11月8日","excerpt":"<h1> MyBatis 获取参数指南</h1>\\n<p>MyBatis 是一个轻量级，性能出色的半 ORM 框架，支持定制化 SQL，SQL 和 Java 代码分开，功能边界清晰。Java 代码专注于业务、SQL 语句专注于数据操作。</p>\\n<p>接下来我们学习一下 MyBatis 框架中，Java 代码如何传递参数，SQL 语句如何获取接口参数。</p>\\n<h2> ${} 和 #{} 的区别</h2>\\n<p>在 MyBatis 中，SQL 语句获取参数一般用 ${} 和 #{} 这两种方式，这两种方式的区别在于：</p>\\n<ul>\\n<li>\\n<p>${} 使用<strong>字符串拼接的方式</strong>拼接 SQL 语句，容易发生 SQL 注入，<strong>一般不用这种方式</strong>，同时也需要频繁手动添加单引号。</p>\\n</li>\\n<li>\\n<p>#{} 使用<strong>占位符赋值的方式</strong>拼接 SQL 语句，有效防止 SQL 注入，当参数是字符串类型和日期类型时，<strong>能自动添加单引号</strong>。</p>\\n</li>\\n</ul>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
