const n=JSON.parse('{"key":"v-a9ebce02","path":"/writings/Redis/Redis-distributed-lock.html","title":"Redis 分布式锁","lang":"zh-CN","frontmatter":{"description":"Redis 分布式锁 概念 jvm 同步锁 使用场景 与 zookeeper 分布式锁的对比 一步步分析如何在 Java 中使用 Redis 分布式锁 做法一 我们看网上的资料都说最基础的实现是使用 setnx 命令（set if not exist） @Slf4j @Component public class RedisLock { @Autowired private RedisTemplate&lt;String, Object&gt; redisTemplate; //锁的前缀名称 private static final String LOCK_PREFIX = \\"GET_LOCK\\"; //锁的过期时间，尽可能避免业务没有执行完锁就自动释放 private static final long EXPIRE_TIME = 300L; public void lock(String lockName) { String key = LOCK_PREFIX + lockName; \\t//加锁 Boolean lockSuccessfully = redisTemplate.opsForValue().setIfAbsent(key, value); if (Boolean.TRUE.equals(lockSuccessfully)) { try { log.info(\\" ************ Redis加锁成功：{} ************ \\", key); //设置过期时间，防止出现死锁，程序崩溃、服务器宕机都是不会释放锁的 redisTemplate.expire(key, EXPIRE_TIME, TimeUnit.SECONDS); //处理业务逻辑 log.info(\\"处理业务中\\"); TimeUnit.SECONDS.sleep(5); // *******业务逻辑处理结束****** // } catch (Exception e) { log.info(\\"业务处理过程中出现异常：{}\\", e.getMessage()); } finally { //加锁处理的逻辑完成，手动释放锁 redisTemplate.delete(key); log.info(\\" ************ Redis释放锁成功：{} ************ \\", key); } } else { log.info(\\"获取锁失败\\"); } } }","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Redis/Redis-distributed-lock.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Redis 分布式锁"}],["meta",{"property":"og:description","content":"Redis 分布式锁 概念 jvm 同步锁 使用场景 与 zookeeper 分布式锁的对比 一步步分析如何在 Java 中使用 Redis 分布式锁 做法一 我们看网上的资料都说最基础的实现是使用 setnx 命令（set if not exist） @Slf4j @Component public class RedisLock { @Autowired private RedisTemplate&lt;String, Object&gt; redisTemplate; //锁的前缀名称 private static final String LOCK_PREFIX = \\"GET_LOCK\\"; //锁的过期时间，尽可能避免业务没有执行完锁就自动释放 private static final long EXPIRE_TIME = 300L; public void lock(String lockName) { String key = LOCK_PREFIX + lockName; \\t//加锁 Boolean lockSuccessfully = redisTemplate.opsForValue().setIfAbsent(key, value); if (Boolean.TRUE.equals(lockSuccessfully)) { try { log.info(\\" ************ Redis加锁成功：{} ************ \\", key); //设置过期时间，防止出现死锁，程序崩溃、服务器宕机都是不会释放锁的 redisTemplate.expire(key, EXPIRE_TIME, TimeUnit.SECONDS); //处理业务逻辑 log.info(\\"处理业务中\\"); TimeUnit.SECONDS.sleep(5); // *******业务逻辑处理结束****** // } catch (Exception e) { log.info(\\"业务处理过程中出现异常：{}\\", e.getMessage()); } finally { //加锁处理的逻辑完成，手动释放锁 redisTemplate.delete(key); log.info(\\" ************ Redis释放锁成功：{} ************ \\", key); } } else { log.info(\\"获取锁失败\\"); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-21T00:03:30.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-06-21T00:03:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 分布式锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-21T00:03:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"一步步分析如何在 Java 中使用 Redis 分布式锁","slug":"一步步分析如何在-java-中使用-redis-分布式锁","link":"#一步步分析如何在-java-中使用-redis-分布式锁","children":[{"level":3,"title":"做法一","slug":"做法一","link":"#做法一","children":[]},{"level":3,"title":"做法二","slug":"做法二","link":"#做法二","children":[]}]},{"level":2,"title":"Redission 分布式锁的引入","slug":"redission-分布式锁的引入","link":"#redission-分布式锁的引入","children":[]}],"git":{"createdTime":1686827102000,"updatedTime":1687305810000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":2.46,"words":738},"filePathRelative":"writings/Redis/Redis-distributed-lock.md","localizedDate":"2023年6月15日","excerpt":"<h1> Redis 分布式锁</h1>\\n<p>概念</p>\\n<p>jvm 同步锁</p>\\n<p>使用场景</p>\\n<p>与 zookeeper 分布式锁的对比</p>\\n<h2> 一步步分析如何在 Java 中使用 Redis 分布式锁</h2>\\n<h3> 做法一</h3>\\n<p>我们看网上的资料都说最基础的实现是使用 <code>setnx</code> 命令（set if not exist）</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Slf4j</span>\\n<span class=\\"token annotation punctuation\\">@Component</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RedisLock</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token annotation punctuation\\">@Autowired</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">RedisTemplate</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> redisTemplate<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//锁的前缀名称</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">LOCK_PREFIX</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"GET_LOCK\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//锁的过期时间，尽可能避免业务没有执行完锁就自动释放</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">long</span> <span class=\\"token constant\\">EXPIRE_TIME</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">300L</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> lockName<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">String</span> key <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">LOCK_PREFIX</span> <span class=\\"token operator\\">+</span> lockName<span class=\\"token punctuation\\">;</span>\\n      \\t<span class=\\"token comment\\">//加锁</span>\\n        <span class=\\"token class-name\\">Boolean</span> lockSuccessfully <span class=\\"token operator\\">=</span> redisTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">opsForValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setIfAbsent</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">TRUE</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>lockSuccessfully<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\" ************ Redis加锁成功：{} ************ \\"</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//设置过期时间，防止出现死锁，程序崩溃、服务器宕机都是不会释放锁的</span>\\n                redisTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">expire</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">EXPIRE_TIME</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SECONDS</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//处理业务逻辑</span>\\n                log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"处理业务中\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SECONDS</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">// *******业务逻辑处理结束****** //</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"业务处理过程中出现异常：{}\\"</span><span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//加锁处理的逻辑完成，手动释放锁</span>\\n                redisTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\" ************ Redis释放锁成功：{} ************ \\"</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"获取锁失败\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{n as data};
