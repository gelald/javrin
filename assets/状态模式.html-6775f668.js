const e=JSON.parse('{"key":"v-fcb0e31a","path":"/writings/pattern/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html","title":"状态模式","lang":"zh-CN","frontmatter":{"description":"状态模式 定义：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类 核心：排除掉 if...else... 代码块，把对象的行为和状态绑定在一起，对应状态下只能有对应的行为 适用场景： 对象的行为随状态改变而改变 一个操作中含有庞大的多分支结构，并且这些分支取决于对象的状态 优点： 将独立的状态设置为类，消除了冗余的 if...else... 代码块 状态转换显示化：通常对象内部状态切换是通过赋不同的数值来表示，使用状态类让转换更加明确","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"状态模式"}],["meta",{"property":"og:description","content":"状态模式 定义：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类 核心：排除掉 if...else... 代码块，把对象的行为和状态绑定在一起，对应状态下只能有对应的行为 适用场景： 对象的行为随状态改变而改变 一个操作中含有庞大的多分支结构，并且这些分支取决于对象的状态 优点： 将独立的状态设置为类，消除了冗余的 if...else... 代码块 状态转换显示化：通常对象内部状态切换是通过赋不同的数值来表示，使用状态类让转换更加明确"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"状态模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"状态模式在源码中的体现","slug":"状态模式在源码中的体现","link":"#状态模式在源码中的体现","children":[]},{"level":2,"title":"状态模式和责任链模式的区别","slug":"状态模式和责任链模式的区别","link":"#状态模式和责任链模式的区别","children":[]},{"level":2,"title":"状态模式和策略模式的区别","slug":"状态模式和策略模式的区别","link":"#状态模式和策略模式的区别","children":[]},{"level":2,"title":"状态模式和代理模式的联系","slug":"状态模式和代理模式的联系","link":"#状态模式和代理模式的联系","children":[]},{"level":2,"title":"状态模式和委派模式的联系","slug":"状态模式和委派模式的联系","link":"#状态模式和委派模式的联系","children":[]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":3.25,"words":976},"filePathRelative":"writings/pattern/状态模式.md","localizedDate":"2023年3月1日","excerpt":"<h1> 状态模式</h1>\\n<p>定义：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类</p>\\n<p>核心：排除掉 <code>if...else...</code> 代码块，把对象的行为和状态绑定在一起，对应状态下只能有对应的行为</p>\\n<p>适用场景：</p>\\n<ol>\\n<li>对象的行为随状态改变而改变</li>\\n<li>一个操作中含有庞大的多分支结构，并且这些分支取决于对象的状态</li>\\n</ol>\\n<p>优点：</p>\\n<ol>\\n<li>将独立的状态设置为类，消除了冗余的 <code>if...else...</code> 代码块</li>\\n<li>状态转换显示化：通常对象内部状态切换是通过赋不同的数值来表示，使用状态类让转换更加明确</li>\\n</ol>","autoDesc":true}');export{e as data};
