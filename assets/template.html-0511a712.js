const t=JSON.parse('{"key":"v-7d1dc8a1","path":"/writings/pattern/template.html","title":"模板方法模式","lang":"zh-CN","frontmatter":{"title":"模板方法模式","icon":"article","category":["设计模式"],"description":"模板方法模式 定义：定义一个算法的骨架，并允许子类为其中的一个或多个步骤提供实现。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤 适用场景 一次性实现一个算法不变的部分，并将可变的行为留给子类来实现 各子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免代码重复 优点 利用模板方法将相同处理逻辑的代码放到抽象父类中，可以提高代码的复用性 将不同的代码放在不同的子类中，通过对子类的扩展来增加新的行为，提高代码的扩展性 把不变的行为写在父类，能有效去除子类的重复代码，提高代码复用性，符合开闭原则","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/template.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"模板方法模式"}],["meta",{"property":"og:description","content":"模板方法模式 定义：定义一个算法的骨架，并允许子类为其中的一个或多个步骤提供实现。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤 适用场景 一次性实现一个算法不变的部分，并将可变的行为留给子类来实现 各子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免代码重复 优点 利用模板方法将相同处理逻辑的代码放到抽象父类中，可以提高代码的复用性 将不同的代码放在不同的子类中，通过对子类的扩展来增加新的行为，提高代码的扩展性 把不变的行为写在父类，能有效去除子类的重复代码，提高代码复用性，符合开闭原则"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模板方法模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"钩子方法","slug":"钩子方法","link":"#钩子方法","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"模板方法模式在源码中的体现","slug":"模板方法模式在源码中的体现","link":"#模板方法模式在源码中的体现","children":[{"level":3,"title":"AbstractList","slug":"abstractlist","link":"#abstractlist","children":[]},{"level":3,"title":"HttpServlet","slug":"httpservlet","link":"#httpservlet","children":[]},{"level":3,"title":"MyBatis","slug":"mybatis","link":"#mybatis","children":[]}]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":3.62,"words":1087},"filePathRelative":"writings/pattern/template.md","localizedDate":"2023年3月1日","excerpt":"<h1> 模板方法模式</h1>\\n<p>定义：定义一个算法的骨架，并允许子类为其中的一个或多个步骤提供实现。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤</p>\\n<p>适用场景</p>\\n<ol>\\n<li>一次性实现一个算法不变的部分，并将可变的行为留给子类来实现</li>\\n<li>各子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免代码重复</li>\\n</ol>\\n<p>优点</p>\\n<ol>\\n<li>利用模板方法将相同处理逻辑的代码放到抽象父类中，可以提高代码的复用性</li>\\n<li>将不同的代码放在不同的子类中，通过对子类的扩展来增加新的行为，提高代码的扩展性</li>\\n<li>把不变的行为写在父类，能有效去除子类的重复代码，提高代码复用性，符合开闭原则</li>\\n</ol>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{t as data};
