import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-85442c0b.js";const t={},o=e(`<h1 id="springboot-开发中的一些问题总结" tabindex="-1"><a class="header-anchor" href="#springboot-开发中的一些问题总结" aria-hidden="true">#</a> SpringBoot 开发中的一些问题总结</h1><h2 id="springboot-时间格式化" tabindex="-1"><a class="header-anchor" href="#springboot-时间格式化" aria-hidden="true">#</a> SpringBoot 时间格式化</h2><p>在 Java 中时间格式化有两种方式：</p><ul><li><p><code>Date</code> 类型，使用 <code>SimpleDateFormat</code> 进行格式化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义时间格式化对象和格式化样式</span>
<span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 格式化时间对象</span>
<span class="token class-name">String</span> dateString <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>LocalDateTime</code> 类型，使用 <code>DateTimeFormatter</code> 进行格式化。推荐使用这种方式，因为 <code>DateTimeFormatter</code> 是线程安全的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义时间格式化对象和格式化样式</span>
<span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 格式化时间对象</span>
<span class="token class-name">String</span> dateString <span class="token operator">=</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>众所周知，Spring makes all simple ，在 SpringBoot 中有更优雅的格式化的方式</p><h3 id="全局时间格式化" tabindex="-1"><a class="header-anchor" href="#全局时间格式化" aria-hidden="true">#</a> 全局时间格式化</h3><p>如果项目的序列化工具使用 Spring 提供的 jackson，那么可以考虑使用这种方式，在符合需求的情况下可以“一劳永逸”</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
	<span class="token key atrule">jackson</span><span class="token punctuation">:</span>
		<span class="token comment"># 格式化时间字段</span>
		<span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss
		<span class="token comment"># 指定时区，我们身处于东八区</span>
		<span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Controller 在返回时，使用 jackson 序列化工具，对返回的数据进行统一的 JSON 格式化处理，所以这种方式一个很重要的前提条件就是<strong>项目使用 jackson 作为序列化工具</strong></p><h3 id="部分时间格式化" tabindex="-1"><a class="header-anchor" href="#部分时间格式化" aria-hidden="true">#</a> 部分时间格式化</h3><p>灵活与统一永远是一对长期的博弈，上面也提到了要一劳永逸也是要在符合需求的情况下，实际开发中难免会有多种时间格式的需求场景，Spring 提供了统一的配置方式，也提供了灵活的部分格式化的方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token comment">// 对 createTime 字段进行格式化处理、指定时区</span>
    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">&quot;GMT+8&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>
    <span class="token comment">// 对 updateTime 字段进行格式化处理、指定时区</span>
		<span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">&quot;GMT+8&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和上述方式一样，也是在 Controller 返回的时候，使用 jackson 序列化工具来进行统一的格式化处理，所以这种方式的前提也是<strong>项目使用 jackson 作为序列化工具</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>从 Java 的做法和 Spring 的做法可以看出，<strong>Spring 的做法更偏向于配置</strong>而不是开发，无需修改核心业务代码，只需要简单的配置一下，代码侵入度更低，维护起来更加友好。</p>`,15),p=[o];function c(i,l){return a(),s("div",null,p)}const d=n(t,[["render",c],["__file","SpringBoot-develop.html.vue"]]);export{d as default};
