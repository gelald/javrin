const n=JSON.parse('{"key":"v-e2637e18","path":"/writings/Java-base/generic.html","title":"泛型机制","lang":"zh-CN","frontmatter":{"title":"泛型机制","icon":"article","category":["Java基础"],"tag":["框架基础"],"description":"泛型机制 泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。 优点 适用于多种数据类型执行相同的代码，使用一个泛型封装所有相同的逻辑 private static int add(int a, int b) { System.out.println(a + \\"+\\" + b + \\"=\\" + (a + b)); return a + b; } private static float add(float a, float b) { System.out.println(a + \\"+\\" + b + \\"=\\" + (a + b)); return a + b; } private static double add(double a, double b) { System.out.println(a + \\"+\\" + b + \\"=\\" + (a + b)); return a + b; }","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Java-base/generic.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"泛型机制"}],["meta",{"property":"og:description","content":"泛型机制 泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。 优点 适用于多种数据类型执行相同的代码，使用一个泛型封装所有相同的逻辑 private static int add(int a, int b) { System.out.println(a + \\"+\\" + b + \\"=\\" + (a + b)); return a + b; } private static float add(float a, float b) { System.out.println(a + \\"+\\" + b + \\"=\\" + (a + b)); return a + b; } private static double add(double a, double b) { System.out.println(a + \\"+\\" + b + \\"=\\" + (a + b)); return a + b; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"框架基础"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"泛型的上下限","slug":"泛型的上下限","link":"#泛型的上下限","children":[]},{"level":2,"title":"深入理解泛型","slug":"深入理解泛型","link":"#深入理解泛型","children":[{"level":3,"title":"泛型擦除","slug":"泛型擦除","link":"#泛型擦除","children":[]},{"level":3,"title":"编译检查","slug":"编译检查","link":"#编译检查","children":[]}]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.82,"words":1447},"filePathRelative":"writings/Java-base/generic.md","localizedDate":"2023年2月28日","excerpt":"<h1> 泛型机制</h1>\\n<blockquote>\\n<p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p>\\n</blockquote>\\n<h2> 优点</h2>\\n<p>适用于多种数据类型执行相同的代码，使用一个泛型封装所有相同的逻辑</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"+\\"</span> <span class=\\"token operator\\">+</span> b <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"=\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">float</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">float</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">float</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"+\\"</span> <span class=\\"token operator\\">+</span> b <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"=\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">double</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"+\\"</span> <span class=\\"token operator\\">+</span> b <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"=\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{n as data};
