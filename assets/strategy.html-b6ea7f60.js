import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-859571d0.js";const p={},e=t(`<h1 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式" aria-hidden="true">#</a> 策略模式</h1><p>定义：将定义的算法家族分别封装起来，让它们之间可以互相替换，从而让算法的变化不会影响到使用算法的用户。可以避免多重分支的 <code>if else</code> 和 <code>switch</code> 语句</p><p>理解：策略模式使用的就是面向对象的继承和多态机制，从而实现同一行为在不同场景下具体不同的实现</p><p>适用场景：</p><ol><li>系统中有很多类，但他们的区别仅仅在于他们的行为不同</li><li>一个系统需要动态地在几种算法中选择一种</li></ol><p>优点：</p><ol><li>符合开闭原则</li><li>避免使用多重提交转换语句</li><li>提高算法的保密性和安全性，因为客户端无序依赖这些具体算法</li></ol><p>缺点：</p><ol><li>客户端可以不用具体依赖算法，但是必须知道所有的策略，并且自行决定使用哪一个</li><li>策略模式会来带更多的策略类，增加维护的难度</li></ol><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>策略模式在支付场景中尤为常见，现在就用促销优惠活动为例，优惠策略可能是：优惠券折扣、返现、拼团优惠</p><p>促销的抽象策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPromotionStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">doPromotion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认没有优惠的策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmptyStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">IPromotionStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPromotion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无优惠&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优惠券折扣策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">IPromotionStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPromotion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用优惠券抵扣&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返现策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CashbackStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">IPromotionStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPromotion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;返现，直接打款到支付宝账号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拼团优惠策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupbuyStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">IPromotionStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPromotion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5人成团，可以优惠&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合工厂模式来做一个选择策略的工厂，这个工厂缓存了所有的策略，提供两个方法，第一个是返回所有的策略名称以供客户端选择；第二个根据策略名来返回具体策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PromotionStrategyFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IPromotionStrategy</span><span class="token punctuation">&gt;</span></span> <span class="token constant">PROMOTIONS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IPromotionStrategy</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">IPromotionStrategy</span> <span class="token constant">DEFAULT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token constant">PROMOTIONS</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PromotionKey</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">PROMOTIONS</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PromotionKey</span><span class="token punctuation">.</span><span class="token constant">COUPON</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CouponStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">PROMOTIONS</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PromotionKey</span><span class="token punctuation">.</span><span class="token constant">CASHBACK</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CashbackStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">PROMOTIONS</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PromotionKey</span><span class="token punctuation">.</span><span class="token constant">GROUPBUY</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GroupbuyStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">PromotionStrategyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IPromotionStrategy</span> <span class="token function">getPromotionStrategy</span><span class="token punctuation">(</span><span class="token class-name">String</span> promotionKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">IPromotionStrategy</span> strategy <span class="token operator">=</span> <span class="token constant">PROMOTIONS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>promotionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> strategy <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token constant">DEFAULT</span> <span class="token operator">:</span> strategy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">PromotionKey</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> <span class="token constant">EMPTY</span> <span class="token operator">=</span> <span class="token string">&quot;EMPTY&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> <span class="token constant">COUPON</span> <span class="token operator">=</span> <span class="token string">&quot;COUPON&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> <span class="token constant">CASHBACK</span> <span class="token operator">=</span> <span class="token string">&quot;CASHBACK&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> <span class="token constant">GROUPBUY</span> <span class="token operator">=</span> <span class="token string">&quot;GROUPBUY&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPromotionKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">PROMOTIONS</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.获取所有的策略</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> promotionKeys <span class="token operator">=</span> <span class="token class-name">PromotionStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getPromotionKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.从中选择一种策略</span>
        <span class="token class-name">String</span> promotionKey <span class="token operator">=</span> <span class="token string">&quot;COUPON&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.从工厂中拿到具体策略</span>
        <span class="token class-name">IPromotionStrategy</span> promotionStrategy <span class="token operator">=</span> <span class="token class-name">PromotionStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getPromotionStrategy</span><span class="token punctuation">(</span>promotionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.执行策略</span>
        promotionStrategy<span class="token punctuation">.</span><span class="token function">doPromotion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="策略模式在源码中的体现" tabindex="-1"><a class="header-anchor" href="#策略模式在源码中的体现" aria-hidden="true">#</a> 策略模式在源码中的体现</h2><h3 id="jdk" tabindex="-1"><a class="header-anchor" href="#jdk" aria-hidden="true">#</a> JDK</h3><p>JDK 中有一个比较常见的比较器 <code>Comparator</code> 接口，其中用得最多的是 <code>compare()</code> 方法，就是一个策略抽象实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> o1<span class="token punctuation">,</span> <span class="token class-name">T</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Comparator</code> 有非常多的实现类，在具体使用的过程中经常会把它作为参数传入作为排序的策略</p><p>如 <code>Arrays</code> 的 <code>parallelSort()</code> 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Arrays</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">parallelSort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// ...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如 <code>TreeMap</code> 的构造方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeMap</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">NavigableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>comparator <span class="token operator">=</span> comparator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h3><p>Spring 中的初始化也采用了策略模式，<code>InstantiationStrategy</code> 定义了 bean 初始化的抽象策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InstantiationStrategy</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> <span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span> var1<span class="token punctuation">,</span> <span class="token class-name">String</span> var2<span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span> var3<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> <span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span> var1<span class="token punctuation">,</span> <span class="token class-name">String</span> var2<span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span> var3<span class="token punctuation">,</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> var4<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> var5<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> <span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span> var1<span class="token punctuation">,</span> <span class="token class-name">String</span> var2<span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span> var3<span class="token punctuation">,</span> <span class="token class-name">Object</span> var4<span class="token punctuation">,</span> <span class="token class-name">Method</span> var5<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> var6<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20211130223124.png" alt=""></p><p>有两个子类：<code>SimpleInstantiationStrategy</code> 和 <code>CglibSubclassingInstantiationStrategy</code> ，会根据用户的配置来选择这个策略，如果配置了 cglib ，那么优先选择 <code>CglibSubclassingInstantiationStrategy</code></p><h2 id="策略模式和委派模式的区别" tabindex="-1"><a class="header-anchor" href="#策略模式和委派模式的区别" aria-hidden="true">#</a> 策略模式和委派模式的区别</h2><p>最大的区别就是：策略模式一定是委派模式，委派模式不一定是策略模式。因为策略模式是通过上下文这个角色来让具体策略执行逻辑的；而委派模式可以使用策略模式，也可以手动写很多 <code>if...else...</code> 代码块</p>`,41),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","strategy.html.vue"]]);export{r as default};
