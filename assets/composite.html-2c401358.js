const e=JSON.parse('{"key":"v-81c09a20","path":"/writings/pattern/composite.html","title":"组合模式","lang":"zh-CN","frontmatter":{"title":"组合模式","icon":"article","category":["设计模式"],"description":"组合模式 定义：通过将单个对象（叶子结点）和组合对象（树枝结点）用相同的接口进行表示，使客户端对单个对象和组合对象保持一致的处理方式 组合关系与聚合关系的区别：组合关系中的各个部分具有相同的生命周期，如人体的器官；聚合关系中的各个部分具有独立的生命周期，如电脑中的鼠标、键盘 适用场景： 希望客户端可以忽略组合对象与单个对象的差异 对象具备整体和部分，呈树形结构（操作系统目录结构、公司组织架构等） 优点： 清楚地定义分层次的复杂对象，表示对象的全部或者部分层次 让客户端忽略层次的差异，方便对整个层级结构进行控制 符合开闭原则","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/composite.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"组合模式"}],["meta",{"property":"og:description","content":"组合模式 定义：通过将单个对象（叶子结点）和组合对象（树枝结点）用相同的接口进行表示，使客户端对单个对象和组合对象保持一致的处理方式 组合关系与聚合关系的区别：组合关系中的各个部分具有相同的生命周期，如人体的器官；聚合关系中的各个部分具有独立的生命周期，如电脑中的鼠标、键盘 适用场景： 希望客户端可以忽略组合对象与单个对象的差异 对象具备整体和部分，呈树形结构（操作系统目录结构、公司组织架构等） 优点： 清楚地定义分层次的复杂对象，表示对象的全部或者部分层次 让客户端忽略层次的差异，方便对整个层级结构进行控制 符合开闭原则"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组合模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"透明模式写法","slug":"透明模式写法","link":"#透明模式写法","children":[{"level":3,"title":"透明模式","slug":"透明模式","link":"#透明模式","children":[]},{"level":3,"title":"安全模式","slug":"安全模式","link":"#安全模式","children":[]},{"level":3,"title":"透明模式和安全模式的选择","slug":"透明模式和安全模式的选择","link":"#透明模式和安全模式的选择","children":[]}]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"组合模式在源码中的应用","slug":"组合模式在源码中的应用","link":"#组合模式在源码中的应用","children":[{"level":3,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[]},{"level":3,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[]},{"level":3,"title":"MyBatis","slug":"mybatis","link":"#mybatis","children":[]}]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":5.11,"words":1533},"filePathRelative":"writings/pattern/composite.md","localizedDate":"2023年3月1日","excerpt":"<h1> 组合模式</h1>\\n<p>定义：通过将单个对象（叶子结点）和组合对象（树枝结点）用相同的接口进行表示，使客户端对单个对象和组合对象保持一致的处理方式</p>\\n<p>组合关系与聚合关系的区别：组合关系中的各个部分具有相同的生命周期，如人体的器官；聚合关系中的各个部分具有独立的生命周期，如电脑中的鼠标、键盘</p>\\n<p>适用场景：</p>\\n<ol>\\n<li>希望客户端可以忽略组合对象与单个对象的差异</li>\\n<li>对象具备整体和部分，呈树形结构（操作系统目录结构、公司组织架构等）</li>\\n</ol>\\n<p>优点：</p>\\n<ol>\\n<li>清楚地定义分层次的复杂对象，表示对象的全部或者部分层次</li>\\n<li>让客户端忽略层次的差异，方便对整个层级结构进行控制</li>\\n<li>符合开闭原则</li>\\n</ol>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
