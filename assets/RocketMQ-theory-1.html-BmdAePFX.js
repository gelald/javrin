import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as e,a,e as i,d as o,w as n,r as p,o as c}from"./app-CsQTLbug.js";const d={};function h(g,t){const s=p("RouteLink");return c(),r("div",null,[t[9]||(t[9]=e("h1",{id:"rocketmq-原理分析-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rocketmq-原理分析-1"},[e("span",null,"RocketMQ 原理分析-1")])],-1)),t[10]||(t[10]=e("blockquote",null,[e("p",null,"本篇原理分析主要讲解消息原理方面")],-1)),t[11]||(t[11]=e("h2",{id:"rocketmq-如何保证消息不丢失-保证可靠性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rocketmq-如何保证消息不丢失-保证可靠性"},[e("span",null,"RocketMQ 如何保证消息不丢失/保证可靠性")])],-1)),t[12]||(t[12]=e("p",null,"消息在 RocketMQ 流转大概可以分为三个阶段：发送阶段、存储阶段、消费阶段，那么可靠性就要从这三个阶段考虑。",-1)),e("ul",null,[t[4]||(t[4]=e("li",null,[i("生产者发送消息时主要依靠"),e("strong",null,"发送确认"),i("来确保消息可靠性的。同步异步发送都可以获取到发送状态，通过这个发送状态来判断本次消息是否成功发送。另外，发送消息时还可以指定一个超时时间，如果超出这个超时时间可以再次发送。")],-1)),t[5]||(t[5]=e("li",null,[i("消费者消费消息时也存在一个"),e("strong",null,"消费确认机制"),i("，当消费者消费消息成功或失败都会给 Broker 返回消费状态，消费成功则结束本次流程；消费失败 Broker 则会重新发送消息。如果停电、宕机 Broker 都不会认为消费成功，也会继续重新投递。")],-1)),e("li",null,[t[1]||(t[1]=i("Broker 存储阶段保证消息不丢失的手段就是",-1)),t[2]||(t[2]=e("strong",null,"把消息记录到 CommitLog 中",-1)),t[3]||(t[3]=i("，保证消息不会丢失。关于消息刷盘在下篇会进一步剖析：",-1)),o(s,{to:"/docs/writings/RocketMQ/RocketMQ-theory-2.html"},{default:n(()=>[...t[0]||(t[0]=[i("RocketMQ 原理分析（下）",-1)])]),_:1})])]),t[13]||(t[13]=a('<p>关于保证成功记录到 CommitLog 有两种方式：</p><ul><li>同步刷盘，生产者把消息发送到 Broker 后，只有 Broker 成功地把消息写入到 CommitLog 后，才能给生产者返回发送成功的 ACK。这种方式可靠性更高，但是牺牲了效率。</li><li>异步刷盘，Broker 把消息写入到 CommitLog 采用后台异步线程刷盘的方式，刷盘完成后回调接口返回发送成功的 ACK。可以降低读写延迟，提高 RocketMQ 的吞吐量，但是当 Broker 宕机时会丢失部分未从内存中写入到文件的消息。</li></ul><h2 id="rocketmq-中消息重复的问题" tabindex="-1"><a class="header-anchor" href="#rocketmq-中消息重复的问题"><span>RocketMQ 中消息重复的问题</span></a></h2><p>在分布式消息队列中，同时确保消息不丢失和不重复是很难的，RocketMQ 选择了保证消息不丢失，消息重复的问题需要在业务端自行解决。</p><p>在 RocketMQ 中，造成消息重复的<strong>根本原因是网络波动</strong>，会导致消费者收到两条一样的消息。</p><p>RocketMQ 不保证消息不重复，如果要严格确保不重复，需要在业务端去重，可以使用如下手段：</p><ul><li>多次消费不影响：消费端的消息处理业务逻辑保证幂等性，这样无论消息消费多少次都对业务没有影响；</li><li>过滤重复消息：生产者发送时确保每一条消息都有唯一编号（业务相关的比如说是订单号），建立一个消费记录表，当拿到这个消息时保存到数据库，给这个消息做唯一约束，当出现重复消费时，唯一约束就不满足，那么就抛弃这条消息。</li></ul><h2 id="rocketmq-消息堆积问题" tabindex="-1"><a class="header-anchor" href="#rocketmq-消息堆积问题"><span>RocketMQ 消息堆积问题</span></a></h2><p>消息队列其中一个很重要的作用就是削峰，那么消息队列必然有一定的消息堆积能力来顶住请求的洪峰来保证后端服务的稳定性。</p><p>如果发生消息积压，这时候需要考虑如何让消费者提高消费能力，可以从以下情况考虑：</p><ul><li>如果 Queue 的数量大于消费者数量，这时需要做的是<strong>消费者扩容</strong>，默认消费模式是集群消费模式，消息会雨露均沾地发送给消费者，所以可以让消费者数量增加到和 Queue 的数量一致。</li></ul><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909153107.png" alt=""></p><ul><li>如果 Queue 的数量小于或等于消费者数量还发生大规模消息堆积时，这种情况无论再增加消费者数量，消费能力都不会提升，这时需要做的是<strong>消息迁移 Queue 扩容</strong>，具体做法是修改消费者逻辑，让消费者把这些消息使用一个临时的 Topic，这个 Topic 下建更多的 Queue，把原来的消息转发到这些 Queue 上，另外安排对应这个临时 Topic 的消费者来消费这些堆积的消息。</li></ul><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909155342.png" alt=""></p><h2 id="rocketmq-中顺序消息的问题" tabindex="-1"><a class="header-anchor" href="#rocketmq-中顺序消息的问题"><span>RocketMQ 中顺序消息的问题</span></a></h2><p>RocketMQ 的顺序消息包含两个层面，有顺序地生产消息以及有顺序地消费消息。有些业务场景下必须保证顺序，比如订单的生成、付款、发货，这个顺序是必须保证的。</p>',16)),e("p",null,[t[7]||(t[7]=i("RocketMQ 顺序消息可以分为全局有序以及分区有序，全局有序与分区有序的区别与落地在这篇文章中也适当介绍了：",-1)),o(s,{to:"/docs/writings/RocketMQ/RocketMQ-operation-client.html"},{default:n(()=>[...t[6]||(t[6]=[i("RocketMQ 操作落地 (rocketmq-client 方式)",-1)])]),_:1}),t[8]||(t[8]=i("。",-1))]),t[14]||(t[14]=a(`<p>全局有序消息</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909151552.png" alt=""></p><p>分区有序消息</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909151906.png" alt=""></p><p>如果要严格控制消息的顺序，那么生产者、queue、消费者最好都是一对一的关系，把整个流程中并发的部分全都消除了，各部分都设计成单线程工作。但是这样的设计，完全牺牲了 RocketMQ 高并发高吞吐的特性，也容易成为系统性能瓶颈。</p><p>但是全局有序导致性能低下的问题 RocketMQ 不打算解决，理由如下：</p><ul><li>乱序的应用实际上大量存在，系统中一般极少数情况需要对消息做严格的顺序；</li><li>消息在队列中无序，不代表最终消息也是无序的，可以使用其他手段来控制顺序。比如给消息打上标识顺序的标签，在业务层再处理顺序问题等。</li></ul><h2 id="rocketmq-延时消息原理" tabindex="-1"><a class="header-anchor" href="#rocketmq-延时消息原理"><span>RocketMQ 延时消息原理</span></a></h2><h3 id="schedule-topic-xxxx-介绍" tabindex="-1"><a class="header-anchor" href="#schedule-topic-xxxx-介绍"><span><code>SCHEDULE_TOPIC_XXXX</code> 介绍</span></a></h3><p><code>SCHEDULE_TOPIC_XXXX</code> 是 RocketMQ 一个系统类型的 Topic，用于标识延时消息。</p><p>这个 Topic 有 18 个队列，分别唯一对应着 RocketMQ 的 18 个延时等级，对应关系为：<strong>queueId = delayTimeLevel – 1</strong>。</p><h3 id="schedulemessageservice-介绍" tabindex="-1"><a class="header-anchor" href="#schedulemessageservice-介绍"><span><code>ScheduleMessageService</code> 介绍</span></a></h3><p>这是 Broker 中的一个延时服务，专门消费 Topic 为 <code>SCHEDULE_TOPIC_XXXX</code> 的延时消息，并将其投递到目标 Topic 中。</p><p><code>ScheduleMessageService</code> 在启动时，会创建一个定时器 Timer，并根据延迟级别的个数，启动对应数量的 TimerTask，每个 TimerTask 负责一个延迟级别的消费与投递。</p><h3 id="延时消息在-broker-的流转过程" tabindex="-1"><a class="header-anchor" href="#延时消息在-broker-的流转过程"><span>延时消息在 Broker 的流转过程</span></a></h3><p>生产者发送延时消息到 Broker，再到消费者消费的过程，消息将经过以下流转：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220830160040.png" alt=""></p><ol><li>Broker 把消息的 Topic 修改成<code>SCHEDULE_TOPIC_XXX</code>，然后根据本次消息的延时等级计算需要投递到的具体队列。同时还要把消息原来的 Topic 及其队列信息存储到消息的属性中，方便后面正确投递。</li><li>在从 CommitLog 把消息转发到 queue 的过程中，会计算这个延时消息需要在什么时候进行投递，<strong>投递时间=消息存储时间+延时等级对应的时间</strong>。</li><li>延时消费服务 <code>ScheduleMessageService</code> 消费这个延时消息。</li><li>从消息属性中取出并设置原来消息的 Topic 和队列信息，存储到 CommitLog. 此时这个消息已经完成延时，和普通消息没有区别，所以 ConsumeQueue 中的 Message Tag HashCode 需要重新计算消息 Tag 的哈希值再存储。</li><li>由于消息的 Topic 已经修改为原来的 Topic，所以直接投递到对应的队列中。</li><li>消费者消费这条消息。</li></ol><h2 id="rocketmq-事务消息原理" tabindex="-1"><a class="header-anchor" href="#rocketmq-事务消息原理"><span>RocketMQ 事务消息原理</span></a></h2><h3 id="实现事务消息核心" tabindex="-1"><a class="header-anchor" href="#实现事务消息核心"><span>实现事务消息核心</span></a></h3><ul><li>两阶段提交：第一阶段生产者发送 Half 消息到 Broker 来测试 RocketMQ 是否正常；Broker 只有在收到第二阶段的消息时，消费者才能对消息进行消费。</li><li>事务补偿机制：当 Broker 收到状态为 <code>unknown</code> 的消息或者由于网络波动、生产者宕机导致长时间没有收到第二阶段的提交时，Broker 会调用生产者接口来回查本次事务的状态。</li></ul><p>这两个核心是实现分布式事务最终一致性的关键。</p><h3 id="事务消息的流程" tabindex="-1"><a class="header-anchor" href="#事务消息的流程"><span>事务消息的流程</span></a></h3><blockquote><p>以支付订单后奖励积分为例，此时生产者是订单系统，消费者是积分系统，当积分系统收到订单系统传来订单支付成功，那么就给用户提供积分的奖励</p></blockquote><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220830164439.png" alt=""></p><ul><li>订单系统会发送一条 Half 消息到 RocketMQ 中，这个 Half 消息其实是一个代表订单成功支付的消息，只不过目前这个状态积分系统是无法感知这个消息的存在的。</li><li>如果发送 Half 消息后没有收到 MQ 的响应，那么可以认定 MQ 此时有问题，那么就在订单系统中回滚这笔订单，例如订单关闭或者发起退款。</li><li>如果收到 MQ 的响应，那么可以认定 MQ 是正常的，订单系统可以执行自己的本地事务，比如更新订单状态。</li><li>如果在处理自己系统的业务时，本地事务发生异常了，那么就发送一个 rollback 请求到 MQ 中，让 MQ 删除之前发送的 Half 消息；如果业务逻辑成功执行、本地事务成功提交，那么就发送一个 commit 请求到 MQ 中，MQ 收到 commit 请求后，之前的 Half 消息也就对积分系统可见了；如果业务逻辑的事务状态为 unknown ，那么 MQ 就会发起回查，回查生产者本地事务的状态。</li><li>假设由于网络波动、生产者重启导致事务消息的二次确认丢失，MQ 也有补偿措施，它会去扫描自己处于 Half 状态的消息，如果这个 MQ 一直没有接收到对这个 Half 消息的第二阶段的提交，会回调一个接口，让订单系统查询这个订单的状态，进而进行第二阶段的提交。所以这个回查的接口非常重要，要保证提交 commit 或者 rollback。</li></ul><h3 id="事务消息应用场景" tabindex="-1"><a class="header-anchor" href="#事务消息应用场景"><span>事务消息应用场景</span></a></h3><p>RocketMQ 事务消息保证的是<strong>数据的最终一致性</strong>，上游事务提交成功，下游事务最终只能成功，<strong>如果下游事务发生异常需要回滚，是无法回滚上游事务的</strong>。</p><p>RocketMQ 事务消息发送成功，那么意味着本地事务一定是执行成功的，他保证了事务消息和本地事务的强一致性。</p><p>如果要使用 RocketMQ 来解决分布式事务，一定要把成功率最高，异常率最低的事务放在下游。</p><h2 id="死信队列原理" tabindex="-1"><a class="header-anchor" href="#死信队列原理"><span>死信队列原理</span></a></h2><blockquote><p>死信队列用于处理无法被正常消费的消息，即死信消息。</p></blockquote><h3 id="死信消息的产生" tabindex="-1"><a class="header-anchor" href="#死信消息的产生"><span>死信消息的产生</span></a></h3><p>当一条消息在消费失败时，RocketMQ 消费者会自动对消息进行重试消费；当重试失败次数达到最大值依然是失败时，那么可以认为消费者在正常情况下是无法消费这个消息的。此时，RocketMQ 并不会立刻丢弃这个消息，而是将其发送到消费者对应的死信队列中。</p><p>死信消息放到死信队列中后不会再被原来的消费者消费，此时他的 Topic 变成了 <code>%DLQ%消费者组</code> ，需要使用另外的消费者来订阅消费这些死信消息。死信消息可以助于我们统计异常数据并做后续的数据修复处理。</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909105631.png" alt=""></p><p>默认的重试次数与重试间隔时间如下：</p><table><thead><tr><th>重试次数</th><th>重试间隔时间</th><th>重试次数</th><th>重试间隔时间</th></tr></thead><tbody><tr><td>1</td><td>10 秒</td><td>9</td><td>7 分钟</td></tr><tr><td>2</td><td>30 秒</td><td>10</td><td>8 分钟</td></tr><tr><td>3</td><td>1 分钟</td><td>11</td><td>9 分钟</td></tr><tr><td>4</td><td>2 分钟</td><td>12</td><td>10 分钟</td></tr><tr><td>5</td><td>3 分钟</td><td>13</td><td>20 分钟</td></tr><tr><td>6</td><td>4 分钟</td><td>14</td><td>30 分钟</td></tr><tr><td>7</td><td>5 分钟</td><td>15</td><td>1 小时</td></tr><tr><td>8</td><td>6 分钟</td><td>16</td><td>2 小时</td></tr></tbody></table><p>其中重试间隔时间可以通过修改 Broker 的配置文件的 messageDelayLevel 配置项来修改。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 消息重试16次分别间隔</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">messageDelayLevel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =1s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 30s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 2m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 4m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 7m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 9m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 20m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 30m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1h</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 2h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="死信队列的特点" tabindex="-1"><a class="header-anchor" href="#死信队列的特点"><span>死信队列的特点</span></a></h3><p>一个死信队列对应一个消费者组，不对应某一个消费者实例或 Topic。</p>`,42))])}const u=l(d,[["render",h]]),y=JSON.parse('{"path":"/writings/RocketMQ/RocketMQ-theory-1.html","title":"RocketMQ 原理分析-1","lang":"zh-CN","frontmatter":{"title":"RocketMQ 原理分析-1","icon":"article","category":["干货","消息队列"],"tag":["原理","RocketMQ"],"description":"RocketMQ 原理分析-1 本篇原理分析主要讲解消息原理方面 RocketMQ 如何保证消息不丢失/保证可靠性 消息在 RocketMQ 流转大概可以分为三个阶段：发送阶段、存储阶段、消费阶段，那么可靠性就要从这三个阶段考虑。 生产者发送消息时主要依靠发送确认来确保消息可靠性的。同步异步发送都可以获取到发送状态，通过这个发送状态来判断本次消息是否成...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ 原理分析-1\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909153107.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909155342.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909151552.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909151906.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220830160040.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220830164439.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909105631.png\\"],\\"dateModified\\":\\"2023-03-04T10:49:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"],["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/RocketMQ/RocketMQ-theory-1.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"RocketMQ 原理分析-1"}],["meta",{"property":"og:description","content":"RocketMQ 原理分析-1 本篇原理分析主要讲解消息原理方面 RocketMQ 如何保证消息不丢失/保证可靠性 消息在 RocketMQ 流转大概可以分为三个阶段：发送阶段、存储阶段、消费阶段，那么可靠性就要从这三个阶段考虑。 生产者发送消息时主要依靠发送确认来确保消息可靠性的。同步异步发送都可以获取到发送状态，通过这个发送状态来判断本次消息是否成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220909153107.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-04T10:49:34.000Z"}],["meta",{"property":"article:tag","content":"RocketMQ"}],["meta",{"property":"article:tag","content":"原理"}],["meta",{"property":"article:modified_time","content":"2023-03-04T10:49:34.000Z"}]]},"git":{"createdTime":1659693985000,"updatedTime":1677926974000,"contributors":[{"name":"wuyingbin","username":"wuyingbin","email":"yb.ng@foxmail.com","commits":5,"url":"https://github.com/wuyingbin"},{"name":"gelald","username":"gelald","email":"yb.ng@foxmail.com","commits":8,"url":"https://github.com/gelald"}]},"readingTime":{"minutes":10.39,"words":3116},"filePathRelative":"writings/RocketMQ/RocketMQ-theory-1.md","autoDesc":true}');export{u as comp,y as data};
