import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,a as l}from"./app-R_JIpTO7.js";const o={},c=l('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20201124094223951.png" alt="image-20201124094223951"></p><ul><li><p>工作区 ：就是你在电脑上看到的目录</p></li><li><p>暂存区 ：能够提交到版本库的文件、目录内容，所有要提交到版本库的内容都必须先从工作区添加到暂存区</p></li><li><p>版本库 ：就是 <code>.git</code> 目录。工作区有一个隐藏目录 <code>.git</code>，这不属于工作区，这是版本库。其中版本库里面存放了很多东西，其中最重要的就是 <code>stage(暂存区)</code>，还有 Git 为我们自动创建了第一个分支 master ，以及指向 master 的一个指针 HEAD(现在可以修改默认第一个分支名字叫 main 分支)</p></li></ul><h2 id="git-工作目录的状态" tabindex="-1"><a class="header-anchor" href="#git-工作目录的状态"><span>Git 工作目录的状态</span></a></h2><ul><li><p>untracked：未跟踪（未被纳入版本控制）</p></li><li><p>tracked：已跟踪（被纳入版本控制）</p><ul><li><p>Unmodified：未修改状态</p></li><li><p>Modified：已修改状态</p></li><li><p>Staged：已暂存状态</p></li></ul></li></ul><h3 id="修改状态" tabindex="-1"><a class="header-anchor" href="#修改状态"><span>修改状态</span></a></h3><ul><li><p>使用 <code>git add &lt;file&gt;</code> 将未跟踪状态的文件变成已暂存状态(加入暂存区)</p></li><li><p>使用 <code>git reset HEAD &lt;file&gt;</code> 将已暂存状态的文件(暂存区的文件)，回到原始状态(取消暂存)</p></li></ul><h2 id="本地操作" tabindex="-1"><a class="header-anchor" href="#本地操作"><span>本地操作</span></a></h2><ul><li><p>删除文件：<code>git rm &lt;file&gt;</code>，<strong>相当于删除文件+把修改添加到暂存区</strong></p></li><li><p>HEAD：这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交</p></li><li><p>建立本地仓库</p><ul><li><code>git init</code> 会在当前目录新建一个<code>.git</code>的隐藏文件夹</li></ul></li><li><p>查看是否有修改</p><ul><li><code>git status</code></li></ul></li><li><p>查看修改内容</p><ul><li><code>git diff 文件名</code></li></ul></li><li><p>把文件添加到暂存区</p><ul><li><code>git add 文件名</code></li></ul></li><li><p>把暂存区中修改的文件提交到版本库中</p><ul><li><code>git commit -m 本次提交的信息</code></li></ul></li><li><p>查看提交的历史记录</p><ul><li><code>git log</code></li></ul></li><li><p>撤销修改</p><ul><li><code>git checkout -- file</code><ul><li>还没放到暂存区，回到和版本库一摸一样的状态</li><li>已经放入暂存区再进行修改，回到暂存区的状态</li></ul></li></ul></li><li><p>回退版本</p><ul><li><code>git reset -hard HEAD^</code> 回退上一个版本</li><li><code>git reset -hard HEAD^^</code> 回退到上上个版本 回退的版本数由<code>^</code>的数目决定</li><li><code>git reset -hard HEAD~100</code> 回退前100个版本</li><li><code>git reset -hard 版本号</code> 回退到特定版本</li><li><code>git relog</code> 查看每一个版本的版本号</li></ul></li><li><p>关于撤销的操作</p><ul><li>撤销<strong>上一个</strong>提交到版本库的版本：<code>git reset --head HEAD^</code></li><li>撤销当前<strong>还没提交</strong>的文件：<code>git checkout --file</code></li><li>撤销<strong>已提交</strong>的文件：<code>git reset HEAD file</code></li></ul></li><li><p>创建分支</p><ul><li><code>git branch 分支名</code></li><li><code>git branch</code> 查看当前分支</li><li><code>git branch –d name</code> 删除分支</li></ul></li><li><p>切换分支</p><ul><li><code>git checkout 分支名</code></li></ul></li><li><p>合并分支</p><ul><li><code>git merge 分支名</code> 合并分支<strong>到当前分支</strong>上</li></ul></li><li><p>开发时一般流程</p><ul><li>创建dev分支：<code>git branch dev</code></li><li>切换dev分支：<code>git checkout dev</code></li><li>把改动从工作区放入暂存区：<code>git add .</code></li><li>把暂存区的改动提交到版本库：<code>git commit -m &quot;commit message&quot;</code></li><li>切换master分支：<code>git checkout master</code> 此时master的分支是没改动过的</li><li>把dev的改动合并到master分支：<code>git merge dev</code></li><li>接下来要么删除dev分支：<code>git branch -d dev</code></li><li>要么切换到dev分支继续开发：<code>git checkout dev</code></li></ul></li></ul><h3 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset"><span>git reset</span></a></h3><ul><li><code>git reset --soft commit_id</code>：commit_id之后的<strong>commit修改全部在暂存区中</strong>，<strong>本地当前的修改保留在工作区</strong></li><li><code>git reset --mixed commit_id</code>(默认)：commit_id之后的<strong>commit和本地修改全都放在工作区中</strong></li><li><code>git reset --hard commit_id</code>：commit_id之后的<strong>commit和本地修改全部移除</strong>，将项目的状态恢复到commit_id的状态。对于未追踪的文件没有影响(由始至终没有add过的文件)</li></ul><h3 id="git-revert" tabindex="-1"><a class="header-anchor" href="#git-revert"><span>git revert</span></a></h3><ul><li><code>git revert -e &lt;commit_id&gt;</code>：重做指定commit的<strong>提交信息</strong>，生成一个新的commit_id</li><li><code>git revert -n &lt;commit_id&gt;</code>：重做执行commit的<strong>代码修改</strong>，将commit_id中的修改，从本地仓库放回到index区，我们可以重新做修改并重新提交</li></ul><h3 id="reset和revert对比" tabindex="-1"><a class="header-anchor" href="#reset和revert对比"><span>reset和revert对比</span></a></h3><ul><li><code>git revert</code>是用一次新的commit来回滚之前的commit，此次提交之前的<strong>commit都会被保留不动</strong></li><li><code>git reset</code>是回到某次提交，提交及之前的commit都会被保留，但是此commit_id之后的<strong>修改都会被删除或放回工作区等待下一次提交</strong></li></ul><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库"><span>远程仓库</span></a></h2><ul><li><p>查看远程仓库：<code>git remote -v</code></p></li><li><p>关联已知本地库和远程库</p><ul><li><code> git remote add origin 远程库地址</code></li></ul></li><li><p>把当前分支推送到远程仓库</p><ul><li><code>git push</code></li><li><code>git push -u </code> 不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</li></ul></li><li><p>从远程仓库拉取、抓取</p><ul><li><code>git fetch</code>：抓取，从远程仓库获取最新版本到本地，不会自动merge</li><li><code>git pull</code>：拉取，从远程仓库获取最新版本并merge到本地</li></ul></li><li><p>从远程仓库克隆</p><ul><li><code>git clone &lt;url&gt;</code></li></ul></li><li><p>删除本地远程仓库的记录(不会真正删除远程仓库)</p><ul><li><code>git remote rm origin</code></li></ul></li></ul><h2 id="把错误的代码提交到代码库中" tabindex="-1"><a class="header-anchor" href="#把错误的代码提交到代码库中"><span>把错误的代码提交到代码库中</span></a></h2><h3 id="移除commit-保留commit的修改" tabindex="-1"><a class="header-anchor" href="#移除commit-保留commit的修改"><span>移除commit，保留commit的修改</span></a></h3><ol><li>使用<code>git log</code>命令获取当前分支下提交的commit_id。假设错误提交的commit_id为commit_id4，也就是说要将修改回滚到commit_id3</li><li>使用<code>git reset &lt;commit_id&gt;</code>命令将某个commit_id(commit_id3)后面的commit清除，并保留修改的代码在工作区<code>WorkSpace</code></li><li>修改代码</li><li>提交代码</li></ol><h3 id="修改中间的commit-对其他commit没有影响" tabindex="-1"><a class="header-anchor" href="#修改中间的commit-对其他commit没有影响"><span>修改中间的commit，对其他commit没有影响</span></a></h3><blockquote><p>在项目开发中，突然发现在前几次的提交中，有一次提交中包含一个bug；当然我们可以进行一个新的修改，然后再提交一次； 但是不优雅。</p><p>我们可以直接<strong>重做</strong>有bug的commit，git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。</p></blockquote><ol><li>使用<code>git log</code>命令获取当前分支下提交的commit_id</li><li>使用<code>git revert -n &lt;commit_id&gt;</code>命令将改动放回暂存区<code>index</code></li><li>修改代码</li><li>提交代码</li></ol><h3 id="发现某个文件修改错误了-想要将文件恢复到刚pull代码时的状态" tabindex="-1"><a class="header-anchor" href="#发现某个文件修改错误了-想要将文件恢复到刚pull代码时的状态"><span>发现某个文件修改错误了，想要将文件恢复到刚pull代码时的状态</span></a></h3><p>使用<code>git checkout -- &lt;file_name&gt;</code>命令，回滚到本地仓库中的状态</p><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支"><span>分支</span></a></h2><p><strong>查看分支</strong></p><ul><li>列出所有<strong>本地分支</strong>：<code>git branch</code></li><li>列出所有<strong>远程分支</strong>：<code>git branch -r</code></li><li>列出所有本地分支与远程分支：<code>git branch -a</code></li></ul><p><strong>创建分支</strong>：<code>git branch &lt;分支名&gt;</code></p><p><strong>切换分支</strong>：<code>git checkout &lt;分支名&gt;</code></p><p><strong>删除分支</strong></p><ul><li><p><strong>删除本地分支</strong>：<code>git branch -d &lt;分支名&gt;</code></p></li><li><p><strong>删除远程分支</strong>：<code>git push origin -d &lt;分支名&gt;</code></p></li></ul><h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签"><span>标签</span></a></h2><p>标签指的是某个分支特定时间点的状态，通常会使用标签来标记发布节点（1.0、1.2等）通过标签，可以很方便的切换到标记时的状态</p><ul><li><p>列出已有标签 ：<code>git tag</code></p></li><li><p>查看标签信息 ：<code>git show &lt;标签名&gt;</code></p></li><li><p>创建标签 ：<code>git tag &lt;标签名&gt;</code></p></li><li><p>推送标签 ：<code>git push origin &lt;标签名&gt;</code></p></li><li><p>删除标签 ：</p><ul><li><p>删除本地标签 ：<code>git tag -d &lt;标签名&gt;</code></p></li><li><p>删除远程标签 ：<code>git push origin :refs/tags/&lt;标签名&gt;</code></p></li></ul></li></ul>',36),d=[c];function r(a,g){return t(),e("div",null,d)}const m=i(o,[["render",r],["__file","Git.html.vue"]]),p=JSON.parse('{"path":"/writings/project-tools/Git.html","title":"Git基础知识","lang":"zh-CN","frontmatter":{"title":"Git基础知识","icon":"article","category":["干货","项目工具"],"tag":["Git","基础"],"description":"Git 概念 image-20201124094223951 工作区 ：就是你在电脑上看到的目录 暂存区 ：能够提交到版本库的文件、目录内容，所有要提交到版本库的内容都必须先从工作区添加到暂存区 版本库 ：就是 .git 目录。工作区有一个隐藏目录 .git，这不属于工作区，这是版本库。其中版本库里面存放了很多东西，其中最重要的就是 stage(暂存区...","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/project-tools/Git.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Git基础知识"}],["meta",{"property":"og:description","content":"Git 概念 image-20201124094223951 工作区 ：就是你在电脑上看到的目录 暂存区 ：能够提交到版本库的文件、目录内容，所有要提交到版本库的内容都必须先从工作区添加到暂存区 版本库 ：就是 .git 目录。工作区有一个隐藏目录 .git，这不属于工作区，这是版本库。其中版本库里面存放了很多东西，其中最重要的就是 stage(暂存区..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20201124094223951.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-30T16:45:09.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:modified_time","content":"2022-07-30T16:45:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git基础知识\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20201124094223951.png\\"],\\"dateModified\\":\\"2022-07-30T16:45:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"Git 工作目录的状态","slug":"git-工作目录的状态","link":"#git-工作目录的状态","children":[{"level":3,"title":"修改状态","slug":"修改状态","link":"#修改状态","children":[]}]},{"level":2,"title":"本地操作","slug":"本地操作","link":"#本地操作","children":[{"level":3,"title":"git reset","slug":"git-reset","link":"#git-reset","children":[]},{"level":3,"title":"git revert","slug":"git-revert","link":"#git-revert","children":[]},{"level":3,"title":"reset和revert对比","slug":"reset和revert对比","link":"#reset和revert对比","children":[]}]},{"level":2,"title":"远程仓库","slug":"远程仓库","link":"#远程仓库","children":[]},{"level":2,"title":"把错误的代码提交到代码库中","slug":"把错误的代码提交到代码库中","link":"#把错误的代码提交到代码库中","children":[{"level":3,"title":"移除commit，保留commit的修改","slug":"移除commit-保留commit的修改","link":"#移除commit-保留commit的修改","children":[]},{"level":3,"title":"修改中间的commit，对其他commit没有影响","slug":"修改中间的commit-对其他commit没有影响","link":"#修改中间的commit-对其他commit没有影响","children":[]},{"level":3,"title":"发现某个文件修改错误了，想要将文件恢复到刚pull代码时的状态","slug":"发现某个文件修改错误了-想要将文件恢复到刚pull代码时的状态","link":"#发现某个文件修改错误了-想要将文件恢复到刚pull代码时的状态","children":[]}]},{"level":2,"title":"分支","slug":"分支","link":"#分支","children":[]},{"level":2,"title":"标签","slug":"标签","link":"#标签","children":[]}],"git":{"createdTime":null,"updatedTime":1659199509000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":5.93,"words":1778},"filePathRelative":"writings/project-tools/Git.md","autoDesc":true}');export{m as comp,p as data};
