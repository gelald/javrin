import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a,o as i}from"./app-DVmJHiRi.js";const r={};function t(o,n){return i(),p("div",null,[...n[0]||(n[0]=[a('<h2 id="spring-是什么" tabindex="-1"><a class="header-anchor" href="#spring-是什么"><span>Spring 是什么</span></a></h2><p>Spring 是一个可以简化开发，低代码侵入的框架</p><p>Spring 所做的一切都是围绕简化开发开展的</p><h2 id="使用-spring-有什么好处" tabindex="-1"><a class="header-anchor" href="#使用-spring-有什么好处"><span>使用 Spring 有什么好处</span></a></h2><ol><li>简化开发</li><li>提供了许多解决方案：IoC、AOP、声明式事务管理</li><li>提供了许多围绕 Spring 生态的工具类：JdbcTemplate、BeanUtils</li></ol><p>Spring 5为 Spring Boot、Spring Cloud 奠定基础</p><ol><li>全面支持注解编程，具体体现在几乎不需要使用 xml 配置文件，使用大量的注解完成配置，使用 Spring Boot 一分钟内可以搭建一个 Web 项目</li><li>全面支持去 Servlet 化，具体体现在 Spring Boot 程序启动不需要外部的容器，直接内置了 Tomcat、Jetty 等 Servlet 容器</li><li>全面支持函数式编程</li><li>全面支持异步编程</li></ol><h2 id="beanfactory-和-applicationcontext的区别" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-applicationcontext的区别"><span>BeanFactory 和 ApplicationContext的区别</span></a></h2><ol><li>ApplicationContext 是 BeanFactory 的实现类</li><li>BeanFactory 是一个创建 Bean 的顶层设计；ApplicationContext 是提供给用户使用的门面，功能是更加全面的</li><li>真正 IoC 的实现是在 DefaultListableBeanFactory 中，但是有共同的接口</li></ol><h2 id="beanfactory-和-factorybean-的区别" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-factorybean-的区别"><span>BeanFactory 和 FactoryBean 的区别</span></a></h2><p>BeanFactory是IoC容器的顶层设计</p><p>FactoryBean是用于构建Bean的一个包装类</p><h2 id="spring、springmvc、springboot、springcloud之间的关系" tabindex="-1"><a class="header-anchor" href="#spring、springmvc、springboot、springcloud之间的关系"><span>Spring、SpringMVC、SpringBoot、SpringCloud之间的关系</span></a></h2><p>它们之间的关系</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220220111243.png" alt=""></p><ul><li><p>Spring 是轻量级的 Java 开发框架，负责创建各种 Bean 实例，并维护着 Bean 与 Bean 之间的关系。其中有两个核心的功能：IoC 控制反转、AOP 面向切面，另外还为开发提供很多全面的基础架构支持，包含很多开箱即用的模块，如：SpringJDBC、SpringSecurity，极大提高应用开发效率。</p></li><li><p>SpringMVC 是 Spring 的 Web 框架，SpringMVC 是用于解决前台页面和后台逻辑处理之间的映射关系。SpringMVC 是一个请求驱动的框架，由一个中央 Servlet (<code>DispatcherServlet</code>) 将请求分派给具体控制器并提供其他功能以促进 Web 开发。同时与 Spring IoC 容器完全集成，因此允许使用 Spring 的其他功能。</p></li><li><p>SpringBoot 是 Spring 的升级框架，得益于 <code>Starter</code> 和 <code>AutoConfiguration</code> 的设计，遵循<strong>约定大于配置</strong>的原则，简化配置流程，通过简单的 jar 包引入，大大提高了开发效率。同时 SpringBoot 把 Servlet 容器集成到框架中，如 Tomcat、Jetty 等，在开发时不用再手动配置这些容器的路径，简化操作。SpringBoot 相对于 SpringMVC 来说，更推崇前后端分离，更专注于后端接口的开发。</p></li><li><p>SpringCloud 是一个基于 SpringBoot 的微服务框架。分布式的时代，系统之间需要打通、组成集群，从而具备更大的吞吐能力。把单体项目拆分成多个微服务，每个微服务尽心独立的开发、部署。为了降低各微服务系统的差异化接入成本，所以通常基于 SpringBoot 构建微服务系统。</p><p>SpringCloud 关注微服务整合、管理的服务治理框架，<strong>具有生态定位</strong>。提供丰富的组件框架，如：服务注册、发现；服务间调用；网关；配置中心；断路器等等。</p></li></ul><p>Spring：Spring已有的生态，能支持我们日常开发的所有功能</p><p>Spring Boot：进一步简化Spring的开发工作，原因是一系列的配置文件，难以更新、维护。SpringBoot内置了默认的配置，我们需要配置的往往是需要覆盖的配置，配置简单了。内置各种Servlet容器，能够自运行，部署也简单了。官方提供了一套脚手架，一键搭建，节省时间。</p><p>Spring Cloud：帮助项目从单体架构转变为分布式架构。注册中心、监控、配置中心、负载均衡、熔断。目的是为了打造一个生态，提供一站式分布式的解决方案。</p><hr><h2 id="spring-中的-bean-是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#spring-中的-bean-是线程安全的吗"><span>Spring 中的 Bean 是线程安全的吗</span></a></h2><p>不一定，因为 Spring 中的 Bean 是根据配置信息（xml、注解）来反射创建的，然后缓存到 IoC 容器中，Spring 中的 Bean 的线程安全性是由开发人员决定的，Spring 只是负责创建工作。</p><p>回答这个问题，需要先搞清楚导致 Bean 线程不安全的原因，Spring 只是负责 Bean 的创建工作，没有对 Bean 进行多线程的封装，所以导致一个对象是线程不安全的原因是：这个 Bean 具有<strong>数据存储</strong>功能，线程中的操作对 Bean 的成员执行了查询以外的操作。</p><ul><li><p>假如这个数据存储功能是一个普通成员变量，这时候要对 Bean 的作用域进行分类讨论</p><ul><li><p>如果这个 Bean 是原型作用域，每次使用都创建一个新对象，不存在各线程共享 Bean 的情况，那么这个 Bean 是线程安全的</p></li><li><p>如果这个 Bean 是单例作用域，所有线程都共享同一个实例，那就会存在资源的竞争，那么这个 Bean 不是线程安全的</p></li></ul></li><li><p>假如这个数据存储功能是一个静态成员变量，那么无论是单例还是原型作用域的 Bean ，都是线程不安全的。</p></li></ul><h2 id="spring-bean-各作用域区别" tabindex="-1"><a class="header-anchor" href="#spring-bean-各作用域区别"><span>Spring Bean 各作用域区别</span></a></h2><p>singleton：默认，单例，在任何地方都可以通过 IoC 容器拿到</p><p>prototype：</p><p>request：作用域在一次请求发起和结束之间</p><p>session：作用域在一个session创建和session失效之间</p><h2 id="解释-spring-bean-的生命周期" tabindex="-1"><a class="header-anchor" href="#解释-spring-bean-的生命周期"><span>解释 Spring Bean 的生命周期</span></a></h2><p>Bean 的生命周期包括：创建、调用、销毁。</p><ul><li>如果 Bean 的作用域是 singleton <ul><li>如果 Bean 不是延时加载的，那么 IoC 容器会一直持有它的引用，而 IoC 容器和 Spring 是共进退的。所以这个 Bean 会随着 Spring 的启动而创建，因为是单例，所以每次调用都用的同一个对象，最后随着 Spring 的停止而销毁。</li><li>如果 Bean 是延时加载的，那么 Bean 的创建是在调用之前创建，调用时每次都使用同一个对象，最后随着 Spring 的停止而销毁。</li></ul></li><li>如果 Bean 的作用域是 prototype <ul><li>原型作用域下，每次使用 Bean 都会创建新对象。所以 Bean 在调用前创建，调用后销毁。</li></ul></li></ul><h2 id="spring-中的-bean-是如何被回收的" tabindex="-1"><a class="header-anchor" href="#spring-中的-bean-是如何被回收的"><span>Spring 中的 Bean 是如何被回收的</span></a></h2><p>Spring 中的 Bean 的回收问题和这个 Bean 的作用域相关</p><ul><li><p>当这个 Bean 的作用域是单例时（默认情况）</p><blockquote><p>只要这个 Bean 存在 IoC 容器中，那么 IoC 容器就一直持有它的引用；并且 IoC 容器和 Spring 上下文是共进退的；所以这个 Bean 在程序运行中一直是处于可达的状态，不会进行回收；只有当程序结束时才会连同 IoC 容器一并被回收</p></blockquote></li><li><p>当这个 Bean 的作用域时原型时</p><blockquote><p>只要这个 Bean 需要使用，就会新创建一个；使用完就抛弃，抛弃后这个 Bean 就处于不可达的状态，会进行回收；所以只要这个 Bean 使用完成后，就会进行回收</p></blockquote></li></ul><h2 id="项目中如何应用aop" tabindex="-1"><a class="header-anchor" href="#项目中如何应用aop"><span>项目中如何应用AOP</span></a></h2><p>声明式事务管理、日志监听、权限管理</p><h2 id="spring-使用了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#spring-使用了哪些设计模式"><span>Spring 使用了哪些设计模式</span></a></h2><p>工厂模式：BeanFactory</p><p>单例模式（容器式单例）</p><p>原型模式</p><p>代理模式（动态代理）：AOP</p><p>享元模式：</p><p>门面模式：ApplicationContext</p><p>适配器模式</p><p>委派模式：DispathcerServlet</p><p>责任链模式：AOP</p><p>解释器模式：MVC</p>',48)])])}const s=e(r,[["render",t]]),c=JSON.parse('{"path":"/writings/Spring/interview-summary.html","title":"Spring 面试题总结","lang":"zh-CN","frontmatter":{"title":"Spring 面试题总结","icon":"article","category":["框架"],"tag":["Spring/SpringBoot","面试题"],"description":"Spring 是什么 Spring 是一个可以简化开发，低代码侵入的框架 Spring 所做的一切都是围绕简化开发开展的 使用 Spring 有什么好处 简化开发 提供了许多解决方案：IoC、AOP、声明式事务管理 提供了许多围绕 Spring 生态的工具类：JdbcTemplate、BeanUtils Spring 5为 Spring Boot、Sp...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 面试题总结\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220220111243.png\\"],\\"dateModified\\":\\"2023-02-28T15:46:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"],["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Spring/interview-summary.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Spring 面试题总结"}],["meta",{"property":"og:description","content":"Spring 是什么 Spring 是一个可以简化开发，低代码侵入的框架 Spring 所做的一切都是围绕简化开发开展的 使用 Spring 有什么好处 简化开发 提供了许多解决方案：IoC、AOP、声明式事务管理 提供了许多围绕 Spring 生态的工具类：JdbcTemplate、BeanUtils Spring 5为 Spring Boot、Sp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220220111243.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:46:06.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:tag","content":"Spring/SpringBoot"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:46:06.000Z"}]]},"git":{"createdTime":1659199509000,"updatedTime":1677599166000,"contributors":[{"name":"gelald","username":"gelald","email":"yb.ng@foxmail.com","commits":3,"url":"https://github.com/gelald"}]},"readingTime":{"minutes":6.27,"words":1880},"filePathRelative":"writings/Spring/interview-summary.md","autoDesc":true}');export{s as comp,c as data};
