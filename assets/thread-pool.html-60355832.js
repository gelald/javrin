const e=JSON.parse('{"key":"v-540b31d5","path":"/writings/concurrency/thread-pool.html","title":"线程池基本概念","lang":"zh-CN","frontmatter":{"title":"线程池基本概念","icon":"article","isOriginal":true,"category":["并发"],"tag":["线程池","原理"],"description":"线程池 线程池引入 在 Java 中，我们一般通过继承 Thread 类和实现 Runnnable 接口，调用线程的 start() 方法实现线程的启动。但如果并发的数量很多，而且每个线程都是执行很短的时间便结束了，那样频繁的创建线程和销毁进程会大大的降低系统运行的效率。 线程池正是为了解决多线程效率低的问题而产生的，通过管理一组工作线程使得线程可以被复用，线程执行结束后不被销毁，而是可以继续执行其他任务。在高并发环境下，系统资源是宝贵的，需要节约资源才能提高可用性。","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/concurrency/thread-pool.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"线程池基本概念"}],["meta",{"property":"og:description","content":"线程池 线程池引入 在 Java 中，我们一般通过继承 Thread 类和实现 Runnnable 接口，调用线程的 start() 方法实现线程的启动。但如果并发的数量很多，而且每个线程都是执行很短的时间便结束了，那样频繁的创建线程和销毁进程会大大的降低系统运行的效率。 线程池正是为了解决多线程效率低的问题而产生的，通过管理一组工作线程使得线程可以被复用，线程执行结束后不被销毁，而是可以继续执行其他任务。在高并发环境下，系统资源是宝贵的，需要节约资源才能提高可用性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:46:06.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"线程池"}],["meta",{"property":"article:tag","content":"原理"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:46:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池基本概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:46:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"线程池引入","slug":"线程池引入","link":"#线程池引入","children":[]},{"level":2,"title":"ThreadPoolExecutor","slug":"threadpoolexecutor","link":"#threadpoolexecutor","children":[{"level":3,"title":"重要参数","slug":"重要参数","link":"#重要参数","children":[]},{"level":3,"title":"创建线程池","slug":"创建线程池","link":"#创建线程池","children":[]},{"level":3,"title":"执行流程","slug":"执行流程","link":"#执行流程","children":[]},{"level":3,"title":"为什么阿里巴巴规范明确说不允许使用 Executors 创建线程池","slug":"为什么阿里巴巴规范明确说不允许使用-executors-创建线程池","link":"#为什么阿里巴巴规范明确说不允许使用-executors-创建线程池","children":[]}]},{"level":2,"title":"线程池参数","slug":"线程池参数","link":"#线程池参数","children":[{"level":3,"title":"按线程池类型来简单划分线程池大小","slug":"按线程池类型来简单划分线程池大小","link":"#按线程池类型来简单划分线程池大小","children":[]}]}],"git":{"createdTime":1659199509000,"updatedTime":1677599166000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":2},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":9.28,"words":2783},"filePathRelative":"writings/concurrency/thread-pool.md","localizedDate":"2022年7月30日","excerpt":"<h1> 线程池</h1>\\n<h2> 线程池引入</h2>\\n<p>在 Java 中，我们一般通过继承 <code>Thread</code> 类和实现 <code>Runnnable</code> 接口，调用线程的 <code>start()</code> 方法实现线程的启动。但如果并发的数量很多，而且每个线程都是执行很短的时间便结束了，那样<strong>频繁的创建线程和销毁进程会大大的降低系统运行的效率</strong>。</p>\\n<p>线程池正是为了解决多线程效率低的问题而产生的，通过管理一组工作线程使得线程可以被复用，线程执行结束后不被销毁，而是可以继续执行其他任务。在高并发环境下，系统资源是宝贵的，需要节约资源才能提高可用性。</p>","autoDesc":true}');export{e as data};
