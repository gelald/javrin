import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-859571d0.js";const p={},t=e(`<h1 id="建造者模式" tabindex="-1"><a class="header-anchor" href="#建造者模式" aria-hidden="true">#</a> 建造者模式</h1><p>定义：将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示</p><p>适用场景：</p><ol><li>创建对象需要很多步骤，但是步骤的顺序不一定固定</li><li>创建的对象有非常复杂的内部结构（很多属性）</li><li>把复杂对象的创建和使用分离</li></ol><p>优点：</p><ol><li><p>封装性好，创建和使用分离</p></li><li><p>扩展性好，实体和建造类之间一定程度上解耦</p></li></ol><p>缺点：</p><ol><li><p>产生多余的 <code>Builder</code> 对象</p></li><li><p>产品内部发生改变，建造者的逻辑也要同步修改，成本较大</p></li></ol><h2 id="链式编程" tabindex="-1"><a class="header-anchor" href="#链式编程" aria-hidden="true">#</a> 链式编程</h2><p>建造者模式一般会采用<strong>链式</strong>编程</p><p>核心：建造者类持有实体，修改实体属性的方法<strong>需要返回自身</strong></p><p>以订单为例<code>Order.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Double</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订单的建造者<code>OrderBuilder.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderBuilder</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token class-name">OrderBuilder</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">OrderBuilder</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">OrderBuilder</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>order<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">static</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">OrderBuilder</span> orderBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token number">9800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> orderBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="建造者模式在源码中的体现" tabindex="-1"><a class="header-anchor" href="#建造者模式在源码中的体现" aria-hidden="true">#</a> 建造者模式在源码中的体现</h2><h3 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder" aria-hidden="true">#</a> StringBuilder</h3><p><code>StringBuilder</code>中的<code>append</code>方法，每次拼接字符串后会返回自身对象</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210917222313.png" alt=""></p><h3 id="beandefinitionbuilder" tabindex="-1"><a class="header-anchor" href="#beandefinitionbuilder" aria-hidden="true">#</a> BeanDefinitionBuilder</h3><p>Spring中的<code>BeanDefinitionBuilder</code>也使用到了建造者模式，最终通过<code>getBeanDefinition</code>方法返回<code>beanDefinition</code></p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210917223035.png" alt=""></p><h2 id="建造者模式与工厂模式的区别" tabindex="-1"><a class="header-anchor" href="#建造者模式与工厂模式的区别" aria-hidden="true">#</a> 建造者模式与工厂模式的区别</h2><ul><li>建造者模式不仅要创建出对象，还需要了解这个对象由哪些部分组成，工厂模式只需要把对象创建出来即可</li><li>建造者模式可以根据实际需求定制不一样的对象，工厂模式创建出来的对象都是统一的</li><li>建造者更关注构建过程的定制，工厂模式更关注构建类型的结果</li></ul>`,26),c=[t];function i(o,l){return s(),a("div",null,c)}const r=n(p,[["render",i],["__file","builder.html.vue"]]);export{r as default};
