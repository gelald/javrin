import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,d as e,e as l}from"./app-859571d0.js";const i={},r=l(`<h1 id="spring-中的拦截器与过滤器" tabindex="-1"><a class="header-anchor" href="#spring-中的拦截器与过滤器" aria-hidden="true">#</a> Spring 中的拦截器与过滤器</h1><blockquote><p>在 SpringBoot 的 Web 项目开发中，如果想实现拦截、过滤的功能，大概会有三种做法：Filter 过滤器、Interceptor 拦截器、AOP 切面编程，而我们今天要讨论的是 Filter 与 Interceptor 的做法及它们之间的区别。</p></blockquote><h2 id="filter-过滤器" tabindex="-1"><a class="header-anchor" href="#filter-过滤器" aria-hidden="true">#</a> Filter 过滤器</h2><p>Filter 是 Servlet 中用于拦截请求、过滤请求的一个接口。在以前，我们通常会使用 Filter 来拦截请求设置请求的字符集、判断用户是否登陆、校验权限等等。</p><p>其工作原理和核心配置文件 <code>web.xml</code> 息息相关，在配置文件中我们会配置过滤器的名称，以及它过滤的 URL 规则。配置好后，符合过滤规则的请求就会先来到过滤器这里执行 Filter 中的逻辑，以及判断是否能进行下一步的流转。</p><p>虽然使用原生的 Servlet 开发的时代大概率已经过去，但是 Servlet 却是 Web 开发基础中的基础，所以 Filter 接口也是能适用于 SpringBoot 项目的。</p><h3 id="filter-方法简单介绍" tabindex="-1"><a class="header-anchor" href="#filter-方法简单介绍" aria-hidden="true">#</a> Filter 方法简单介绍</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>

  	<span class="token comment">//Servlet容器（如Tomcat）在初始化这个Filter时调用，一般用于初始化一些资源</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  	<span class="token comment">//这个方法是具体执行过滤器逻辑的方法</span>
  	<span class="token comment">//另外chain变量是过滤器链，可以使用这个变量来决定这个请求是否可以向下流转</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span>
            <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>

  	<span class="token comment">//Servlet容器（如Tomcat）在关闭前会销毁Filter，一般用于资源的释放</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springboot-中添加-filter" tabindex="-1"><a class="header-anchor" href="#springboot-中添加-filter" aria-hidden="true">#</a> SpringBoot 中添加 Filter</h3><p>SpringBoot 项目中添加 Filter 的步骤主要包括 Filter 定义与注册，添加的方式有 3 种，下面一一做展示</p><ul><li><p>方式一：使用 <code>@WebFilter</code> 注解 + <code>@ServletComponentScan</code> 注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 过滤器</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>one</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">&quot;filter-one&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/bad/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterOne</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//执行Filter逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是Filter过滤器1号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//让请求继续进入Filter链的下一个节点</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 启动类</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.example.demo.filter.one&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootDemoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式二：使用 <code>FilterRegistrationBean</code> 来注册一般过滤器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 过滤器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterTwo</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//执行Filter逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是Filter过滤器2号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//让请求继续进入Filter链的下一个节点</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 配置类</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FilterTwo</span><span class="token punctuation">&gt;</span></span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FilterTwo</span> filterTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FilterTwo</span><span class="token punctuation">&gt;</span></span> filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filterTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置过滤器名、过滤规则</span>
        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;filter-two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/bad/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式三：使用 <code>DelegatingFilterProxyRegistrationBean</code> 注册已被 Spring 管理的过滤器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 过滤器</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterThree</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//执行Filter逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是Filter过滤器3号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//让请求继续进入Filter链的下一个节点</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 配置类</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DelegatingFilterProxyRegistrationBean</span> <span class="token function">delegatingFilterProxyRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DelegatingFilterProxyRegistrationBean</span> delegatingFilterProxyRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingFilterProxyRegistrationBean</span><span class="token punctuation">(</span><span class="token string">&quot;filterThree&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        delegatingFilterProxyRegistrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;filter-three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        delegatingFilterProxyRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/bad/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> delegatingFilterProxyRegistrationBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="filter-原理" tabindex="-1"><a class="header-anchor" href="#filter-原理" aria-hidden="true">#</a> Filter 原理</h3><h4 id="简单介绍一下三种做法的-filter-注册原理" tabindex="-1"><a class="header-anchor" href="#简单介绍一下三种做法的-filter-注册原理" aria-hidden="true">#</a> 简单介绍一下三种做法的 Filter 注册原理</h4><ul><li>方式一，SpringBoot 在启动时，<code>ServletComponentScanRegistrar</code> 类实现了 <code>ImportBeanDefinitionRegistrar</code> 接口，负责把 <code>@ServletComponentScan</code> 中的包路径传递给 <code>ServletComponentRegisteringPostProcessor</code> 类，<code>ServletComponentRegisteringPostProcessor</code> 实现了 <code>BeanFactoryPostProcessor</code> 接口，在调用 <code>postProcessBeanFactory()</code> 方法时，使用 <code>WebServletHandler</code> 、<code>WebFilterHandler</code>、<code>WebListenerHandler</code> 一个个对比，符合条件就调用 <code>doHandle()</code> 方法来把 Filter 作为 <code>FilterRegistrationBean</code> 类型的 Bean 注册到 Spring IoC 容器中。</li><li>方式二和方式三差异不大 <ul><li>相同点，无论是 <code>FilterRegistrationBean</code> 还是 <code>DelegatingFilterProxyRegistrationBean</code>，他们都是实现了 <code>ServletContextInitializer</code> 接口的，在调用 <code>onStartup()</code> 方法时，抽象基类 <code>AbstractFilterRegistrationBean</code> 会调用 <code>addRegistration()</code> 方法，这个方法就是根据两个子类中返回的 Filter ，添加到 Spring IoC 容器中。</li><li>不同点，<code>DelegatingFilterProxyRegistrationBean</code> 通过传入的 targetBeanName 名字,在 Spring IoC 容器中查找该 Fillter 类型的 Bean，并通过 <code>DelegatingFilterProxy</code> 生成基于这个 Bean 的代理 Filter 对象；而 <code>FilterRegistrationBean</code> 则是直接设置一个 Filter ，因此这个 Filter 可以由 Spring IoC 容器管理，也可不用管理。<strong>如果一个 Filter 被声明为一个 Bean，而不通过 <code>DelegatingFilterProxyRegistrationBean</code> 添加到 Spring IoC 容器中，那么这个过滤器是无法添加过滤规则的，全局适用。</strong></li></ul></li></ul><h4 id="filter-在请求中的工作流程" tabindex="-1"><a class="header-anchor" href="#filter-在请求中的工作流程" aria-hidden="true">#</a> Filter 在请求中的工作流程</h4><p>在一次请求里，Filter 不是独立工作，而是以 FilterChain 过滤链的形式来进行过滤，每次请求都根据 URL 的匹配规则来找到符合规则的 Filter ，组装成一条过滤链，请求经过过滤链后才能到达 <code>DispatcherServlet</code></p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230410161437.png" alt=""></p><p>这个 <code>ApplicationFilterChain</code> 在整个过滤器的工作链路中是一个核心角色，在 <code>createFilterChain()</code> 方法中，会按顺序地添加符合规则的过滤器，组建成一条过滤器链交给 <code>StandardWrapperValve</code>，在调用过滤器逻辑时，直接拿这条过滤器链来做过滤，过滤器中维护了过滤器的顺序，接下来的逻辑就是各个 <code>Filter</code> 的过滤逻辑。执行完各个过滤器后，如果这个请求都通过了过滤，那么最终会来到 <code>DispatcherServlet</code> 中。</p><h2 id="handlerinterceptor-拦截器" tabindex="-1"><a class="header-anchor" href="#handlerinterceptor-拦截器" aria-hidden="true">#</a> HandlerInterceptor 拦截器</h2><p>拦截器是 Spring 中的内容，它依赖于 Spring 容器，能从 Spring 容器中获取其他 Bean；拦截器提供了更加细颗粒度的拦截功能，更能体现 AOP 思想。</p><h3 id="handlerinterceptor-方法简单介绍" tabindex="-1"><a class="header-anchor" href="#handlerinterceptor-方法简单介绍" aria-hidden="true">#</a> HandlerInterceptor 方法简单介绍</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

  	<span class="token comment">//在请求被处理前（到达Controller前）进行处理，如果返回false，那么请求不往下进行</span>
    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
  	<span class="token comment">//在请求被处理后（执行完Controller逻辑后）进行处理</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
  
  	<span class="token comment">//在页面渲染结束后执行，一般用于资源释放</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springboot-中添加-handlerinterceptor" tabindex="-1"><a class="header-anchor" href="#springboot-中添加-handlerinterceptor" aria-hidden="true">#</a> SpringBoot 中添加 HandlerInterceptor</h3><p>与 Filter 类似，添加 HandlerInterceptor 的步骤也分为两步，定义与注册</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 拦截器</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerInterceptorOne</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求到Controller前-执行 HandlerInterceptor 逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Controller执行完后-执行 HandlerInterceptor 逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;返回视图前-执行 HandlerInterceptor 逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 配置类</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">HandlerInterceptorOne</span> handlerInterceptorOne<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//这册拦截器</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>handlerInterceptorOne<span class="token punctuation">)</span>
                <span class="token comment">//设置拦截的路径</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/bad/*&quot;</span><span class="token punctuation">)</span>
                <span class="token comment">//设置不拦截的路径（排除这些路径）</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/bad/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="handlerinterceptor-原理" tabindex="-1"><a class="header-anchor" href="#handlerinterceptor-原理" aria-hidden="true">#</a> HandlerInterceptor 原理</h3><p><code>HandlerInterceptor</code> 的工作与 <code>Filter</code> 差别不大，先往容器里注册拦截器，当请求来到 <code>DispatcherServlet</code> 时，调用 <code>getHandler()</code> 方法根据请求的 URL 从容器中取出 URL 符合拦截规则的拦截器，组装成一条拦截器链 <code>HandlerExecutionChain</code> 。然后 <code>DispatcherServlet</code> 按照 <code>preHandle</code> -&gt; <code>handle(Controller)</code> -&gt; <code>postHandle</code> -&gt; <code>afterCompletion</code> 的顺序往下执行。</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230411234815.png" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>虽然两者名字上、功能上都颇为相似，但他们还是有部分区别的：</p><ul><li><p>从执行顺序上看：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20230705105632.png" alt=""></p><p>Filter 是 Servlet 容器接收到请求后，但是在调用 Servlet 被调用执行前执行的；而 Interceptor 是 Servlet 被调用后，在请求到达 Controller 前执行的</p></li><li><p>从拦截粒度来看：Filter 只能对 request、response 进行拦截；Interceptor 不仅可以对 request、response 进行操作，也可以对 handler、modelAndView 进行操作，具备了对 SpringMVC 组件的操作能力</p></li><li><p>从依赖从属来看：Filter 依赖于 Servlet 容器；而 Interceptor 不依赖于 Servlet，依赖于 Spring 框架</p></li></ul><p>综上所述，在基于 SpringBoot 的项目开发中，如果有需要对请求拦截处理的场景，Filter 和 HandlerInterceptor两者之间，<strong>优先选择 HandlerInterceptor</strong></p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,33),u={href:"https://blog.csdn.net/sfwqwfew/article/details/129014345",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.jianshu.com/p/3d421fbce734",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.cnblogs.com/HelloWxl/p/16597273.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/top_code/article/details/69367823",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[n("a",u,[a("springboot 中 HandlerInterceptor和Filter区别及使用"),e(s)])]),n("p",null,[n("a",d,[a("关于springboot中添加Filter的方法"),e(s)])]),n("p",null,[n("a",k,[a("【Springboot】拦截器"),e(s)])]),n("p",null,[n("a",v,[a("Spring MVC HandlerInterceptor 实现原理（源码）"),e(s)])])])}const f=t(i,[["render",m],["__file","filter-and-interceptor.html.vue"]]);export{f as default};
