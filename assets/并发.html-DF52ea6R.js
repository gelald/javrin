import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as n}from"./app-D62f3oGG.js";const e={},l=n(`<h1 id="并发编程" tabindex="-1"><a class="header-anchor" href="#并发编程"><span>并发编程</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><h3 id="程序-进程-线程" tabindex="-1"><a class="header-anchor" href="#程序-进程-线程"><span>程序/进程/线程</span></a></h3><ul><li>程序：程序是数据和指令的集合（代码），是一个静态的概念，能长时间保存在硬盘中</li><li>进程：进程是程序运行的过程，是一个动态的概念，具有生命周期，会随着程序的终止而销毁。它是<strong>系统资源分配的最小单位</strong></li><li>线程：线程是操作系统能够进行<strong>程序执行的最小单位</strong>，是进程中的实际运作单位</li><li>进程之间的交互通过TCP/IP+端口实现</li><li>线程之间的交互通过共享的内存空间来进行交互</li></ul><h3 id="串行-并行-并发" tabindex="-1"><a class="header-anchor" href="#串行-并行-并发"><span>串行/并行/并发</span></a></h3><ul><li><p>串行：一个程序完整运行完之后再运行下一个</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210818113802.png" alt="串行模式图"></p></li><li><p>并行：在一个时间段内，多个CPU同时执行多个程序</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210818113917.png" alt="并行模式图"></p></li><li><p>并发：在一个时间段内，一个CPU在多个程序之间来回切换执行多个程序</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210818114124.png" alt="并发模式图"></p></li><li><p>并发数：系统同时能处理的请求数量，同样反应了系统的负载能力</p></li></ul><h3 id="同步-异步" tabindex="-1"><a class="header-anchor" href="#同步-异步"><span>同步/异步</span></a></h3><ul><li><p>同步/异步 关注的是<strong>消息通信机制</strong></p></li><li><p>同步：在发出一个调用时，在没有得到结果之前， 该调用就不返回</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doSomeThing</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>异步：在一个调用发出后，这个调用就结束了，先不返回结果，使用回调函数的方式返回结果</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doSomeThing</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>阻塞/非阻塞</p><ul><li><p>阻塞/非阻塞 关注的是程序在<strong>等待调用结果时的状态</strong></p></li><li><p>阻塞：在调用结果返回之前，当前线程会被挂起。当前线程只有在得到结果之后才能继续干其他事情</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] buffer) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(磁盘未就绪) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        将当前线程挂起并让出 CPU</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 此时磁盘已就绪</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    真正去读数据到 buffer 中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 读到的字节数</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>非阻塞：在不能得到结果之前，该调用不会阻塞当前线程，该线程可以转向干其他事情</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] buffer) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(磁盘未就绪) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 立刻返回</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    真正去读数据到 buffer 中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 读到的字节数</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>自己理解的 「同步、异步、阻塞、非阻塞」</p><ul><li>同步/异步 关心的重点在于调用者需不需要等待结果返回，有结果才返回(同步)；先不返回结果，等回调函数来返回(异步)</li><li>阻塞/非阻塞 关心的重点在于调用者发起调用后的行为，需要将线程挂起等待当前结果后才能干其他事情(阻塞)，不需要等待结果，立刻返回一个未就绪等信息然后进行下一步操作(非阻塞)</li><li><strong>至于这个函数被调用者用同步还是异步的方式调用，都不影响这个函数本身是阻塞还是非阻塞的性质</strong></li></ul><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20200924161447432.png" alt="老张喝茶的例子"></p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20200924161525136.png" alt="解释例子中的同步、异步、阻塞、非阻塞"></p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20200924161347691.png" alt="解释例子中的同步、异步、阻塞、非阻塞"></p><h3 id="qps-tps" tabindex="-1"><a class="header-anchor" href="#qps-tps"><span>QPS/TPS</span></a></h3><ul><li>QPS： <code>Queries Per Second</code> 每秒查询率。是<strong>一台服务器</strong>每秒能够响应的<strong>查询</strong>次数，是对一个特定的查询服务器<strong>在规定时间内</strong>所处理流量多少的衡量标准，即每秒的响应请求数，也即是最大吞吐能力</li><li>TPS：<code>Transactions Per Second</code> 每秒事务数。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数</li><li>QPS和TPS的不同点：QPS类似TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入QPS之中</li></ul><h3 id="pv" tabindex="-1"><a class="header-anchor" href="#pv"><span>PV</span></a></h3><ul><li>PV：<code>Page View</code> 页面访问量。页面浏览量或点击量，用户每次刷新即被计算一次。可以统计服务一天的访问日志得到</li></ul><h2 id="并发编程的问题" tabindex="-1"><a class="header-anchor" href="#并发编程的问题"><span>并发编程的问题</span></a></h2><h3 id="上下文切换" tabindex="-1"><a class="header-anchor" href="#上下文切换"><span>上下文切换</span></a></h3><p>任务执行完一个时间片会切换下一个任务，切换时会保存上一个任务的状态，以便于下一次切换回来，<strong>一个任务从保存状态到再加载的过程</strong>就是一次上下文切换</p><p>上下文切换有开销，并发量小，串行的时间会比并行的时间还短</p><h4 id="减少上下文切换的方法" tabindex="-1"><a class="header-anchor" href="#减少上下文切换的方法"><span>减少上下文切换的方法</span></a></h4><ol><li>无锁并发编程 <ul><li>如：不同线程处理不同范围的数据，可以有效避开锁的问题</li></ul></li><li>CAS算法</li><li>使用最少线程 <ul><li>大量线程执行少量任务会导致大量线程处于等待状态</li></ul></li><li>使用协程 <ul><li>在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换</li></ul></li></ol><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h3><h4 id="避免死锁的常见方法" tabindex="-1"><a class="header-anchor" href="#避免死锁的常见方法"><span>避免死锁的常见方法</span></a></h4><ol><li>避免一个线程同时获取多个锁</li><li>避免一个线程在锁内同时占用多个资源，<strong>尽量保证每个锁只占用一个资源</strong></li><li>尝试使用定时锁，使用<code>lock.tryLock(timeout)</code>来替代使用内部锁机制</li><li>对于<strong>数据库锁</strong>，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况</li></ol><h3 id="资源限制" tabindex="-1"><a class="header-anchor" href="#资源限制"><span>资源限制</span></a></h3><p>在进行并发编程时，程序的执行速度受限于计算机硬件资源或软件资源。硬件资源限制有带宽的上传/下载速度、硬盘读写速度和CPU的处理速度。软件资源限制有数据库的连接 数和socket连接数等</p><p>例如，服务器的带宽只有2Mb/s，某个资源的下载速度是1Mb/s每秒，系统启动10个线程下载资 源，下载速度不会变成10Mb/s</p><p>并发因为受限于资源，仍然会在串行执行，这时候程序不仅不会加快执行，反而会更慢，因为增加了上下文切换和资源调度的时间</p><h4 id="解决资源限制的问题" tabindex="-1"><a class="header-anchor" href="#解决资源限制的问题"><span>解决资源限制的问题</span></a></h4><ol><li>对于硬件资源限制，可以考虑使用服务器集群并行执行程序</li><li>对于软件资源限制，可以考虑使用资源池将资源复用。比如使用连接池将数据库和Socket 连接复用，或者在调用对方webservice接口获取数据时，只建立一个连接</li><li>根据不同的资源限制调整 程序的并发度</li></ol><h2 id="底层实现原理" tabindex="-1"><a class="header-anchor" href="#底层实现原理"><span>底层实现原理</span></a></h2>`,35),t=[l];function h(p,r){return a(),s("div",null,t)}const g=i(e,[["render",h],["__file","并发.html.vue"]]),c=JSON.parse('{"path":"/writings/archive/%E5%B9%B6%E5%8F%91.html","title":"并发编程","lang":"zh-CN","frontmatter":{"description":"并发编程 基本概念 程序/进程/线程 程序：程序是数据和指令的集合（代码），是一个静态的概念，能长时间保存在硬盘中 进程：进程是程序运行的过程，是一个动态的概念，具有生命周期，会随着程序的终止而销毁。它是系统资源分配的最小单位 线程：线程是操作系统能够进行程序执行的最小单位，是进程中的实际运作单位 进程之间的交互通过TCP/IP+端口实现 线程之间的交...","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/archive/%E5%B9%B6%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"并发编程"}],["meta",{"property":"og:description","content":"并发编程 基本概念 程序/进程/线程 程序：程序是数据和指令的集合（代码），是一个静态的概念，能长时间保存在硬盘中 进程：进程是程序运行的过程，是一个动态的概念，具有生命周期，会随着程序的终止而销毁。它是系统资源分配的最小单位 线程：线程是操作系统能够进行程序执行的最小单位，是进程中的实际运作单位 进程之间的交互通过TCP/IP+端口实现 线程之间的交..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210818113802.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-30T16:21:52.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2022-07-30T16:21:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发编程\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210818113802.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210818113917.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210818114124.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20200924161447432.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20200924161525136.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/image-20200924161347691.png\\"],\\"dateModified\\":\\"2022-07-30T16:21:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"程序/进程/线程","slug":"程序-进程-线程","link":"#程序-进程-线程","children":[]},{"level":3,"title":"串行/并行/并发","slug":"串行-并行-并发","link":"#串行-并行-并发","children":[]},{"level":3,"title":"同步/异步","slug":"同步-异步","link":"#同步-异步","children":[]},{"level":3,"title":"QPS/TPS","slug":"qps-tps","link":"#qps-tps","children":[]},{"level":3,"title":"PV","slug":"pv","link":"#pv","children":[]}]},{"level":2,"title":"并发编程的问题","slug":"并发编程的问题","link":"#并发编程的问题","children":[{"level":3,"title":"上下文切换","slug":"上下文切换","link":"#上下文切换","children":[]},{"level":3,"title":"死锁","slug":"死锁","link":"#死锁","children":[]},{"level":3,"title":"资源限制","slug":"资源限制","link":"#资源限制","children":[]}]},{"level":2,"title":"底层实现原理","slug":"底层实现原理","link":"#底层实现原理","children":[]}],"git":{"createdTime":null,"updatedTime":1659198112000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":5.79,"words":1737},"filePathRelative":"writings/archive/并发.md","autoDesc":true}');export{g as comp,c as data};
