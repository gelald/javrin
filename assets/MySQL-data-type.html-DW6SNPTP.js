import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as d,o as r}from"./app-Svu5x8lo.js";const n={};function l(s,t){return r(),e("div",null,[...t[0]||(t[0]=[d('<h1 id="mysql-数据类型" tabindex="-1"><a class="header-anchor" href="#mysql-数据类型"><span>MySQL 数据类型</span></a></h1><p>MySQL 中主要包含 5 大类的数据类型，分别是整数型、小数型、字符串型、日期型、其他类型。</p><h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h2><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><p>参考：<a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html" target="_blank" rel="noopener noreferrer">MySQL :: MySQL 8.0 Reference Manual :: 11.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT</a></p><table><thead><tr><th>数据类型</th><th>字节数</th><th>范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1个字节</td><td>有符号：0~2<sup>8</sup>-1<br>无符号：-2<sup>7</sup>~2<sup>7</sup>-1</td></tr><tr><td>SMALLINT</td><td>2个字节</td><td>有符号：0~2<sup>16</sup>-1<br>无符号：-2<sup>15</sup>~2<sup>15</sup>-1</td></tr><tr><td>MEDIUMINT</td><td>3个字节</td><td>有符号：0~2<sup>24</sup><br>无符号：-2<sup>23</sup>~2<sup>23</sup>-1</td></tr><tr><td>INT</td><td>4个字节</td><td>有符号：0~2<sup>32</sup><br>无符号：-2<sup>31</sup>~2<sup>31</sup>-1</td></tr><tr><td>BIGINT</td><td>8个字节</td><td>有符号：0~2<sup>64</sup><br>无符号：-2<sup>63</sup>~2<sup>63</sup>-1</td></tr></tbody></table><h3 id="显示宽度" tabindex="-1"><a class="header-anchor" href="#显示宽度"><span>显示宽度</span></a></h3><p>我们经常能看见 INT(11) 的写法，其中括号内的数值是这个字段最大可能显示的数字个数，显示宽度只和展示有关，和数值范围无关。当打开 zerofill 选项时，当数值的位数小于指定的宽度时会由 0 填充存入。比如定义了 INT(3) 字段并打开以零填充，存入了一个6，最终显示 006。这个功能在开发过程中，意义不大。</p><h3 id="和-java-类型对应" tabindex="-1"><a class="header-anchor" href="#和-java-类型对应"><span>和 Java 类型对应</span></a></h3><p><strong>这里只讨论无符号的情况，有符号需要按数值范围来调整</strong></p><ul><li>一般来说TINYINT、SMALLINT、MEDIUMINT、INT 都可以用 <code>java.lang.Integer</code> 来对应，因为 <code>Integer</code> 用 4 个字节存储数据</li><li>BINGINT 由于超出 4 个字节，所以需要用 <code>java.lang.Long</code> 来对应</li><li><strong><code>java.lang.Boolean</code> 类型变量可以用 TINYINT 类型的字段</strong>，MySQL 里有四个常量：true、false、TRUE、FALSE 分别代表 1、0、1、0。MySQL 保存 boolean 值时用 1 代表 TRUE，0 代表 FALSE</li></ul><h2 id="小数类型" tabindex="-1"><a class="header-anchor" href="#小数类型"><span>小数类型</span></a></h2><h3 id="数据类型-1" tabindex="-1"><a class="header-anchor" href="#数据类型-1"><span>数据类型</span></a></h3><p>其中小数类型可以细分为浮点类型和定点类型</p><ul><li><p>浮点类型</p><ul><li>FLOAT：单精度，4 个字节</li><li>DOUBLE：双精度，8 个字节</li></ul></li><li><p>定点类型</p><ul><li><p>DECIMAL(M, D)：M 精度代表最大位数，D 标度代表小数点后的位数。DECIMAL(M, D) 会占用 M + 2 个字节，因为它是以字符串形式进行存储的，当存入一个数时，会存储数字代表的字符，一个数字字符使用一个字节空间，另外要存入描述这个数据的元数据，元数据固定占用 2 个字节，所以是 M + 2。默认 M 是 10，D 是 0.</p><blockquote><p>在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量<strong>避免做浮点数比较</strong></p></blockquote></li></ul></li></ul><h3 id="和-java-类型对应-1" tabindex="-1"><a class="header-anchor" href="#和-java-类型对应-1"><span>和 Java 类型对应</span></a></h3><p>使用 BigDecimal 来对应，使用 Double、Float 容易发生精度丢失</p><h3 id="如何选择" tabindex="-1"><a class="header-anchor" href="#如何选择"><span>如何选择</span></a></h3><p>小数类型建议统一选择使用 DECIMAL</p><h2 id="日期类型" tabindex="-1"><a class="header-anchor" href="#日期类型"><span>日期类型</span></a></h2><h3 id="数据类型-2" tabindex="-1"><a class="header-anchor" href="#数据类型-2"><span>数据类型</span></a></h3><table><thead><tr><th>数据类型</th><th>格式</th><th>范围</th><th>字节数</th></tr></thead><tbody><tr><td>YEAR</td><td>yyyy</td><td>1901 ~ 2155</td><td>1</td></tr><tr><td>DATE</td><td>yyyy-MM-dd</td><td>1000-01-01 ~ 9999-12-31</td><td>3</td></tr><tr><td>TIME</td><td>HH:mm:ss</td><td>-838:59:59 ~ 838:59:59</td><td>3</td></tr><tr><td>DATETIME</td><td>yyyy-MM-dd HH:mm:ss</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8</td></tr><tr><td>TIMESTAMP</td><td>yyyyMMddHHmmss</td><td>1970-01-01 00:00:00 UTC ~ 2038-01-19 3:14:07 UTC</td><td>4</td></tr></tbody></table><h3 id="datetime-和-timestamp-的区别" tabindex="-1"><a class="header-anchor" href="#datetime-和-timestamp-的区别"><span>DATETIME 和 TIMESTAMP 的区别</span></a></h3><ul><li>时间范围：TIMESTAMP 存储的范围为1970-01-01～ 2038-01-19；DATETIME 存储的范围为1000-01-01 ～ 9999-12-31。显然 DATETIME 的时间范围更广</li><li>自动转换：TIMESTAMP 存储时从客户端时区转换成 UTC 进行存储，查询时从 UTC 转换为客户端时区返回；DATETIME 不做转换，原封不动地存储和读取</li></ul><h3 id="和-java-类型对应-2" tabindex="-1"><a class="header-anchor" href="#和-java-类型对应-2"><span>和 Java 类型对应</span></a></h3><p>MySQL 中这些日期类型可以和 java.sql 包下的类对应</p><table><thead><tr><th>MySQL 类型</th><th>Java 类型</th></tr></thead><tbody><tr><td>YEAR</td><td>java.sql.Short/java.sql.Date（日期选择当年第一天）</td></tr><tr><td>DATE</td><td>java.sql.Date（只包含日期）</td></tr><tr><td>TIME</td><td>java.sql.Time（只包含时间）</td></tr><tr><td>DATETIME</td><td>java.sql.Timestamp（包含日期时间）</td></tr><tr><td>TIMESTAMP</td><td>java.sql.Timestamp</td></tr></tbody></table><p>其中 DATETIME 和 TIMESTAMP 也可以使用 java.time.LocalDateTime 来对应，需要设置好序列化与反序列化</p><h3 id="如何选择-1" tabindex="-1"><a class="header-anchor" href="#如何选择-1"><span>如何选择</span></a></h3><ul><li>YEAR、DATE、TIME 这三种有特定的存储格式，可以按需求进行选择。</li><li>DATETIME、TIMESTAMP 的选择主要考虑日期使用范围，TIMESTAMP 的时间范围只到 2038 年，如果需要使用的日期比较大，那么就需要使用 DATETIME；如果涉及到跨时区、时区转换的业务，放在程序中处理也可以，更容易把控。</li></ul><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型"><span>字符串类型</span></a></h2><h3 id="数据类型-3" tabindex="-1"><a class="header-anchor" href="#数据类型-3"><span>数据类型</span></a></h3><p>这里主要讨论常见的 CHAR、VARCHAR，其他的还有 BINARY、VARBINARY、BLOB、TEXT、ENUM、SET 这几种类型。</p><p>其中定义 CHAR、VARCHAR 时必须跟上一个数值 N，用于描述这个字段可容纳的<strong>最大字符数</strong>。</p><ul><li>CHAR(N) ：固定长度字符串</li><li>VARCHAR(N) ：可变长度的字符串</li></ul><p>用例子说明两者区别：</p><p>参考：<a href="https://dev.mysql.com/doc/refman/8.0/en/char.html" target="_blank" rel="noopener noreferrer">MySQL :: MySQL 8.0 Reference Manual :: 11.3.2 The CHAR and VARCHAR Types</a></p><table><thead><tr><th>存入的值</th><th>CHAR(4)</th><th>VARCHAR(4)</th></tr></thead><tbody><tr><td>&#39;&#39;</td><td>&#39;    &#39;</td><td>&#39;&#39;</td></tr><tr><td>&#39;ab&#39;</td><td>&#39;ab  &#39;</td><td>&#39;ab&#39;</td></tr><tr><td>&#39;abcd&#39;</td><td>&#39;abcd&#39;</td><td>&#39;abcd&#39;</td></tr><tr><td>&#39;abcdefgh&#39;</td><td>&#39;abcd&#39;</td><td>&#39;abcd&#39;</td></tr></tbody></table><ul><li>当存储的内容没有超出字段可容纳的最大字符数时 <ul><li>CHAR(N) ：存储内容后进行填充，直到达到 N 个字符</li><li>VARCHAR(N) ：存储内容</li></ul></li><li>当存储的内容大于或等于字段可容纳的最大字符数时，两者都只存储最大字符数的内容，后面的内容被截断。（超出自动截断的功能需要关闭 <code>STRICT_TRANS_TABLES</code> 功能，否则不存储）</li></ul><h3 id="char、varchar字段占用字节数量" tabindex="-1"><a class="header-anchor" href="#char、varchar字段占用字节数量"><span>CHAR、VARCHAR字段占用字节数量</span></a></h3><p>CHAR 和 VARCHAR 占用的字节数量和字符占用字节数、字段长度息息相关</p><ul><li><strong>CHAR 类型字段最多存放 255 个字符，和编码无关</strong></li><li>字符占用字节数：<strong>不同字符占据的字节数不同</strong>，假设使用 utf8mb4 字符集，数字、英文、符号占用 1 个字节，中文占用 3 个字节，其他一些 emoji 符号、繁体字等需要使用 4 个字节。</li><li>VARCHAR 最多可以表示 65535 个字节，由于 VARCHAR 是一个长度可变的字符串，需要使用额外的空间来<strong>存储字段长度</strong>，使用 2 个字节来存储字段长度，另外如果字段允许为 NULL ，那么也需要使用一个字节来存储。</li></ul><h3 id="如何选择-2" tabindex="-1"><a class="header-anchor" href="#如何选择-2"><span>如何选择</span></a></h3><ul><li>尽可能不选用 TEXT 类型存储字符串。MySQL 内存临时表不支持 TEXT 数据类型，如果查询中包含这些列就不能使用内存临时表，必须使用磁盘临时表；存储 TEXT 类型数据时，不和行记录存储在一起，而是在磁盘中开辟另外的空间存储，行记录中只存储地址，所以 TEXT 类型数据还要经历二次查询。</li><li>存储定长的字符串时，尽量使用 CHAR，因为 CHAR 索引速度非常快。VARCHAR 类型的数据在查找时需要先获取数据段长度，然后按长度检索内容；CHAR 类型的数据无需计算字段长度，只需要按部就班地检索</li></ul><h2 id="其他类型" tabindex="-1"><a class="header-anchor" href="#其他类型"><span>其他类型</span></a></h2><p>其他类型中包含二进制类型，其他类型不详细展开</p><ul><li>tinyblob，255个字节</li><li>blob，65535个字节</li><li>mediumblob，16777215个字节</li><li>longblob，4294967295个字节</li></ul><h2 id="一些更普遍的规则" tabindex="-1"><a class="header-anchor" href="#一些更普遍的规则"><span>一些更普遍的规则</span></a></h2><ul><li>在满足需求的情况下，可以选择占用空间更小的数据类型就选择更小的，数据类型越小，查询、插入时占用的计算机资源就越少</li><li>能使用整型就不使用字符串类型，因为有字符集和排序规则，使得字符串类型比整型更复杂</li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://blog.csdn.net/qq_45333238/article/details/125092611" target="_blank" rel="noopener noreferrer">关于MySQL中的字段长度以及占用空间总结</a></p><p><a href="https://joyohub.com/mysql/mysql-string/" target="_blank" rel="noopener noreferrer">【Mysql】：搞清楚字符串类型char、varchar、text - JoyoHub</a></p>',52)])])}const h=a(n,[["render",l]]),o=JSON.parse('{"path":"/writings/MySQL/MySQL-data-type.html","title":"MySQL 数据类型","lang":"zh-CN","frontmatter":{"title":"MySQL 数据类型","icon":"article","category":["数据库"],"tag":["MySQL"],"description":"MySQL 数据类型 MySQL 中主要包含 5 大类的数据类型，分别是整数型、小数型、字符串型、日期型、其他类型。 整数类型 数据类型 参考：MySQL :: MySQL 8.0 Reference Manual :: 11.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYI...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"],["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/MySQL/MySQL-data-type.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"MySQL 数据类型"}],["meta",{"property":"og:description","content":"MySQL 数据类型 MySQL 中主要包含 5 大类的数据类型，分别是整数型、小数型、字符串型、日期型、其他类型。 整数类型 数据类型 参考：MySQL :: MySQL 8.0 Reference Manual :: 11.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYI..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}]]},"git":{"createdTime":1670839728000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","username":"wuyingbin","email":"yb.ng@foxmail.com","commits":5,"url":"https://github.com/wuyingbin"}]},"readingTime":{"minutes":6.49,"words":1948},"filePathRelative":"writings/MySQL/MySQL-data-type.md","autoDesc":true}');export{h as comp,o as data};
