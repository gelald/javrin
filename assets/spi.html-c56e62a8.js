const a=JSON.parse('{"key":"v-0396433f","path":"/writings/Java-base/spi.html","title":"SPI机制","lang":"zh-CN","frontmatter":{"title":"SPI机制","icon":"article","category":["Java基础"],"tag":["框架基础"],"description":"SPI机制 SPI（Service Provider Interface），是 JDK 内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用 SPI使用 定义标准（接口） 具体的服务提供者实现 实现接口 在 META-INF/services 目录下定义一个名为接口全限定名的文件，文件内容是具体的实现类全限定名 开发人员使用 ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class); //获取迭代器 Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator(); //遍历 while(driversIterator.hasNext()) { driversIterator.next(); //可以做具体的业务逻辑 }","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Java-base/spi.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"SPI机制"}],["meta",{"property":"og:description","content":"SPI机制 SPI（Service Provider Interface），是 JDK 内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用 SPI使用 定义标准（接口） 具体的服务提供者实现 实现接口 在 META-INF/services 目录下定义一个名为接口全限定名的文件，文件内容是具体的实现类全限定名 开发人员使用 ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class); //获取迭代器 Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator(); //遍历 while(driversIterator.hasNext()) { driversIterator.next(); //可以做具体的业务逻辑 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"框架基础"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SPI机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"SPI使用","slug":"spi使用","link":"#spi使用","children":[]},{"level":2,"title":"SPI在源码中的案例","slug":"spi在源码中的案例","link":"#spi在源码中的案例","children":[{"level":3,"title":"JDBC DriverManager","slug":"jdbc-drivermanager","link":"#jdbc-drivermanager","children":[]}]},{"level":2,"title":"SPI与API的区别","slug":"spi与api的区别","link":"#spi与api的区别","children":[]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"writings/Java-base/spi.md","localizedDate":"2023年2月28日","excerpt":"<h1> SPI机制</h1>\\n<blockquote>\\n<p>SPI（Service Provider Interface），是 JDK 内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用</p>\\n</blockquote>\\n<h2> SPI使用</h2>\\n<ul>\\n<li>\\n<p>定义标准（接口）</p>\\n</li>\\n<li>\\n<p>具体的服务提供者实现</p>\\n<ul>\\n<li>实现接口</li>\\n<li>在 <code>META-INF/services</code> 目录下定义一个名为接口全限定名的文件，文件内容是具体的实现类全限定名</li>\\n</ul>\\n</li>\\n<li>\\n<p>开发人员使用</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">ServiceLoader</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Driver</span><span class=\\"token punctuation\\">&gt;</span></span> loadedDrivers <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ServiceLoader</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">load</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Driver</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//获取迭代器</span>\\n<span class=\\"token class-name\\">Iterator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Driver</span><span class=\\"token punctuation\\">&gt;</span></span> driversIterator <span class=\\"token operator\\">=</span> loadedDrivers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">iterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//遍历</span>\\n<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>driversIterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasNext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    driversIterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//可以做具体的业务逻辑</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}');export{a as data};
