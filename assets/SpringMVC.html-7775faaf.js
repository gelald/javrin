const e=JSON.parse('{"key":"v-5d77c2ef","path":"/writings/Spring/SpringMVC.html","title":"Spring集成Web环境","lang":"zh-CN","frontmatter":{"description":"Spring集成Web环境 ApplicationContext应用上下文获取方式 应用上下文对象是通过new ClassPathXmlApplicationContext(配置文件)的方式获取的，但是每次从容器中获取Bean的时候都需要编写这一句代码 这样的弊端是：配置文件加载多次，应用上下文对象创建多次，影响性能 在Web项目中，可以使用ServletContextListener监听Web应用的启动，当Web应用启动时，就加载Spring配置文件，创建应用上下文对象ApplicationContext，将其存储到最大的域ServletContext中，这样就可以在任意位置从域中获取应用上下文对象了","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Spring/SpringMVC.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Spring集成Web环境"}],["meta",{"property":"og:description","content":"Spring集成Web环境 ApplicationContext应用上下文获取方式 应用上下文对象是通过new ClassPathXmlApplicationContext(配置文件)的方式获取的，但是每次从容器中获取Bean的时候都需要编写这一句代码 这样的弊端是：配置文件加载多次，应用上下文对象创建多次，影响性能 在Web项目中，可以使用ServletContextListener监听Web应用的启动，当Web应用启动时，就加载Spring配置文件，创建应用上下文对象ApplicationContext，将其存储到最大的域ServletContext中，这样就可以在任意位置从域中获取应用上下文对象了"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T15:56:59.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2022-08-01T15:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring集成Web环境\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-01T15:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"ApplicationContext应用上下文获取方式","slug":"applicationcontext应用上下文获取方式","link":"#applicationcontext应用上下文获取方式","children":[]},{"level":2,"title":"Spring提供获取应用上下文的工具","slug":"spring提供获取应用上下文的工具","link":"#spring提供获取应用上下文的工具","children":[]},{"level":2,"title":"SpringMVC开发步骤","slug":"springmvc开发步骤","link":"#springmvc开发步骤","children":[]},{"level":2,"title":"SpringMVC执行流程","slug":"springmvc执行流程","link":"#springmvc执行流程","children":[]},{"level":2,"title":"SpringMVC各个组件的分工","slug":"springmvc各个组件的分工","link":"#springmvc各个组件的分工","children":[]},{"level":2,"title":"SpringMVC注解解析","slug":"springmvc注解解析","link":"#springmvc注解解析","children":[]},{"level":2,"title":"SpringMVC ViewResolver的配置","slug":"springmvc-viewresolver的配置","link":"#springmvc-viewresolver的配置","children":[]},{"level":2,"title":"页面跳转","slug":"页面跳转","link":"#页面跳转","children":[{"level":3,"title":"返回字符串形式","slug":"返回字符串形式","link":"#返回字符串形式","children":[]},{"level":3,"title":"返回ModalAndView对象","slug":"返回modalandview对象","link":"#返回modalandview对象","children":[]}]},{"level":2,"title":"数据回写","slug":"数据回写","link":"#数据回写","children":[{"level":3,"title":"直接返回字符串","slug":"直接返回字符串","link":"#直接返回字符串","children":[]},{"level":3,"title":"返回对象或集合","slug":"返回对象或集合","link":"#返回对象或集合","children":[]}]},{"level":2,"title":"获得请求参数","slug":"获得请求参数","link":"#获得请求参数","children":[{"level":3,"title":"获取基本类型参数","slug":"获取基本类型参数","link":"#获取基本类型参数","children":[]},{"level":3,"title":"获取POJO类型参数","slug":"获取pojo类型参数","link":"#获取pojo类型参数","children":[]},{"level":3,"title":"获取数组类型参数(用得不多)","slug":"获取数组类型参数-用得不多","link":"#获取数组类型参数-用得不多","children":[]},{"level":3,"title":"获取集合类型参数","slug":"获取集合类型参数","link":"#获取集合类型参数","children":[]}]},{"level":2,"title":"静态资源文件访问","slug":"静态资源文件访问","link":"#静态资源文件访问","children":[]},{"level":2,"title":"请求数据乱码问题","slug":"请求数据乱码问题","link":"#请求数据乱码问题","children":[]},{"level":2,"title":"参数绑定注解","slug":"参数绑定注解","link":"#参数绑定注解","children":[]},{"level":2,"title":"Restful风格","slug":"restful风格","link":"#restful风格","children":[{"level":3,"title":"获取请求参数","slug":"获取请求参数","link":"#获取请求参数","children":[]}]},{"level":2,"title":"自定义类型转换器","slug":"自定义类型转换器","link":"#自定义类型转换器","children":[]},{"level":2,"title":"获取请求头","slug":"获取请求头","link":"#获取请求头","children":[]},{"level":2,"title":"文件上传","slug":"文件上传","link":"#文件上传","children":[{"level":3,"title":"文件上传开发步骤","slug":"文件上传开发步骤","link":"#文件上传开发步骤","children":[]}]},{"level":2,"title":"自定义拦截器","slug":"自定义拦截器","link":"#自定义拦截器","children":[]},{"level":2,"title":"案例：用户登陆&SpringMVC拦截器的使用","slug":"案例-用户登陆-springmvc拦截器的使用","link":"#案例-用户登陆-springmvc拦截器的使用","children":[]},{"level":2,"title":"SpringMVC提供的","slug":"springmvc提供的","link":"#springmvc提供的","children":[]},{"level":2,"title":"自定义异常处理器","slug":"自定义异常处理器","link":"#自定义异常处理器","children":[]}],"git":{"createdTime":1659369419000,"updatedTime":1659369419000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":2},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":14.5,"words":4351},"filePathRelative":"writings/Spring/SpringMVC.md","localizedDate":"2022年8月1日","excerpt":"<h1> Spring集成Web环境</h1>\\n<h2> ApplicationContext应用上下文获取方式</h2>\\n<p>应用上下文对象是通过<code>new ClassPathXmlApplicationContext(配置文件)</code>的方式获取的，但是每次从容器中获取Bean的时候都需要编写这一句代码</p>\\n<p>这样的弊端是：<strong>配置文件加载多次，应用上下文对象创建多次，影响性能</strong></p>\\n<p>在Web项目中，可以使用<code>ServletContextListener</code>监听Web应用的启动，当Web应用启动时，就加载Spring配置文件，创建应用上下文对象<code>ApplicationContext</code>，将其存储到最大的域<code>ServletContext</code>中，这样就可以在任意位置从域中获取应用上下文对象了</p>","autoDesc":true}');export{e as data};
