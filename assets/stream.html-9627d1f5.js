const e=JSON.parse('{"key":"v-36d4c6d4","path":"/writings/Java-collection/stream.html","title":"Stream 流式处理","lang":"zh-CN","frontmatter":{"title":"Stream 流式处理","icon":"article","category":["Java集合"],"description":"Stream Stream流 是 Java8 推出的一个方便集合、数组操作的一个结构 概述 流式思想：集合元素的处理方案，方案就是一种函数模型。其中集合元素都没有被处理，只有当最终方法执行完了整个模型才会按照指定策略进行操作，得益于 Lambda 表达式的延迟性 Stream 的操作可以分为两种 中间操作：返回值仍然是一个流，可以继续调用 Stream 的方法 终端操作：终端操作会生成一个新的集合或值，操作结束后无法继续使用 Stream 的方法，每个流只能进行一次终端操作","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Java-collection/stream.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"Stream 流式处理"}],["meta",{"property":"og:description","content":"Stream Stream流 是 Java8 推出的一个方便集合、数组操作的一个结构 概述 流式思想：集合元素的处理方案，方案就是一种函数模型。其中集合元素都没有被处理，只有当最终方法执行完了整个模型才会按照指定策略进行操作，得益于 Lambda 表达式的延迟性 Stream 的操作可以分为两种 中间操作：返回值仍然是一个流，可以继续调用 Stream 的方法 终端操作：终端操作会生成一个新的集合或值，操作结束后无法继续使用 Stream 的方法，每个流只能进行一次终端操作"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Stream 流式处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"获取流","slug":"获取流","link":"#获取流","children":[{"level":3,"title":"集合","slug":"集合","link":"#集合","children":[]},{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"流的分类","slug":"流的分类","link":"#流的分类","children":[]}]},{"level":2,"title":"方法使用","slug":"方法使用","link":"#方法使用","children":[{"level":3,"title":"遍历（foreach）","slug":"遍历-foreach","link":"#遍历-foreach","children":[]},{"level":3,"title":"筛选（filter）","slug":"筛选-filter","link":"#筛选-filter","children":[]},{"level":3,"title":"匹配（find/match）","slug":"匹配-find-match","link":"#匹配-find-match","children":[]},{"level":3,"title":"聚合（max/min/count）","slug":"聚合-max-min-count","link":"#聚合-max-min-count","children":[]},{"level":3,"title":"归约（reduce）","slug":"归约-reduce","link":"#归约-reduce","children":[]},{"level":3,"title":"映射（map/flatMap）","slug":"映射-map-flatmap","link":"#映射-map-flatmap","children":[]},{"level":3,"title":"收集（collect）","slug":"收集-collect","link":"#收集-collect","children":[]},{"level":3,"title":"排序（sorted）","slug":"排序-sorted","link":"#排序-sorted","children":[]},{"level":3,"title":"组合（concat）","slug":"组合-concat","link":"#组合-concat","children":[]},{"level":3,"title":"提取（skip/limit）","slug":"提取-skip-limit","link":"#提取-skip-limit","children":[]}]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":7.55,"words":2266},"filePathRelative":"writings/Java-collection/stream.md","localizedDate":"2023年2月28日","excerpt":"<h1> Stream</h1>\\n<blockquote>\\n<p>Stream流 是 Java8 推出的一个方便集合、数组操作的一个结构</p>\\n</blockquote>\\n<h2> 概述</h2>\\n<p>流式思想：集合元素的处理方案，方案就是一种函数模型。其中集合元素都没有被处理，只有当最终方法执行完了整个模型才会按照指定策略进行操作，<strong>得益于 Lambda 表达式的延迟性</strong></p>\\n<p>Stream 的操作可以分为两种</p>\\n<ul>\\n<li>中间操作：返回值仍然是一个流，可以继续调用 Stream 的方法</li>\\n<li>终端操作：终端操作会生成一个新的集合或值，操作结束后无法继续使用 Stream 的方法，每个流只能进行一次终端操作</li>\\n</ul>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
