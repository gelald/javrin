import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as r,e as d}from"./app-f9042815.js";const o={},a=d('<h1 id="gridfs-学习" tabindex="-1"><a class="header-anchor" href="#gridfs-学习" aria-hidden="true">#</a> GridFS 学习</h1><p>GridFS 是 MongoDB 提供的用于持久化文件的存储模块</p><blockquote><p>现代互联网产品的数据形式已经不局限于文字，还有很多图片等二进制数据，然而二进制数据是不适合存储在普通关系型数据库中的（如：MySQL ），关系型数据库更多的是存储文件的访问路径。GridFS 是 MongoDB 中提供的用于持久化二进制数据的存储模块</p></blockquote><h2 id="gridfs-概述" tabindex="-1"><a class="header-anchor" href="#gridfs-概述" aria-hidden="true">#</a> GridFS 概述</h2><p>GridFS 是 MongoDB 的一个子模块，用于存储和检索超过 16M（BSON）的文件，如果文件大小没有超过 16M 可以将数据保存常规的BSON中</p><p>在实际系统开发中，上传的图片或者文件可能尺寸会很大，此时我们可以借用 GridFS 来辅助管理这些文件，GridFS 会自动将文件分成块，每一块作为一条文档单独存储（GridFS使用的块容量默认是256K）</p><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><ul><li><p>GridFS 存储文件是<strong>将文件分块存储</strong>，文件会按照 <strong>256KB</strong> 的大小分割成多个块进行存储</p></li><li><p>GridFS 使用两个集合存储文件，默认使用的 bucket 名叫 <code>fs</code>，这个名字也可以自定义</p><ul><li><p>一个集合是 <code>fs.chunks</code>，用于存储文件的<strong>二进制数据</strong>，分块后的每一个块都作为一个文档存储在这个集合中</p></li><li><p>一个集合是 <code>fs.files</code>，用于存储文件的<strong>元数据信息</strong>（文件名称、文件类型、上传时间等信息）</p></li><li><p>如果文件大于 256K，那么会将文件分割成多个块，最终将<strong>多个块信息</strong>存储在 <code>fs.chunks</code> 集合中的多个文档中，然后将<strong>一个文件信息</strong>存储在 <code>fs.files</code> 集合中的一个文档中，对于同一个大文件，<code>fs.chunks</code> 集合中多个文档中的 <code>file_id</code> 字段对应 <code>fs.files</code> 集中某一个文档的 <code>_id</code> 字段。</p></li></ul></li></ul><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><p>集成在 MongoDB 内部，业务方面无需引入存储平台</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><p>性能相比对象存储较差，小文件块太多维护起来不方便，且修改文档时候需要先删除再重新保存</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ul><li><p>应用系统有需要上传图片（用户上传或者系统本身的文件发布等）</p></li><li><p>文件分布式存储与读取（与其他分布式文件存储系统没啥区别）</p></li><li><p>文件的量级处于飞速增长，有可能达到操作系统自己的文件系统的查询性能瓶颈（甚至超过系统硬盘的扩容范围）</p></li><li><p>文件的备份（不使用 GridFS 这种方式也可以做，但是更加方面）</p></li><li><p>文件系统访问的故障转移和修复（GridFS 可以避免用于存储用户上传内容的文件系统出现的某些问题）</p></li><li><p>文件检索支持索引检索，存储除文件本身以外还需要关联更多的元数据信息（文件的发布式作者、发布时间、文件 tag 属性等等<strong>自定义信息</strong>），有了索引后可以更快的检索出文件元数据和文件本身。</p></li><li><p>对文件的分类模糊（文件夹分类关系混乱或者无法分类）</p></li><li><p>文件尺寸较小，而且众多，且文件经常有可能被迁移、删除、修改元数据等</p></li></ul>',15),s=[a];function n(c,l){return i(),r("div",null,s)}const p=e(o,[["render",n],["__file","MongoDB-GridFS.html.vue"]]);export{p as default};
