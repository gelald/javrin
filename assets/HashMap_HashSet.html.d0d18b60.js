import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,d as p}from"./app.575593a3.js";const t={},e=p(`<h1 id="hashmap-hashset" tabindex="-1"><a class="header-anchor" href="#hashmap-hashset" aria-hidden="true">#</a> HashMap &amp; HashSet</h1><h2 id="\u6982\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u6982\u8FF0" aria-hidden="true">#</a> \u6982\u8FF0</h2><p>\u628A HashSet \u548C HashMap \u653E\u5728\u4E00\u8D77\u8BB2\u89E3\uFF0C\u662F\u56E0\u4E3A\u4E8C\u8005\u5728 Java \u91CC\u6709\u7740\u76F8\u540C\u7684\u5B9E\u73B0\uFF0C\u524D\u8005\u4EC5\u4EC5\u662F\u5BF9\u540E\u8005\u505A\u4E86\u4E00\u5C42\u5305\u88C5\uFF0C\u4E5F\u5C31\u662F\u8BF4 HashSet \u91CC\u9762\u6709\u4E00\u4E2A HashMap\uFF0C\u4F53\u73B0\u4E86\u9002\u914D\u5668\u6A21\u5F0F\u3002\u6240\u4EE5\u8FD9\u91CC\u91CD\u70B9\u8BB2\u89E3 HashMap</p><h2 id="\u5E95\u5C42\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5E95\u5C42\u5B9E\u73B0" aria-hidden="true">#</a> \u5E95\u5C42\u5B9E\u73B0</h2><p>HashMap \u5E95\u5C42\u662F\u4E00\u4E2A\u94FE\u8868\u6570\u7EC4\u3002</p><p>HashMap \u8DDF TreeMap \u4E0D\u540C\uFF0C\u8FD9\u4E2A\u96C6\u5408\u4E0D\u4FDD\u8BC1\u5143\u7D20\u7684\u987A\u5E8F\uFF0C\u56E0\u4E3A\u63D2\u5165\u5143\u7D20\u65F6\u4F1A\u5BF9\u5143\u7D20\u8FDB\u884C\u54C8\u5E0C\uFF0C\u6570\u7EC4\u4E0B\u6807\u7531\u54C8\u5E0C\u503C\u51B3\u5B9A\uFF0C\u6240\u4EE5\u5143\u7D20\u987A\u5E8F\u4F1A\u88AB\u6253\u6563\u3002</p><p>\u5176\u4E2D\u54C8\u5E0C\u65B9\u6CD5\u53EF\u80FD\u4F1A\u4EA7\u751F\u54C8\u5E0C\u51B2\u7A81\uFF0CHashMap\u91C7\u7528\u7684\u662F\u94FE\u5730\u5740\u6CD5\u89E3\u51B3\u51B2\u7A81\uFF0C\u5C31\u662F\u76F8\u540C\u54C8\u5E0C\u503C\u7684\u5143\u7D20\u4F7F\u7528\u4E00\u4E2A\u94FE\u8868\u8FDE\u63A5\u8D77\u6765\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8BB0\u5F55\u5143\u7D20\u7684\u54C8\u5E0C\u503C</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token class-name">V</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220315105253.png" alt=""></p><p>\u4ECE\u8FD9\u4E2A\u7ED3\u6784\u53EF\u4EE5\u770B\u51FA\uFF0C\u5982\u679C\u627E\u5230\u5408\u9002\u7684\u54C8\u5E0C\u65B9\u6CD5\uFF0C\u90A3\u4E48\u63D2\u5165\u5143\u7D20\u548C\u83B7\u53D6\u5143\u7D20\u7684\u64CD\u4F5C\u90FD\u53EF\u4EE5\u5728\u5E38\u6570\u65F6\u95F4\u5185\u5B8C\u6210\uFF1B\u4F46\u662F\u5982\u679C\u9700\u8981\u5BF9 HashMap \u8FDB\u884C\u904D\u5386\uFF0C\u5C31\u9700\u8981\u904D\u5386\u6574\u4E2A table \u53CA\u5176\u540E\u9762\u7684\u51B2\u7A81\u94FE</p><p>\u6709\u4E24\u4E2A\u53C2\u6570\u53EF\u4EE5\u5F71\u54CD HashMap \u7684\u6027\u80FD\uFF1A\u521D\u59CB\u5BB9\u91CF\uFF08inital capacity\uFF0916\u548C\u8D1F\u8F7D\u7CFB\u6570\uFF08load factor\uFF090.75\u3002\u521D\u59CB\u5BB9\u91CF\u6307\u5B9A\u4E86\u521D\u59CB <code>table</code> \u7684\u5927\u5C0F\uFF0C\u8D1F\u8F7D\u7CFB\u6570\u7528\u6765\u6307\u5B9A\u81EA\u52A8\u6269\u5BB9\u7684\u4E34\u754C\u503C\u3002\u5F53 <code>entry</code> \u7684\u6570\u91CF\u8D85\u8FC7 <code>capacity*load_factor</code> \u65F6\uFF0C\u5BB9\u5668\u5C06\u81EA\u52A8\u6269\u5BB9\u5E76\u91CD\u65B0\u54C8\u5E0C\u3002\u5BF9\u4E8E\u63D2\u5165\u5143\u7D20\u8F83\u591A\u7684\u573A\u666F\uFF0C\u5C06\u521D\u59CB\u5BB9\u91CF\u8BBE\u5927\u53EF\u4EE5\u51CF\u5C11\u91CD\u65B0\u54C8\u5E0C\u7684\u6B21\u6570\u3002</p><p>\u5C06\u5BF9\u8C61\u653E\u5165\u5230 HashMap \u6216 HashSet \u4E2D\u65F6\uFF0C\u6709\u4E24\u4E2A\u65B9\u6CD5\u9700\u8981\u7279\u522B\u5173\u5FC3\uFF1A<code>hashCode()</code> \u548C <code>equals()</code>\u3002<strong><code>hashCode()</code> \u65B9\u6CD5\u51B3\u5B9A\u4E86\u5BF9\u8C61\u4F1A\u88AB\u653E\u5230\u54EA\u4E2A <code>bucket</code> \u91CC\uFF0C\u5F53\u591A\u4E2A\u5BF9\u8C61\u7684\u54C8\u5E0C\u503C\u51B2\u7A81\u65F6\uFF0C<code>equals()</code> \u65B9\u6CD5\u51B3\u5B9A\u4E86\u8FD9\u4E9B\u5BF9\u8C61\u662F\u5426\u662F\u201C\u540C\u4E00\u4E2A\u5BF9\u8C61\u201D</strong>\u3002\u6240\u4EE5\uFF0C\u5982\u679C\u8981\u5C06\u81EA\u5B9A\u4E49\u7684\u5BF9\u8C61\u653E\u5165\u5230 <code>HashMap</code> \u6216 <code>HashSet</code> \u4E2D\u7684\u952E\u65F6\uFF0C\u9700\u8981\u91CD\u5199 <code>hashCode()</code> \u548C <code>equals()</code> \u65B9\u6CD5\u3002</p><h2 id="\u8BA1\u7B97\u54C8\u5E0C\u503C" tabindex="-1"><a class="header-anchor" href="#\u8BA1\u7B97\u54C8\u5E0C\u503C" aria-hidden="true">#</a> \u8BA1\u7B97\u54C8\u5E0C\u503C</h2><p>\u4F7F\u7528\u5B58\u5165\u7684 key \u8C03\u7528 hashCode \u65B9\u6CD5\uFF0C\u53EF\u4EE5\u5F97\u5230\u4E00\u4E2A\u54C8\u5E0C\u503C\uFF0C\u4F46\u662F\u8FD9\u4E2A\u54C8\u5E0C\u503C\u4E00\u822C\u6BD4\u8F83\u5927\uFF0C\u6240\u4EE5\u9700\u8981\u4F7F\u7528\u4E00\u5B9A\u7684\u624B\u6BB5\u628A\u8FD9\u4E2A\u5927\u7684\u54C8\u5E0C\u503C\u843D\u5165\u5230\u6570\u7EC4\u7D22\u5F15\u8303\u56F4\u5185\u3002</p><ol><li><p>\u8FD9\u4E2A\u64CD\u4F5C\u53EF\u4EE5\u4F7F\u7528<strong>\u6A21\u8FD0\u7B97</strong>\uFF0C\u6A21\u8FD0\u7B97\u53EF\u4EE5\u4FDD\u8BC1\u843D\u5728\u6570\u7EC4\u7D22\u5F15\u8303\u56F4\u5185</p><blockquote><p>\u5047\u8BBE table \u957F\u5EA6\u4E3A16</p><p>x % 16 \u7684\u7ED3\u679C\u4E00\u5B9A\u662F 0~15 \u7684\u8303\u56F4\u5185</p></blockquote><p>\u4E0D\u8DB3\uFF1A\u54C8\u5E0C\u503C\u6BD4\u8F83\u5927\uFF0C\u5927\u6570\u6A21\u8FD0\u7B97\u6548\u7387\u4E0D\u9AD8</p></li><li><p>\u5728\u4E00\u5B9A\u6761\u4EF6\u4E0B\u53EF\u4EE5\u5C1D\u8BD5\u628A\u6A21\u8FD0\u7B97\u8F6C\u6362\u4E3A<strong>\u4E0E\u8FD0\u7B97</strong></p><blockquote><p>\u6A21\u8FD0\u7B97\u8F6C\u4E0E\u8FD0\u7B97</p><p>\u5982\u679C\u4E00\u4E2A\u6570\u662F 2 \u7684 n \u6B21\u5E42\uFF0C\u90A3\u4E48\u6709 x % n = x &amp; (n - 1)</p></blockquote><p>\u901A\u8FC7\u4E0A\u8FF0\u4F8B\u5B50\uFF0C\u5927\u5BB6\u5E94\u8BE5\u4E5F\u53EF\u4EE5\u5927\u81F4\u4E86\u89E3\u4E3A\u4EC0\u4E48 HashMap \u89C4\u5B9A table \u7684\u957F\u5EA6\u4E00\u5B9A\u662F 2 \u7684 n \u6B21\u5E42\u5427\uFF0C\u56E0\u4E3A\u6EE1\u8DB3\u8FD9\u4E2A\u6761\u4EF6\u624D\u5141\u8BB8\u628A\u6A21\u8FD0\u7B97\u8F6C\u6362\u4E3A\u4E0E\u8FD0\u7B97\uFF0C\u800C\u4E14\u4E0E\u8FD0\u7B97\u6548\u7387\u662F\u975E\u5E38\u9AD8\u7684</p><p>\u4E0D\u8DB3\uFF1A\u5728\u4E0E\u8FD0\u7B97\u4E2D\u51B3\u5B9A\u7D22\u5F15\u7684\u90E8\u5206\u5728\u4E8E\u6570\u7EC4\u957F\u5EA6\uFF0C\u6240\u4EE5\u51FA\u73B0\u91CD\u590D\u7684\u6982\u7387\u8F83\u5927\uFF0C\u53EF\u80FD\u5BFC\u81F4\u51FA\u73B0\u7684\u94FE\u8868\u957F\u5EA6\u8F83\u957F\uFF0C\u4E0D\u80FD\u5145\u5206\u5229\u7528\u6570\u7EC4</p><blockquote><p>\u5047\u8BBE table \u957F\u5EA6\u4E3A16</p><p>hash\u503C240(11110000)\u548C144(10010000)\u4E0D\u4E00\u6837\uFF0C\u4F46\u662F\u548C15(00001111)\u7684\u4E0E\u8FD0\u7B97\u662F\u4E00\u6837\u7684</p></blockquote></li><li><p>\u53EF\u4EE5\u628A\u54C8\u5E0C\u503C\u9AD816\u4F4D\u548C\u4F4E16\u4F4D\u5148\u8FDB\u884C<strong>\u5F02\u6216\u8FD0\u7B97</strong>\uFF0C\u518D\u8FDB\u884C<strong>\u4E0E\u8FD0\u7B97</strong>\uFF0C\u8FD9\u6837\u53EF\u4EE5\u66F4\u6709\u6548\u907F\u514D\u54C8\u5E0C\u51B2\u7A81</p><blockquote><p>HashMap \u7684\u505A\u6CD5</p><p>int hash = (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</p><p>int index = (n - 1) &amp; hash</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="\u54C8\u5E0C\u51B2\u7A81\u7684\u89E3\u51B3\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u54C8\u5E0C\u51B2\u7A81\u7684\u89E3\u51B3\u65B9\u5F0F" aria-hidden="true">#</a> \u54C8\u5E0C\u51B2\u7A81\u7684\u89E3\u51B3\u65B9\u5F0F</h3><p>HashMap \u89E3\u51B3\u54C8\u5E0C\u51B2\u7A81\u7684\u65B9\u5F0F\u662F\u5728\u6570\u7EC4\u4E0A\u7EF4\u62A4\u4E00\u4E2A\u94FE\u8868\uFF0C\u628A\u54C8\u5E0C\u51B2\u7A81\u7684\u8282\u70B9\u90FD\u7EC4\u6210\u4E00\u6761\u94FE</p><p>\u6B64\u5916\uFF0C\u89E3\u51B3\u54C8\u5E0C\u51B2\u7A81\u7684\u65B9\u6CD5\u8FD8\u6709\u5F00\u653E\u5B9A\u5740\u6CD5\u3001\u91CD\u65B0 hash \u7B49</p><h2 id="\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316" aria-hidden="true">#</a> \u521D\u59CB\u5316</h2><p>\u5982\u679C\u521D\u59CB\u5316 HashMap \u7684\u65F6\u5019\u4F20\u5165\u4E86\u4E00\u4E2A\u5BB9\u91CF\uFF0C\u7531\u4E8E HahsMap \u89C4\u5B9A\u5BB9\u91CF\u5FC5\u987B\u662F 2 \u7684 n \u6B21\u5E42\uFF0C\u6240\u4EE5 HashMap \u4F1A\u5BF9\u8FD9\u4E2A\u5BB9\u91CF\u8FDB\u884C\u68C0\u67E5\u8C03\u6574\uFF0C\u4FDD\u8BC1\u6EE1\u8DB3\u6761\u4EF6</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u521D\u59CB\u5316\u65F6\u4E0D\u4F20\u5165\u5BB9\u91CF\uFF0C\u90A3\u4E48\u521D\u59CB\u5316 HashMap \u7684\u52A8\u4F5C\u4F1A\u53D1\u751F\u5728\u7B2C\u4E00\u6B21\u653E\u5165\u5143\u7D20\u7684\u65F6\u5019</p><h2 id="\u5BB9\u91CF\u65B9\u9762" tabindex="-1"><a class="header-anchor" href="#\u5BB9\u91CF\u65B9\u9762" aria-hidden="true">#</a> \u5BB9\u91CF\u65B9\u9762</h2><h3 id="\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#\u6982\u5FF5" aria-hidden="true">#</a> \u6982\u5FF5</h3><ul><li><p>HashMap \u9ED8\u8BA4\u957F\u5EA6\u662F 16\uFF0C\u7B26\u5408 2 \u7684 n \u6B21\u5E42\u7684\u6761\u4EF6\uFF0C\u5728\u4EE3\u7801\u4E2D\u662F\u8FD9\u4E48\u4F53\u73B0\u7684</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// aka 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u9ED8\u8BA4\u7684\u8D1F\u8F7D\u56E0\u5B50\u662F 0.75f</p></li><li><p>\u9ED8\u8BA4\u6570\u7EC4\u6269\u5BB9\u9608\u503C\u662F 16 * 0.75f = 12\uFF0C\u4E5F\u5C31\u662F\u8BF4\u5F53\u6570\u7EC4\u4E2D\u5143\u7D20\u4E2A\u6570\u8FBE\u523012\u4E2A\u65F6\uFF0C\u9700\u8981\u8FDB\u884C\u6269\u5BB9\u4E86</p></li><li><p>\u9ED8\u8BA4\u94FE\u8868\u6811\u5316\u9608\u503C\u662F 8\uFF0C\u4F46\u662F\u8FD9\u4E0D\u662F\u5145\u5206\u6761\u4EF6\uFF1B\u53EA\u6709\u5F53\u6570\u7EC4\u957F\u5EA6\u8FBE\u5230 64 \uFF0C\u4E14\u94FE\u8868\u4E0A\u7684\u5143\u7D20\u4E2A\u6570\u8FBE\u5230 8 \u4E2A\uFF0C\u624D\u4F1A\u89E6\u53D1\u8F6C\u6362\u6210\u7EA2\u9ED1\u6811\u3002\u56E0\u4E3A\u5982\u679C\u5F53\u524D\u6570\u7EC4\u957F\u5EA6\u5C0F\u4E8E 64\uFF0C\u5E94\u8BE5\u4F18\u5148\u8FDB\u884C\u6570\u7EC4\u6269\u5BB9\uFF0C\u4EE5\u51CF\u5C11\u641C\u7D22\u65F6\u95F4</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// \u94FE\u8868\u5143\u7D20\u5927\u4E8E TREEIFY_THRESHOLD\uFF0C\u53EF\u4EE5\u8003\u8651\u6811\u5316</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// \u6570\u7EC4\u957F\u5EA6\u5C0F\u4E8E MIN_TREEIFY_CAPACITY\uFF0C\u4F18\u5148\u6269\u5BB9</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TREEIFY_CAPACITY<span class="token punctuation">)</span>
        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="\u6269\u5BB9" tabindex="-1"><a class="header-anchor" href="#\u6269\u5BB9" aria-hidden="true">#</a> \u6269\u5BB9</h3><p>\u5F53 HashMap \u7B2C\u4E00\u6B21\u521D\u59CB\u5316\u6570\u7EC4\u6216\u6570\u7EC4\u5BB9\u91CF\u8D85\u51FA\u9608\u503C\uFF08\u6570\u7EC4\u957F\u5EA6 * \u8D1F\u8F7D\u56E0\u5B50\uFF09\u65F6\u4F1A\u89E6\u53D1\u6269\u5BB9\u52A8\u4F5C</p><p>\u548C ArrayList \u4E0D\u540C\uFF0CHashMap \u7684\u6269\u5BB9\u4E0D\u662F\u7B80\u5355\u7684\u6570\u7EC4\u590D\u5236\uFF0C\u9700\u8981\u91CD\u65B0\u8BA1\u7B97\u54C8\u5E0C\u786E\u5B9A\u7D22\u5F15\uFF0C\u6240\u4EE5\u5F00\u53D1\u65F6\u4E00\u5B9A\u8981\u907F\u514D\u9891\u7E41\u6269\u5BB9\u7684\u53D1\u751F</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5F53\u524D\u5BB9\u91CF\u662F\u5426\u5927\u4E8EHashMap\u4E2Dtable\u7684\u6700\u5927\u5BB9\u91CF\uFF0C\u4F7F\u7528\u6574\u578B\u6570\u636E\u6700\u5927\u503C</span>
            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> oldCap <span class="token operator">&gt;=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6269\u5BB9\u4E3A\u5F53\u524D\u5BB9\u91CF\u76842\u500D</span>
            <span class="token comment">// \u8D1F\u8F7D\u56E0\u5B50\u4E5F\u9700\u8981\u968F\u7740\u6269\u5BB9*2</span>
            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>
        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>
        <span class="token comment">// \u4E0A\u9762\u4E24\u4E2A\u6761\u4EF6\u90FD\u4E0D\u6EE1\u8DB3\u8BF4\u660E\u8FD9\u91CC\u662F\u7B2C\u4E00\u6B21\u521D\u59CB\u5316table</span>
        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>
        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>
        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>
                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>
    <span class="token comment">// \u6839\u636E\u65B0\u5BB9\u91CF\u6765\u521D\u59CB\u5316table</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;rawtypes&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>
    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>
    <span class="token comment">// \u8FC1\u79FB\u5143\u7D20\u5230\u65B0table\u4E2D</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u6CA1\u6709next\uFF0C\u8BF4\u660E\u662F\u6570\u7EC4\u4E2D\u7684\u666E\u901A\u8282\u70B9</span>
                    <span class="token comment">// \u666E\u901A\u8282\u70B9\u91CD\u65B0\u8BA1\u7B97\u7D22\u5F15</span>
                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u7EA2\u9ED1\u6811\u8282\u70B9\u8FC1\u79FB\u903B\u8F91</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// preserve order</span>
                    <span class="token comment">// \u94FE\u8868\u8282\u70B9\u7684\u8FC1\u79FB\u4F1A\u4EA7\u751F\u4E24\u6761\u65B0\u7684\u94FE\u8868</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
                    <span class="token keyword">do</span> <span class="token punctuation">{</span>
                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                        <span class="token comment">// \u8BA1\u7B97\u5173\u952E</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token keyword">else</span>
                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token keyword">else</span>
                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u628A\u4E24\u6761\u94FE\u653E\u5230\u6570\u7EC4\u4E2D</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u4E0D\u9700\u8981\u6269\u5BB9\u8BF4\u660E\u662F\u7B2C\u4E00\u6B21\u521D\u59CB\u5316table\uFF0C\u521B\u5EFA\u6570\u7EC4\u540E\u76F4\u63A5\u8FD4\u56DE</span>
    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="e-hash-oldcap-0" tabindex="-1"><a class="header-anchor" href="#e-hash-oldcap-0" aria-hidden="true">#</a> (e.hash &amp; oldCap) == 0</h4><p>\u8BA1\u7B97\u7684\u5173\u952E\u662F\u8FD9\u4E00\u884C\uFF0C\u51B3\u5B9A\u6269\u5BB9\u94FE\u8868\u5143\u7D20\u7684\u7D22\u5F15</p><p>\u7528\u4F8B\u5B50\u6765\u8BF4\u660E\u4F1A\u66F4\u76F4\u89C2</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u5047\u8BBE\u5143\u7D20A\u7684hash\u503C\u4E3A21\uFF0C\u5143\u7D20B\u7684hash\u503C\u4E3A42\uFF0C\u6269\u5BB9\u524D\u5BB9\u91CF\u4E3A16
\u73B0\u5728\u5206\u522B\u8BA1\u7B97\u5143\u7D20A\u3001B\u7684\u6269\u5BB9\u524D\u540E\u7684\u7D22\u5F15

\u5143\u7D20A\u6269\u5BB9\u524D\u7D22\u5F15\uFF1A5		\u5143\u7D20A\u6269\u5BB9\u540E\u7D22\u5F15\uFF1A21
21 &amp; (16 - 1)		 21 &amp; (32 - 1)
  00010101			   00010101
&amp; 00001111			 &amp; 00011111
-----------			 -----------
  00000101			   00010101

\u5143\u7D20B\u6269\u5BB9\u524D\u7D22\u5F15\uFF1A10		\u5143\u7D20B\u6269\u5BB9\u540E\u7D22\u5F15\uFF1A10
42 &amp; (16 - 1)		 42 &amp; (32 - 1)
  00101010			   00101010
&amp; 00001111			 &amp; 00011111
-----------			 -----------
  00001010			   00001010
  
  
\u53EF\u4EE5\u770B\u5230\u4E24\u4E2A\u5143\u7D20\u7684\u7D22\u5F15\u5728\u6269\u5BB9\u524D\u540E\u662F\u5426\u6539\u53D8\u662F\u7531hash\u503C\u7B2C4\u4F4D\u51B3\u5B9A\u7684
21\u7684\u4E8C\u8FDB\u5236\u7B2C4\u4F4D\u662F1\uFF0C\u6240\u4EE5\u6269\u5BB9\u540E\u7D22\u5F15\u6539\u53D8\u4E86
42\u7684\u4E8C\u8FDB\u5236\u7B2C4\u4F4D\u662F0\uFF0C\u6240\u4EE5\u6269\u5BB9\u540E\u7D22\u5F15\u4E0D\u53D8

\u800C\u68C0\u9A8C\u7B2C4\u4F4D\u662F\u5426\u4E3A0\u5176\u5B9E\u53EF\u4EE5\u901A\u8FC7\u5143\u7D20hash\u503C\u548C00010000\u505A\u4E0E\u8FD0\u7B97\uFF0C\u800C00010000\u662F(0001111-00001111)\u7684\u7ED3\u679C\uFF0C\u800C\u4E14\u521A\u597D\u662F16\uFF01\u53EF\u4EE5\u63A8\u5BFC\u51FA\u524D\u540E\u4E24\u4E2A\u7D22\u5F15\u7684\u5DEE\u503C\u5C31\u662FoldCap\uFF01
\u8FD9\u4E0D\u662F\u5076\u7136\uFF0C\u7ECF\u8FC7\u63A8\u5BFC\uFF0C\u5982\u679C\u539F\u5BB9\u91CF\u662F32\uFF0C\u90A3\u4E48\u770B\u6269\u5BB9\u524D\u540E\u662F\u5426\u9700\u8981\u6539\u53D8\uFF0C\u53EF\u4EE5\u901A\u8FC7\u68C0\u9A8C\u7B2C5\u4F4D\u662F\u5426\u4E3A0\uFF0C\u53EF\u4EE5\u901A\u8FC7\u5143\u7D20hash\u503C\u548C00100000\u505A\u4E0E\u8FD0\u7B97
\u800C\u4E14\u6269\u5BB9\u540E\u5982\u679C\u7D22\u5F15\u6539\u53D8\uFF0C\u6539\u53D8\u540E\u7684\u7D22\u5F15\u503C\u4E00\u5B9A\u662F\u539F\u7D22\u5F15\u503C+\u539F\u6570\u7EC4\u957F\u5EA6\uFF01

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u90A3\u4E48\u4F7F\u7528\u4F8B\u5B50\u9A8C\u8BC1\u540E\uFF0C\u80FD\u591F\u8BC1\u660E(e.hash &amp; oldCap) == 0\u7684\u6548\u679C\uFF0C\u5C31\u662F\u5224\u65AD\u5143\u7D20\u7D22\u5F15\u662F\u5426\u9700\u8981\u6539\u53D8</p><p>\u5728\u4EE3\u7801\u4E2D\u4F53\u73B0\u6269\u5BB9\u662F\u5426\u9700\u8981\u6539\u53D8\u7D22\u5F15\u7684\u5730\u65B9\u662F\uFF1A\u6269\u5BB9\u94FE\u8868\u5143\u7D20\u65F6\uFF0CHashMap\u7EF4\u62A4\u4E86\u4E24\u4E2A\u94FE\u8868</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u7D22\u5F15\u4E0D\u53D8\u7684\u94FE\u8868</span>
<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// \u7D22\u5F15+oldCap\u7684\u94FE\u8868</span>
<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6DFB\u52A0\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u6DFB\u52A0\u5143\u7D20" aria-hidden="true">#</a> \u6DFB\u52A0\u5143\u7D20</h2><p>HashMap \u6DFB\u52A0\u5143\u7D20\u5927\u81F4\u4F1A\u5206\u4E3A\u4EE5\u4E0B\u51E0\u6B65</p><ol><li><p>\u6839\u636E\u952E\u8BA1\u7B97\u54C8\u5E0C\u503C</p></li><li><p>\u68C0\u67E5\u6570\u7EC4\u662F\u5426\u9700\u8981\u8FDB\u884C\u521D\u59CB\u5316</p></li><li><p>\u6DFB\u52A0\u5143\u7D20\uFF0C\u6DFB\u52A0\u5143\u7D20\u6709\u4E09\u79CD\u60C5\u51B5</p><ul><li><p>\u6570\u7EC4</p><ul><li>\u5982\u679C\u8BE5\u4F4D\u7F6E\u4E0A\u6CA1\u6709\u5143\u7D20\uFF0C\u90A3\u4E48\u65B0\u5EFA\u4E00\u4E2ANode\u5E76\u653E\u5165\u6570\u7EC4</li><li>\u5982\u679C\u8BE5\u4F4D\u7F6E\u4E0A\u6709\u5143\u7D20\u4E14\u54C8\u5E0C\u503C\u76F8\u540C\uFF0C\u90A3\u4E48\u7528\u65B0\u7684\u5143\u7D20\u66FF\u6362\u539F\u6709\u5143\u7D20\uFF0C\u5E76\u8FD4\u56DE\u539F\u6709\u5143\u7D20</li></ul></li><li><p>\u5982\u679C\u6570\u7EC4\u4E2D\u8FD9\u4E2A\u4F4D\u7F6E\u6709\u5143\u7D20\uFF0C\u5E76\u4E14\u548C\u5143\u7D20\u7684\u54C8\u5E0C\u503C\u4E0D\u540C\uFF0C\u5219\u9700\u8981\u5F80\u540E\u8FED\u4EE3\u94FE\u8868</p><ul><li>\u5982\u679C\u94FE\u8868\u4E0A\u6709\u5143\u7D20\u54C8\u5E0C\u503C\u548C\u9700\u8981\u6DFB\u52A0\u5143\u7D20\u54C8\u5E0C\u503C\u76F8\u540C\uFF0C\u90A3\u5C31\u66FF\u6362\uFF0C\u5E76\u8FD4\u56DE\u539F\u6709\u5143\u7D20</li><li>\u5982\u679C\u94FE\u8868\u4E0A\u6CA1\u6709\u5143\u7D20\u54C8\u5E0C\u503C\u548C\u5F85\u6DFB\u52A0\u5143\u7D20\u54C8\u5E0C\u503C\u76F8\u540C\uFF0C\u90A3\u5C31\u5F80\u540E\u63D2\u5165\u4E00\u4E2ANode\uFF0C\u5E76\u4E14\u9700\u8981\u5173\u5FC3\u94FE\u8868\u957F\u5EA6 <ul><li>\u5982\u679C\u94FE\u8868\u957F\u5EA6\u8FBE\u5230\u4E86\u8F6C\u4E3A\u7EA2\u9ED1\u6811\u7684\u9608\u503C\uFF088\uFF09\uFF0C\u90A3\u4E48\u5C31\u9700\u8981\u8FDB\u884C\u94FE\u8868\u8F6C\u7EA2\u9ED1\u6811\u7684\u64CD\u4F5C</li></ul></li></ul></li><li><p>\u7EA2\u9ED1\u6811\uFF0C\u6309\u7167\u7EA2\u9ED1\u6811\u7684\u63D2\u5165\u5143\u7D20\u903B\u8F91\u8FDB\u884C</p></li></ul></li><li><p>\u6DFB\u52A0\u5143\u7D20\u540E\uFF0C\u7559\u610F\u6570\u7EC4\u7684\u957F\u5EA6\uFF0C\u5982\u679C HashMap \u4E2D\u7684\u8282\u70B9\u6570\u91CF\u5927\u4E8E\uFF08\u5BB9\u91CF*\u8D1F\u8F7D\u56E0\u5B50\uFF09\uFF0C\u90A3\u4E48 HashMap \u9700\u8981\u8FDB\u884C\u6269\u5BB9</p></li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// hash(key) \u628Akey\u7684hashCode\u7684\u9AD816\u4F4D\u5F02\u6216\u4F4E16\u4F4D</span>
    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679Ctable\u4E3A\u7A7A\uFF0C\u8BF4\u660EHashMap\u6CA1\u6709\u521D\u59CB\u5316</span>
        <span class="token comment">// resize\u662F\u521D\u59CB\u5316\u64CD\u4F5C</span>
		n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6570\u7EC4\u7D22\u5F15\u7684\u8BA1\u7B97\u4F7F\u7528\u957F\u5EA6-1\u6765\u548Chash\u503C\u8FDB\u884C\u4E0E\u8FD0\u7B97</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u8FD9\u4E2A\u4F4D\u7F6E\u5DF2\u7ECF\u6709\u503C\u4E86\uFF0C\u8BF4\u660E\u6709\u54C8\u5E0C\u51B2\u7A81\uFF0C\u9700\u8981\u5F80\u540E\u94FE</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5982\u679C\u4E24\u4E2ANode\u7684key\u76F8\u540C\uFF0C\u76F4\u63A5\u66FF\u6362value</span>
            e <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5982\u679C\u672C\u6765\u5C31\u662F\u7EA2\u9ED1\u6811\uFF0C\u5C31\u6309\u7167\u7EA2\u9ED1\u6811\u7684\u65B9\u5F0F\u63D2\u5165\u5143\u7D20</span>
            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5982\u679Ckey\u4E0D\u540C\uFF0C\u4F7F\u7528\u5C3E\u63D2\u6CD5\u7684\u65B9\u5F0F\u5F80\u4E0B\u5B58\u50A8</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// \u5982\u679C\u4E00\u6761\u94FE\u4E0A\u7684\u5143\u7D20\u6570\u91CF\u5927\u4E8E\u6811\u5316\u7684\u9608\u503C\uFF0C\u90A3\u4E48\u5C31\u9700\u8981\u628A\u94FE\u8868\u8F6C\u6210\u7EA2\u9ED1\u6811</span>
                        <span class="token comment">// \u9608\u503C\u662F8</span>
                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                p <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key</span>
            <span class="token comment">// \u5982\u679C\u6570\u7EC4\u4E0A\u539F\u672C\u6709\u503C\uFF0C\u90A3\u4E48\u5728\u66FF\u6362\u540E\u628A\u539F\u6709\u7684\u503C\u8FD4\u56DE</span>
            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u63D2\u5165\u5143\u7D20\u540E\u5BB9\u5668\u957F\u5EA6\u5927\u4E8E\u6269\u5BB9\u7684\u9608\u503C\u4E86\uFF0C\u90A3\u4E48\u9700\u8981\u6269\u5BB9</span>
       	<span class="token comment">// \u9608\u503C\uFF1A\u5BB9\u91CF * \u6269\u5BB9\u56E0\u5B50</span>
        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>
    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u83B7\u53D6\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u83B7\u53D6\u5143\u7D20" aria-hidden="true">#</a> \u83B7\u53D6\u5143\u7D20</h2><p>\u83B7\u53D6\u5143\u7D20\u7684\u903B\u8F91\u5176\u5B9E\u4E0D\u96BE\uFF0C\u5176\u5B9E\u65E0\u975E\u662F\u6839\u636E\u952E\u7684 hash \u503C\u6765\u5BFB\u627E</p><p>\u5982\u679C\u80FD\u5728\u6570\u7EC4\u4E2D\u627E\u5230\u5BF9\u5E94\u7684\u5143\u7D20\u5C31\u8FD4\u56DE</p><p>\u5982\u679C\u4E0D\u884C\u5C31\u5F80\u540E\u8FED\u4EE3\u94FE\u8868\u6216\u7EA2\u9ED1\u6811\uFF0C\u6839\u636E\u8282\u70B9\u7C7B\u578B\u6267\u884C\u76F8\u5E94\u7684\u5BFB\u627E\u903B\u8F91</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
    <span class="token comment">// \u8BA1\u7B97\u7D22\u5F15\u503C\u7684\u516C\u5F0F\uFF1A(\u957F\u5EA6-1) &amp; hash</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6570\u7EC4</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">// always check first node</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> first<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u7EA2\u9ED1\u6811</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u94FE\u8868</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5220\u9664\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u5220\u9664\u5143\u7D20" aria-hidden="true">#</a> \u5220\u9664\u5143\u7D20</h2><p>\u5220\u9664\u5143\u7D20\u7684\u903B\u8F91\u603B\u4F53\u4E0A\u770B\u662F\u505A\u4E86\u4E24\u4EF6\u4E8B\u60C5</p><ol><li>\u4F7F\u7528\u83B7\u53D6\u5143\u7D20\u7684\u903B\u8F91\u627E\u5230\u9700\u8981\u5220\u9664\u7684\u5143\u7D20</li><li>\u5206\u522B\u6267\u884C\u4E0D\u540C\u60C5\u51B5\u7684\u5220\u9664\u8282\u70B9\u7684\u903B\u8F91\uFF08\u6570\u7EC4\u3001\u94FE\u8868\u3001\u7EA2\u9ED1\u6811\uFF09</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span>
                           <span class="token keyword">boolean</span> matchValue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// value = null\uFF0CmatchValue = false\uFF0Cmovable = true</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span>
    <span class="token comment">// \u4E0E\u83B7\u53D6\u5143\u7D20\u903B\u8F91\u76F8\u4F3C\uFF0C\u6839\u636Ekey\u4ECEHashMap\u83B7\u53D6\u9700\u8981\u627E\u5230\u7684\u90A3\u4E2A\u5143\u7D20</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span> <span class="token class-name">V</span> v<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            node <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">do</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                         <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        node <span class="token operator">=</span> e<span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchValue <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span>
                             <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5982\u679C\u662F\u7EA2\u9ED1\u6811\uFF0C\u90A3\u4E48\u8D70\u7EA2\u9ED1\u6811\u7684\u79FB\u9664\u8282\u70B9\u7684\u903B\u8F91</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTreeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> movable<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5982\u679C\u8FD9\u4E2A\u8282\u70B9\u662F\u94FE\u8868\u4E0A\u7684\u7B2C\u4E00\u4E2A\u8282\u70B9\uFF0C\u8BF4\u660E\u8FD9\u4E2A\u8282\u70B9\u662F\u6570\u7EC4\u4E0A\u7684\u8282\u70B9</span>
                <span class="token comment">// \u90A3\u4E48\u628A\u8FD9\u4E2A\u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9\u653E\u5230\u6570\u7EC4\u4E0A</span>
                tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5982\u679C\u8FD9\u4E2A\u8282\u70B9\u662F\u94FE\u8868\u4E2D\u7684\u4E00\u4E2A\u8282\u70B9\uFF0C\u90A3\u5C31\u4FEE\u6539\u76F8\u5173\u5F15\u7528\u8FBE\u5230\u65AD\u5F00\u94FE\u8868\u7684\u76EE\u7684</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
            <span class="token operator">--</span>size<span class="token punctuation">;</span>
            <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u904D\u5386-hashmap" tabindex="-1"><a class="header-anchor" href="#\u904D\u5386-hashmap" aria-hidden="true">#</a> \u904D\u5386 HashMap</h2><p>\u904D\u5386 HashMap \u603B\u4F53\u4E0A\u4F1A\u6709\u4E24\u4E2A\u65B9\u5F0F\uFF0C\u904D\u5386 keySet \u548C \u904D\u5386 entrySet</p><p>\u4F46\u662F<strong>\u63A8\u8350\u4F7F\u7528 entrySet \u6765\u904D\u5386</strong>\uFF0C\u539F\u56E0\u662F</p><ul><li>\u6839\u636E entrySet \u8FDB\u884C\u904D\u5386\uFF0C\u904D\u5386\u7684\u662F\u5185\u90E8\u7C7B Node\uFF0C\u5176\u4E2D\u8BB0\u5F55\u4E86\u8282\u70B9\u7684\u6240\u6709\u4FE1\u606F\uFF0C\u83B7\u53D6\u8282\u70B9\u503C\u975E\u5E38\u65B9\u4FBF\uFF0C\u6027\u80FD\u4E5F\u9AD8</li><li>\u6839\u636E keySet \u8FDB\u884C\u904D\u5386\u7684\u8BDD\uFF0C\u904D\u5386\u7684\u662F\u6240\u6709\u952E\uFF0C\u6CA1\u6709\u989D\u5916\u7684\u4FE1\u606F\uFF0C\u83B7\u53D6\u8282\u70B9\u503C\u5219\u9700\u8981<strong>\u989D\u5916\u8C03\u7528 get \u65B9\u6CD5</strong>\uFF0C\u8FD9\u5176\u4E2D\u4E5F\u8981\u6839\u636E\u8282\u70B9\u7C7B\u578B\u8FDB\u884C\u83B7\u53D6\uFF0C\u5E76\u4E0D\u662F\u4E00\u8E74\u800C\u5C31\u7684</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// entrySet\u6A21\u5F0F</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// keySet\u6A21\u5F0F</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hashset" tabindex="-1"><a class="header-anchor" href="#hashset" aria-hidden="true">#</a> HashSet</h2><p>HashSet \u662F\u5BF9 HashMap \u7684\u7B80\u5355\u5305\u88C5\uFF0CHashSet \u7684\u65B9\u6CD5\u90FD\u4F1A\u8F6C\u6362\u6210\u5408\u9002\u7684 HashMap \u65B9\u6CD5\uFF0C\u56E0\u6B64\u5B66\u4E60\u8FC7 HashMap \u7684\u539F\u7406\u540E\uFF0CHashSet \u7684\u5B9E\u73B0\u5176\u5B9E\u4E0D\u96BE\u7406\u89E3</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// HashSet\u91CC\u9762\u7EF4\u62A4\u4E86\u4E00\u4E2AHashMap</span>
	<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
    <span class="token comment">// Dummy value to associate with an Object in the backing Map</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u7B80\u5355\u7684\u65B9\u6CD5\u8F6C\u6362</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),o=[e];function c(l,u){return s(),a("div",null,o)}var r=n(t,[["render",c],["__file","HashMap&HashSet.html.vue"]]);export{r as default};
