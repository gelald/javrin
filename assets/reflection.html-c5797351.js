import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-859571d0.js";const t={},p=e(`<h1 id="反射机制" tabindex="-1"><a class="header-anchor" href="#反射机制" aria-hidden="true">#</a> 反射机制</h1><blockquote><p>Java 中的反射机制是指动态获取的信息以及动态调用对象的方法的功能。在运行中对于任意一个类，都能知道这个类所有的属性和方法；任意一个对象，都能调用它的方法和属性。</p></blockquote><h2 id="java-代码经历的三个阶段" tabindex="-1"><a class="header-anchor" href="#java-代码经历的三个阶段" aria-hidden="true">#</a> Java 代码经历的三个阶段</h2><ol><li>Source 源代码阶段。这个阶段还是 class 文件，存放着开发人员编写好并编译后的 Java 代码。</li><li>Class 类对象阶段。类加载器 ClassLoader 加载 class 文件，使其成为一个 Class 类对象，可以访问到这个类的成员变量、成员方法等。</li><li>RunTime 运行阶段。通过 <code>类 对象名 = new 类()</code> 的方式创建出来。</li></ol><h2 id="class-类" tabindex="-1"><a class="header-anchor" href="#class-类" aria-hidden="true">#</a> Class 类</h2><p>Class 类与 <code>class</code> 关键字不同，Class 是一个类型。</p><p>一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象，而把这些对象组织起来的类就是 Class 类。</p><h2 id="反射的使用" tabindex="-1"><a class="header-anchor" href="#反射的使用" aria-hidden="true">#</a> 反射的使用</h2><h3 id="获取-class-对象" tabindex="-1"><a class="header-anchor" href="#获取-class-对象" aria-hidden="true">#</a> 获取 Class 对象</h3><p>在类加载的时候，JVM会根据 class 文件创建一个 Class 对象</p><p>获取 Class 对象一般有三种方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 源码阶段</span>
<span class="token comment">// 将字节码文件加载进内存，返回Class对象</span>
<span class="token comment">// 常用于配置文件，将全类名定义在配置文件中</span>
<span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;全类名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Class对象阶段</span>
<span class="token comment">// 通过类名的class属性来获取Class对象</span>
<span class="token comment">// 多用于参数的传递</span>
类名<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> 

<span class="token comment">// RunTime阶段</span>
<span class="token comment">// 通过父类Object中的getClass方法获取Class对象</span>
对象<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是</p><blockquote><p>同一个字节码文件在一次程序中只会被加载一次，<strong>不论通过哪一种方式获取的Class对象都是同一个</strong></p></blockquote><h3 id="获取构造方法" tabindex="-1"><a class="header-anchor" href="#获取构造方法" aria-hidden="true">#</a> 获取构造方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取所有public构造方法</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据构造方法的参数类型所对应的类去获取特定的public构造方法</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取所有构造方法</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据构造方法的参数类型所对应的类去获取特定的构造方法</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象" aria-hidden="true">#</a> 创建对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 根据构造方法的参数列表传入指定参数，创建一个对象</span>
<span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取成员方法" tabindex="-1"><a class="header-anchor" href="#获取成员方法" aria-hidden="true">#</a> 获取成员方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取所有public成员方法(除了自己的publib方法，还包含父类/Object类中的public方法)</span>
<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据方法名和成员方法的参数类型所对应的类去获取特定的public成员方法</span>
<span class="token class-name">Method</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取所有成员方法</span>
<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据方法名和成员方法的参数类型所对应的类去获取特定的成员方法</span>
<span class="token class-name">Method</span> <span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意!!</p><p>如果使用 <code>getDeclaredMethods()</code> 这种忽略修饰符的获取方式，后续的使用之前需要执行这一句</p><p><code>method.setAccessible(true)</code></p><p>这样使用的过程中也同样忽略修饰符，才能正常使用。俗称暴力反射。</p><p>获取成员方法后调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 根据Method对象中的参数列表的类型，传入指定类型的参数，同时传入对象，需要确定执行哪个对象的方法</span>
<span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取成员变量" tabindex="-1"><a class="header-anchor" href="#获取成员变量" aria-hidden="true">#</a> 获取成员变量</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取所有由public修饰的成员变量</span>
<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取指定的由public修饰的成员变量</span>
<span class="token class-name">Field</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取所有成员变量，不考虑修饰符</span>
<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取指定的成员变量</span>
<span class="token class-name">Field</span> <span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取成员变量后的操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 为这个变量赋值</span>
<span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取这个变量的值</span>
<span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><ul><li>可以在程序运行过程中，操作成员变量、成员方法、构造方法等对象</li><li>可以解耦，提高程序的可扩展性、灵活性</li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><ul><li>反射创建对象要比正常创建对象效率要低，因为JVM无法对这些代码进行优化，性能会有一定的损耗</li><li>破坏类的封装性，因为反射可以忽略修饰符进行访问，这样就失去了修饰符的意义，甚至还可能有安全问题</li></ul><h2 id="结合优点缺点的一点思考" tabindex="-1"><a class="header-anchor" href="#结合优点缺点的一点思考" aria-hidden="true">#</a> 结合优点缺点的一点思考</h2><p>反射是一把双刃剑。</p><p>在运行期能获取类的信息这无疑是一个巨大的解耦操作，许多优秀的框架正是很好地使用了这个特性，如：Spring框架，为开发带来了许多便利。</p><p>但同时其暴力访问的特点为程序留下一定的隐患，如果使用不当会导致难以通过程序追溯bug的起因。</p><p>而且反射类及反射方法的获取，都是通过从列表中搜寻查找匹配的方法，所以查找性能会随类的大小方法多少而变化。</p><p>所以一般开发的过程中尽量少用，学习反射更多的是协助我们理解那些优秀框架的原理～</p>`,40),c=[p];function l(o,i){return s(),a("div",null,c)}const r=n(t,[["render",l],["__file","reflection.html.vue"]]);export{r as default};
