const n=JSON.parse('{"key":"v-95325128","path":"/writings/project-tools/UML.html","title":"UML基础知识","lang":"zh-CN","frontmatter":{"title":"UML基础知识","icon":"article","category":["干货","项目工具"],"tag":["UML","基础"],"description":"UML 统一建模语言（Unified Modeling Language），是一种为面向对象系统的产品进行说明、可视化和编制文档的标准语言。 UML使用面向对象设计的建模工具，但独立于任何具体程序设计语言 关系描述 关联：这是一种静态关系，与运行过程的状态无关，在运行前就可以确定 普通箭头实线的表示单向关系，箭头指向被拥有者 没有箭头实线的表示双向关系 聚合：整体与部分的关系。不同的生命周期 用带空心菱形的实线表示，菱形指向整体，箭头指向个体 组合：整体与部分的关系，组合比聚合更加严格。相同的生命周期 用带实心菱形的实线表示，菱形指向整体，箭头指向个体 泛化：表示一个更泛化的元素和一个更具体的元素之间的关系。父类与子类的关系 用带三角箭头的实线表示，箭头指向父类 实现：实现类与接口的关系 用带三角箭头的虚线表示，箭头指向接口 依赖：如果一个类的改动会影响到另一个类，则两个类之间存在依赖关系，一般而言，依赖是单向的 用带普通箭头的虚线表示，箭头指向被依赖者","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/project-tools/UML.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"UML基础知识"}],["meta",{"property":"og:description","content":"UML 统一建模语言（Unified Modeling Language），是一种为面向对象系统的产品进行说明、可视化和编制文档的标准语言。 UML使用面向对象设计的建模工具，但独立于任何具体程序设计语言 关系描述 关联：这是一种静态关系，与运行过程的状态无关，在运行前就可以确定 普通箭头实线的表示单向关系，箭头指向被拥有者 没有箭头实线的表示双向关系 聚合：整体与部分的关系。不同的生命周期 用带空心菱形的实线表示，菱形指向整体，箭头指向个体 组合：整体与部分的关系，组合比聚合更加严格。相同的生命周期 用带实心菱形的实线表示，菱形指向整体，箭头指向个体 泛化：表示一个更泛化的元素和一个更具体的元素之间的关系。父类与子类的关系 用带三角箭头的实线表示，箭头指向父类 实现：实现类与接口的关系 用带三角箭头的虚线表示，箭头指向接口 依赖：如果一个类的改动会影响到另一个类，则两个类之间存在依赖关系，一般而言，依赖是单向的 用带普通箭头的虚线表示，箭头指向被依赖者"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-30T16:45:09.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"UML"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:modified_time","content":"2022-07-30T16:45:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UML基础知识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-30T16:45:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"关系描述","slug":"关系描述","link":"#关系描述","children":[]},{"level":2,"title":"类图","slug":"类图","link":"#类图","children":[{"level":3,"title":"类图案例","slug":"类图案例","link":"#类图案例","children":[]}]},{"level":2,"title":"时序图","slug":"时序图","link":"#时序图","children":[{"level":3,"title":"组成元素","slug":"组成元素","link":"#组成元素","children":[]},{"level":3,"title":"消息","slug":"消息","link":"#消息","children":[]},{"level":3,"title":"时序图案例","slug":"时序图案例","link":"#时序图案例","children":[]}]}],"git":{"createdTime":1659199509000,"updatedTime":1659199509000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":3,"words":900},"filePathRelative":"writings/project-tools/UML.md","localizedDate":"2022年7月30日","excerpt":"<h1> UML</h1>\\n<p>统一建模语言（Unified Modeling Language），是一种为<strong>面向对象</strong>系统的产品进行说明、可视化和编制文档的<strong>标准语言</strong>。</p>\\n<p>UML使用面向对象设计的建模工具，但独立于任何具体程序设计语言</p>\\n<img src=\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20210519173435.png\\" style=\\"zoom:80%;\\">\\n<h2> 关系描述</h2>\\n<ul>\\n<li>\\n<p>关联：这是一种静态关系，与运行过程的状态无关，在运行前就可以确定</p>\\n<ul>\\n<li><strong>普通箭头实线</strong>的表示<strong>单向关系</strong>，<strong>箭头</strong>指向<strong>被拥有者</strong></li>\\n<li><strong>没有箭头实线</strong>的表示<strong>双向关系</strong></li>\\n</ul>\\n<p><img src=\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220303110200.png\\" alt=\\"\\"></p>\\n</li>\\n<li>\\n<p>聚合：整体与部分的关系。<strong>不同的生命周期</strong></p>\\n<ul>\\n<li>用<strong>带空心菱形的实线</strong>表示，<strong>菱形</strong>指向<strong>整体</strong>，<strong>箭头</strong>指向<strong>个体</strong></li>\\n</ul>\\n<p><img src=\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220303110127.png\\" alt=\\"\\"></p>\\n</li>\\n<li>\\n<p>组合：整体与部分的关系，组合比聚合更加<strong>严格</strong>。<strong>相同的生命周期</strong></p>\\n<ul>\\n<li>用<strong>带实心菱形的实线</strong>表示，<strong>菱形</strong>指向<strong>整体</strong>，<strong>箭头</strong>指向<strong>个体</strong></li>\\n</ul>\\n<p><img src=\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220303110142.png\\" alt=\\"\\"></p>\\n</li>\\n<li>\\n<p>泛化：表示一个<strong>更泛化</strong>的元素和一个<strong>更具体</strong>的元素之间的关系。父类与子类的关系</p>\\n<ul>\\n<li>用<strong>带三角箭头的实线</strong>表示，<strong>箭头</strong>指向<strong>父类</strong></li>\\n</ul>\\n<p><img src=\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220303105832.png\\" alt=\\"\\"></p>\\n</li>\\n<li>\\n<p>实现：实现类与接口的关系</p>\\n<ul>\\n<li>用<strong>带三角箭头的虚线</strong>表示，<strong>箭头</strong>指向<strong>接口</strong></li>\\n</ul>\\n<p><img src=\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220303110059.png\\" alt=\\"\\"></p>\\n</li>\\n<li>\\n<p>依赖：如果一个类的改动会影响到另一个类，则两个类之间存在依赖关系，<strong>一般而言，依赖是单向的</strong></p>\\n<ul>\\n<li>用<strong>带普通箭头的虚线</strong>表示，<strong>箭头</strong>指向<strong>被依赖者</strong></li>\\n</ul>\\n<p><img src=\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220303110218.png\\" alt=\\"\\"></p>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
