const e=JSON.parse('{"key":"v-6f3692b0","path":"/writings/pattern/adapter.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"title":"适配器模式","icon":"article","category":["设计模式"],"description":"适配器模式 定义：将一个类的接口变成客户端所期望的另一种接口，从而使原本因接口不匹配而导致无法在一起工作的两个类能够一起工作 理解：已有220V的电源，想给5V额定电压的电池充电，需要一个电源适配器来完成兼容 适用场景 已经存在的类，它的方法和需求不匹配但方法结果相同或相似的情况 不是设计阶段需要考虑的设计模式，而是一种类似亡羊补牢的手段 优点： 提高类的复用程度 目标类和适配器类解耦，提高系统的扩展性 在很多场景中适配器模式符合开闭原则","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/adapter.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"适配器模式 定义：将一个类的接口变成客户端所期望的另一种接口，从而使原本因接口不匹配而导致无法在一起工作的两个类能够一起工作 理解：已有220V的电源，想给5V额定电压的电池充电，需要一个电源适配器来完成兼容 适用场景 已经存在的类，它的方法和需求不匹配但方法结果相同或相似的情况 不是设计阶段需要考虑的设计模式，而是一种类似亡羊补牢的手段 优点： 提高类的复用程度 目标类和适配器类解耦，提高系统的扩展性 在很多场景中适配器模式符合开闭原则"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"类适配器","slug":"类适配器","link":"#类适配器","children":[]},{"level":2,"title":"对象适配器","slug":"对象适配器","link":"#对象适配器","children":[]},{"level":2,"title":"接口适配器","slug":"接口适配器","link":"#接口适配器","children":[]},{"level":2,"title":"适配器模式在源码中的体现","slug":"适配器模式在源码中的体现","link":"#适配器模式在源码中的体现","children":[{"level":3,"title":"DispatcherServlet","slug":"dispatcherservlet","link":"#dispatcherservlet","children":[]}]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":2.35,"words":705},"filePathRelative":"writings/pattern/adapter.md","localizedDate":"2023年3月1日","excerpt":"<h1> 适配器模式</h1>\\n<p>定义：将一个类的接口变成客户端所期望的另一种接口，从而使原本因接口不匹配而导致无法在一起工作的两个类能够一起工作</p>\\n<p>理解：已有220V的电源，想给5V额定电压的电池充电，需要一个电源适配器来完成兼容</p>\\n<p>适用场景</p>\\n<ol>\\n<li>已经存在的类，它的方法和需求不匹配但方法结果相同或相似的情况</li>\\n<li>不是设计阶段需要考虑的设计模式，而是一种类似亡羊补牢的手段</li>\\n</ol>\\n<p>优点：</p>\\n<ol>\\n<li>提高类的复用程度</li>\\n<li>目标类和适配器类解耦，提高系统的扩展性</li>\\n<li>在很多场景中适配器模式符合开闭原则</li>\\n</ol>","autoDesc":true}');export{e as data};
