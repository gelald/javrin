const e=JSON.parse('{"key":"v-11002941","path":"/writings/archive/SpringDataJpa.html","title":"SpringDataJpa","lang":"zh-CN","frontmatter":{"description":"SpringDataJpa 概念 JPA：Java Persistence API。JPA是一组Java持久层Api的规范，通过注解或者XML描述【对象-关系表】之间的映射关系，并将实体对象持久化到数据库中。 注解：@Entity、@Table、@Column等等 JPA的API：具体方法对应SQL操作：merge(T t)、persist(Object var1) JPQL查询语句：通过面向对象的方式查询数据，避免程序与SQL语句紧密耦合。 Hibernate：JPA是一套规范，仅仅定义了一些接口，Hibernate是实现了JPA接口的ORM框架。也就是说JPA是一套ORM规范，Hibernate实现了JPA规范。 Spring Data JPA：是JPA Repository的实现，和Hibernate、MyBatis不在同一层次上。按照约定好的方法命名规则来写dao层接口，可以在不写接口实现类的情况下，实现对数据库的访问和操作。同时还提供很多除了CRUD之外的功能，如：分页、排序、复杂查询等。可以理解为JPA规范的在此封装抽象，底层还是使用了Hibernate的JPA技术实现 MyBatis：没有采用面向对象方式，而是采用了原生的SQL，然后把数据填入POJO","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/archive/SpringDataJpa.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"SpringDataJpa"}],["meta",{"property":"og:description","content":"SpringDataJpa 概念 JPA：Java Persistence API。JPA是一组Java持久层Api的规范，通过注解或者XML描述【对象-关系表】之间的映射关系，并将实体对象持久化到数据库中。 注解：@Entity、@Table、@Column等等 JPA的API：具体方法对应SQL操作：merge(T t)、persist(Object var1) JPQL查询语句：通过面向对象的方式查询数据，避免程序与SQL语句紧密耦合。 Hibernate：JPA是一套规范，仅仅定义了一些接口，Hibernate是实现了JPA接口的ORM框架。也就是说JPA是一套ORM规范，Hibernate实现了JPA规范。 Spring Data JPA：是JPA Repository的实现，和Hibernate、MyBatis不在同一层次上。按照约定好的方法命名规则来写dao层接口，可以在不写接口实现类的情况下，实现对数据库的访问和操作。同时还提供很多除了CRUD之外的功能，如：分页、排序、复杂查询等。可以理解为JPA规范的在此封装抽象，底层还是使用了Hibernate的JPA技术实现 MyBatis：没有采用面向对象方式，而是采用了原生的SQL，然后把数据填入POJO"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-24T09:34:03.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-02-24T09:34:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringDataJpa\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-24T09:34:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"SpringDataJpa 的查询方式","slug":"springdatajpa-的查询方式","link":"#springdatajpa-的查询方式","children":[]},{"level":3,"title":"JPA主要类及结构图","slug":"jpa主要类及结构图","link":"#jpa主要类及结构图","children":[]}]},{"level":2,"title":"Jpa的映射策略","slug":"jpa的映射策略","link":"#jpa的映射策略","children":[{"level":3,"title":"ImplicitNamingStrategy","slug":"implicitnamingstrategy","link":"#implicitnamingstrategy","children":[]},{"level":3,"title":"PhysicalNamingStrategy","slug":"physicalnamingstrategy","link":"#physicalnamingstrategy","children":[]},{"level":3,"title":"PhysicalNamingStrategy和ImplicitNamingStrategy的区别","slug":"physicalnamingstrategy和implicitnamingstrategy的区别","link":"#physicalnamingstrategy和implicitnamingstrategy的区别","children":[]}]},{"level":2,"title":"开发时遇到的问题","slug":"开发时遇到的问题","link":"#开发时遇到的问题","children":[{"level":3,"title":"Could not safely identify store assignment for repository candidate interface","slug":"could-not-safely-identify-store-assignment-for-repository-candidate-interface","link":"#could-not-safely-identify-store-assignment-for-repository-candidate-interface","children":[]}]}],"git":{"createdTime":1659198112000,"updatedTime":1677231243000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":2},{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":10.33,"words":3100},"filePathRelative":"writings/archive/SpringDataJpa.md","localizedDate":"2022年7月30日","excerpt":"<h1> SpringDataJpa</h1>\\n<h2> 概念</h2>\\n<ul>\\n<li>\\n<p>JPA：Java Persistence API。<strong>JPA是一组Java持久层Api的规范</strong>，通过注解或者XML描述【对象-关系表】之间的映射关系，并将实体对象持久化到数据库中。</p>\\n<ul>\\n<li>注解：<code>@Entity</code>、<code>@Table</code>、<code>@Column</code>等等</li>\\n<li>JPA的API：具体方法对应SQL操作：<code>merge(T t)</code>、<code>persist(Object var1)</code></li>\\n<li>JPQL查询语句：通过面向对象的方式查询数据，避免程序与SQL语句紧密耦合。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Hibernate：JPA是一套规范，仅仅定义了一些接口，<strong>Hibernate是实现了JPA接口的ORM框架</strong>。也就是说JPA是一套ORM规范，Hibernate实现了JPA规范。</p>\\n</li>\\n<li>\\n<p>Spring Data JPA：<strong>是JPA Repository的实现</strong>，和Hibernate、MyBatis不在同一层次上。<strong>按照约定好的方法命名规则来写dao层接口</strong>，可以在不写接口实现类的情况下，实现对数据库的访问和操作。同时还提供很多除了CRUD之外的功能，如：分页、排序、复杂查询等。<strong>可以理解为JPA规范的在此封装抽象，底层还是使用了Hibernate的JPA技术实现</strong></p>\\n</li>\\n<li>\\n<p>MyBatis：没有采用面向对象方式，而是采用了原生的SQL，然后把数据填入POJO</p>\\n</li>\\n</ul>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
