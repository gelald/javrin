const e=JSON.parse('{"key":"v-068d30bd","path":"/writings/Java-collection/LinkedList.html","title":"LinkedList","lang":"zh-CN","frontmatter":{"title":"LinkedList","icon":"article","category":["Java集合"],"description":"LinkedList 概述 LinkedList 同时实现了 List 接口和 Deque 接口，也就是说它既可以作为一个顺序容器，也可以作为一个队列，又可以作为一个栈进行使用。关于栈或队列，现在首选的容器是 ArrayDeque，在用作栈或队列时性能比 LinkedList 要好。 LinkedList 的结构是双向链表，所以一切与下标相关的操作都是线性时间，而在首尾增加或删除元素的操作都是常数时间。为了追求性能它没有实现同步，如果需要多个行程访问则需要使用 Collections.synchronizedList() 进行包装","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Java-collection/LinkedList.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"LinkedList"}],["meta",{"property":"og:description","content":"LinkedList 概述 LinkedList 同时实现了 List 接口和 Deque 接口，也就是说它既可以作为一个顺序容器，也可以作为一个队列，又可以作为一个栈进行使用。关于栈或队列，现在首选的容器是 ArrayDeque，在用作栈或队列时性能比 LinkedList 要好。 LinkedList 的结构是双向链表，所以一切与下标相关的操作都是线性时间，而在首尾增加或删除元素的操作都是常数时间。为了追求性能它没有实现同步，如果需要多个行程访问则需要使用 Collections.synchronizedList() 进行包装"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LinkedList\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"底层实现","slug":"底层实现","link":"#底层实现","children":[]},{"level":2,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":2,"title":"添加元素","slug":"添加元素","link":"#添加元素","children":[]},{"level":2,"title":"获取元素","slug":"获取元素","link":"#获取元素","children":[]},{"level":2,"title":"删除元素","slug":"删除元素","link":"#删除元素","children":[]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.42,"words":1327},"filePathRelative":"writings/Java-collection/LinkedList.md","localizedDate":"2023年2月28日","excerpt":"<h1> LinkedList</h1>\\n<h2> 概述</h2>\\n<p>LinkedList 同时实现了 List 接口和 Deque 接口，也就是说它既可以作为一个顺序容器，也可以作为一个队列，又可以作为一个栈进行使用。关于栈或队列，现在首选的容器是 ArrayDeque，在用作栈或队列时性能比 LinkedList 要好。</p>\\n<p>LinkedList 的结构是双向链表，所以一切与下标相关的操作都是线性时间，而在首尾增加或删除元素的操作都是常数时间。为了追求性能它没有实现同步，如果需要多个行程访问则需要使用 <code>Collections.synchronizedList()</code> 进行包装</p>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
