const e=JSON.parse('{"key":"v-12498a88","path":"/writings/Java-base/reflection.html","title":"反射机制","lang":"zh-CN","frontmatter":{"title":"反射机制","icon":"article","category":["Java基础"],"tag":["框架基础"],"description":"反射机制 Java 中的反射机制是指动态获取的信息以及动态调用对象的方法的功能。在运行中对于任意一个类，都能知道这个类所有的属性和方法；任意一个对象，都能调用它的方法和属性。 Java 代码经历的三个阶段 Source 源代码阶段。这个阶段还是 class 文件，存放着开发人员编写好并编译后的 Java 代码。 Class 类对象阶段。类加载器 ClassLoader 加载 class 文件，使其成为一个 Class 类对象，可以访问到这个类的成员变量、成员方法等。 RunTime 运行阶段。通过 类 对象名 = new 类() 的方式创建出来。","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/Java-base/reflection.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"反射机制"}],["meta",{"property":"og:description","content":"反射机制 Java 中的反射机制是指动态获取的信息以及动态调用对象的方法的功能。在运行中对于任意一个类，都能知道这个类所有的属性和方法；任意一个对象，都能调用它的方法和属性。 Java 代码经历的三个阶段 Source 源代码阶段。这个阶段还是 class 文件，存放着开发人员编写好并编译后的 Java 代码。 Class 类对象阶段。类加载器 ClassLoader 加载 class 文件，使其成为一个 Class 类对象，可以访问到这个类的成员变量、成员方法等。 RunTime 运行阶段。通过 类 对象名 = new 类() 的方式创建出来。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:20:13.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"框架基础"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"Java 代码经历的三个阶段","slug":"java-代码经历的三个阶段","link":"#java-代码经历的三个阶段","children":[]},{"level":2,"title":"Class 类","slug":"class-类","link":"#class-类","children":[]},{"level":2,"title":"反射的使用","slug":"反射的使用","link":"#反射的使用","children":[{"level":3,"title":"获取 Class 对象","slug":"获取-class-对象","link":"#获取-class-对象","children":[]},{"level":3,"title":"获取构造方法","slug":"获取构造方法","link":"#获取构造方法","children":[]},{"level":3,"title":"创建对象","slug":"创建对象","link":"#创建对象","children":[]},{"level":3,"title":"获取成员方法","slug":"获取成员方法","link":"#获取成员方法","children":[]},{"level":3,"title":"获取成员变量","slug":"获取成员变量","link":"#获取成员变量","children":[]}]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":2,"title":"结合优点缺点的一点思考","slug":"结合优点缺点的一点思考","link":"#结合优点缺点的一点思考","children":[]}],"git":{"createdTime":1677597613000,"updatedTime":1677597613000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.36,"words":1307},"filePathRelative":"writings/Java-base/reflection.md","localizedDate":"2023年2月28日","excerpt":"<h1> 反射机制</h1>\\n<blockquote>\\n<p>Java 中的反射机制是指动态获取的信息以及动态调用对象的方法的功能。在运行中对于任意一个类，都能知道这个类所有的属性和方法；任意一个对象，都能调用它的方法和属性。</p>\\n</blockquote>\\n<h2> Java 代码经历的三个阶段</h2>\\n<ol>\\n<li>Source 源代码阶段。这个阶段还是 class 文件，存放着开发人员编写好并编译后的 Java 代码。</li>\\n<li>Class 类对象阶段。类加载器 ClassLoader 加载 class 文件，使其成为一个 Class 类对象，可以访问到这个类的成员变量、成员方法等。</li>\\n<li>RunTime 运行阶段。通过 <code>类 对象名 = new 类()</code> 的方式创建出来。</li>\\n</ol>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
