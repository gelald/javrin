const t=JSON.parse('{"key":"v-3ffce9f0","path":"/writings/MySQL/MySQL-optimization-2.html","title":"MySQL 优化","lang":"zh-CN","frontmatter":{"title":"MySQL 优化","icon":"article","category":["数据库"],"tag":["MySQL","优化"],"description":"MySQL优化 这一节我们来看 MySQL 优化。一谈到 MySQL 优化，我们往往第一时间就想到了加索引，加索引确实是优化的其中一个手段，但是也要加「对」索引，更重要的是还有其他有效但少有提及的做法。 快速的查询，不光光是体验的友好，更是技术的彰显。 索引 显而易见地，在数据量不是很大的情况下，用索引往往可以提升查询的效率，而大多慢查询也和索引不合理产生。 组合索引 有些时候我们会尽可能地去建一些组合索引，能有效提升查询的效率，我们希望出现这两种情况：","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/MySQL/MySQL-optimization-2.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"MySQL 优化"}],["meta",{"property":"og:description","content":"MySQL优化 这一节我们来看 MySQL 优化。一谈到 MySQL 优化，我们往往第一时间就想到了加索引，加索引确实是优化的其中一个手段，但是也要加「对」索引，更重要的是还有其他有效但少有提及的做法。 快速的查询，不光光是体验的友好，更是技术的彰显。 索引 显而易见地，在数据量不是很大的情况下，用索引往往可以提升查询的效率，而大多慢查询也和索引不合理产生。 组合索引 有些时候我们会尽可能地去建一些组合索引，能有效提升查询的效率，我们希望出现这两种情况："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"优化"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"索引","slug":"索引","link":"#索引","children":[{"level":3,"title":"组合索引","slug":"组合索引","link":"#组合索引","children":[]},{"level":3,"title":"索引失效","slug":"索引失效","link":"#索引失效","children":[]}]},{"level":2,"title":"select * 惹的祸","slug":"select-惹的祸","link":"#select-惹的祸","children":[]},{"level":2,"title":"union 和 union all","slug":"union-和-union-all","link":"#union-和-union-all","children":[]},{"level":2,"title":"分页优化","slug":"分页优化","link":"#分页优化","children":[]},{"level":2,"title":"不要过于频繁执行 count(*)","slug":"不要过于频繁执行-count","link":"#不要过于频繁执行-count","children":[]},{"level":2,"title":"建立索引规则","slug":"建立索引规则","link":"#建立索引规则","children":[]}],"git":{"createdTime":1676904395000,"updatedTime":1677655655000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":4.91,"words":1474},"filePathRelative":"writings/MySQL/MySQL-optimization-2.md","localizedDate":"2023年2月20日","excerpt":"<h1> MySQL优化</h1>\\n<blockquote>\\n<p>这一节我们来看 MySQL 优化。一谈到 MySQL 优化，我们往往第一时间就想到了加索引，加索引确实是优化的其中一个手段，但是也要加「对」索引，更重要的是还有其他有效但少有提及的做法。</p>\\n<p>快速的查询，不光光是体验的友好，更是技术的彰显。</p>\\n</blockquote>\\n<h2> 索引</h2>\\n<p>显而易见地，在数据量不是很大的情况下，用索引往往可以提升查询的效率，而大多慢查询也和索引不合理产生。</p>\\n<h3> 组合索引</h3>\\n<p>有些时候我们会尽可能地去建一些组合索引，能有效提升查询的效率，我们希望出现这两种情况：</p>","autoDesc":true}');export{t as data};
