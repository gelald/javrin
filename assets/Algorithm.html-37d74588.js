const t=JSON.parse('{"key":"v-bb9e2294","path":"/writings/archive/Algorithm.html","title":"二分法","lang":"zh-CN","frontmatter":{"description":"二分法 适用场景 注意事项 遍历的条件 while(left &lt;= right)；退出循环的条件是left&gt;right，需要思考最终返回left还是right while(left &lt; right)；退出循环的条件是left=right，只需返回left或right即可，因为是一样的值 while(left+1 &lt;= right)；退出循环的条件是left+1=right，需要思考最终返回left还是right 推荐使用while(left &lt; right) 边界收缩，mid可以分到左边或者分到右边 左边，即区间分成[left, mid]和[mid+1, right] left = mid + 1; right = mid; 右边，即区间分成[left, mid-1]和[mid, right] left = mid; right = mid - 1;","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/archive/Algorithm.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"二分法"}],["meta",{"property":"og:description","content":"二分法 适用场景 注意事项 遍历的条件 while(left &lt;= right)；退出循环的条件是left&gt;right，需要思考最终返回left还是right while(left &lt; right)；退出循环的条件是left=right，只需返回left或right即可，因为是一样的值 while(left+1 &lt;= right)；退出循环的条件是left+1=right，需要思考最终返回left还是right 推荐使用while(left &lt; right) 边界收缩，mid可以分到左边或者分到右边 左边，即区间分成[left, mid]和[mid+1, right] left = mid + 1; right = mid; 右边，即区间分成[left, mid-1]和[mid, right] left = mid; right = mid - 1;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-30T16:21:52.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2022-07-30T16:21:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-30T16:21:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"模板","slug":"模板","link":"#模板","children":[]},{"level":2,"title":"适用场景","slug":"适用场景-1","link":"#适用场景-1","children":[]},{"level":2,"title":"适用场景","slug":"适用场景-2","link":"#适用场景-2","children":[]},{"level":2,"title":"适用场景","slug":"适用场景-3","link":"#适用场景-3","children":[{"level":3,"title":"如何判断使用快慢指针而不是双指针","slug":"如何判断使用快慢指针而不是双指针","link":"#如何判断使用快慢指针而不是双指针","children":[]}]}],"git":{"createdTime":1659198112000,"updatedTime":1659198112000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":3.1,"words":929},"filePathRelative":"writings/archive/Algorithm.md","localizedDate":"2022年7月30日","excerpt":"<h1> 二分法</h1>\\n<h2> 适用场景</h2>\\n<h2> 注意事项</h2>\\n<ol>\\n<li>\\n<p>遍历的条件</p>\\n<ol>\\n<li><code>while(left &lt;= right)</code>；退出循环的条件是left&gt;right，需要思考最终返回left还是right</li>\\n<li><code>while(left &lt; right)</code>；退出循环的条件是left=right，只需返回left或right即可，因为是一样的值</li>\\n<li><code>while(left+1 &lt;= right)</code>；退出循环的条件是left+1=right，需要思考最终返回left还是right</li>\\n</ol>\\n<p><strong>推荐使用<code>while(left &lt; right)</code></strong></p>\\n</li>\\n<li>\\n<p>边界收缩，mid可以分到左边或者分到右边</p>\\n<ul>\\n<li>\\n<p>左边，即区间分成[left, mid]和[mid+1, right]</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>left = mid + 1;\\nright = mid;\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>右边，即区间分成[left, mid-1]和[mid, right]</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>left = mid;\\nright = mid - 1;\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
