const n=JSON.parse('{"key":"v-6d174bc4","path":"/writings/concurrency/serial-to-parallel.html","title":"由串行到并行的故事","lang":"zh-CN","frontmatter":{"title":"由串行到并行的故事","icon":"article","isOriginal":true,"category":["并发","文章"],"tag":["异步","线程池","问题解决","优化"],"description":"由串行到并行的故事 需求引入 现在需要设计一个复合了多个查询的接口 查询订单信息 查询司机信息 查询车辆信息 这三个信息需要在一个查询接口中同时返回 串行实现 在设计一个复合了多个查询信息的接口时，一般情况下很容易想到串行的实现方式 public void test1() throws InterruptedException { // 查询订单信息 System.out.println(\\"===== 正在查询订单信息 =====\\"); TimeUnit.MILLISECONDS.sleep(200); System.out.println(\\"***** 查询订单信息成功 *****\\"); // 查询司机信息 System.out.println(\\"===== 正在查询司机信息 =====\\"); TimeUnit.MILLISECONDS.sleep(100); System.out.println(\\"***** 查询司机信息成功 *****\\"); // 查询车辆信息 System.out.println(\\"===== 正在查询车辆信息 =====\\"); TimeUnit.MILLISECONDS.sleep(200); System.out.println(\\"***** 查询车辆信息成功 *****\\"); }","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/concurrency/serial-to-parallel.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"由串行到并行的故事"}],["meta",{"property":"og:description","content":"由串行到并行的故事 需求引入 现在需要设计一个复合了多个查询的接口 查询订单信息 查询司机信息 查询车辆信息 这三个信息需要在一个查询接口中同时返回 串行实现 在设计一个复合了多个查询信息的接口时，一般情况下很容易想到串行的实现方式 public void test1() throws InterruptedException { // 查询订单信息 System.out.println(\\"===== 正在查询订单信息 =====\\"); TimeUnit.MILLISECONDS.sleep(200); System.out.println(\\"***** 查询订单信息成功 *****\\"); // 查询司机信息 System.out.println(\\"===== 正在查询司机信息 =====\\"); TimeUnit.MILLISECONDS.sleep(100); System.out.println(\\"***** 查询司机信息成功 *****\\"); // 查询车辆信息 System.out.println(\\"===== 正在查询车辆信息 =====\\"); TimeUnit.MILLISECONDS.sleep(200); System.out.println(\\"***** 查询车辆信息成功 *****\\"); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T15:46:06.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:tag","content":"异步"}],["meta",{"property":"article:tag","content":"线程池"}],["meta",{"property":"article:tag","content":"问题解决"}],["meta",{"property":"article:tag","content":"优化"}],["meta",{"property":"article:modified_time","content":"2023-02-28T15:46:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"由串行到并行的故事\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T15:46:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"需求引入","slug":"需求引入","link":"#需求引入","children":[]},{"level":2,"title":"串行实现","slug":"串行实现","link":"#串行实现","children":[]},{"level":2,"title":"Runnable/Callable + Future 实现并行调用","slug":"runnable-callable-future-实现并行调用","link":"#runnable-callable-future-实现并行调用","children":[{"level":3,"title":"开启子线程的方式有三种","slug":"开启子线程的方式有三种","link":"#开启子线程的方式有三种","children":[]},{"level":3,"title":"Future 和 FutureTask","slug":"future-和-futuretask","link":"#future-和-futuretask","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":2,"title":"ExecutorService 实现并行调用","slug":"executorservice-实现并行调用","link":"#executorservice-实现并行调用","children":[{"level":3,"title":"Executor","slug":"executor","link":"#executor","children":[]},{"level":3,"title":"ExecutorService","slug":"executorservice","link":"#executorservice","children":[]},{"level":3,"title":"ThreadPoolExecutor","slug":"threadpoolexecutor","link":"#threadpoolexecutor","children":[]},{"level":3,"title":"ThreadPoolTaskExecutor","slug":"threadpooltaskexecutor","link":"#threadpooltaskexecutor","children":[]},{"level":3,"title":"Executors","slug":"executors","link":"#executors","children":[]},{"level":3,"title":"实现","slug":"实现-1","link":"#实现-1","children":[]}]},{"level":2,"title":"ThreadPoolTaskExecutor 实现并行调用","slug":"threadpooltaskexecutor-实现并行调用","link":"#threadpooltaskexecutor-实现并行调用","children":[]},{"level":2,"title":"CompletionService 实现并行调用","slug":"completionservice-实现并行调用","link":"#completionservice-实现并行调用","children":[{"level":3,"title":"CompletionService","slug":"completionservice","link":"#completionservice","children":[]},{"level":3,"title":"ExecutorCompletionService","slug":"executorcompletionservice","link":"#executorcompletionservice","children":[]},{"level":3,"title":"实现","slug":"实现-2","link":"#实现-2","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"CompletableFuture 实现并行调用","slug":"completablefuture-实现并行调用","link":"#completablefuture-实现并行调用","children":[{"level":3,"title":"CompletableFuture","slug":"completablefuture","link":"#completablefuture","children":[]},{"level":3,"title":"CompletionStage","slug":"completionstage","link":"#completionstage","children":[]},{"level":3,"title":"CompletableFuture 方法简介","slug":"completablefuture-方法简介","link":"#completablefuture-方法简介","children":[]},{"level":3,"title":"实现","slug":"实现-3","link":"#实现-3","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-1","link":"#应用场景-1","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1659199509000,"updatedTime":1677599166000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":2},{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":2}]},"readingTime":{"minutes":13.05,"words":3916},"filePathRelative":"writings/concurrency/serial-to-parallel.md","localizedDate":"2022年7月30日","excerpt":"<h1> 由串行到并行的故事</h1>\\n<h2> 需求引入</h2>\\n<p>现在需要设计一个复合了多个查询的接口</p>\\n<ol>\\n<li>查询订单信息</li>\\n<li>查询司机信息</li>\\n<li>查询车辆信息</li>\\n</ol>\\n<p>这三个信息需要在一个查询接口中同时返回</p>\\n<h2> 串行实现</h2>\\n<p>在设计一个复合了多个查询信息的接口时，一般情况下很容易想到串行的实现方式</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 查询订单信息</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"===== 正在查询订单信息 =====\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MILLISECONDS</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">200</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***** 查询订单信息成功 *****\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 查询司机信息</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"===== 正在查询司机信息 =====\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MILLISECONDS</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***** 查询司机信息成功 *****\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 查询车辆信息</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"===== 正在查询车辆信息 =====\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MILLISECONDS</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">200</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***** 查询车辆信息成功 *****\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{n as data};
