import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-Bow4eu0W.js";const n={},t=e(`<p>微服务是分布式的架构</p><p>分布式：一个整体的应用分布在不同的网络的节点上或不同的计算机上，每一个节点需要远程通信</p><p>重点：服务之间的通信</p><p>基于Http协议的简单远程调用，RestTemplate</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RestTemplate</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> restTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RestTemplateBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> restTemplateBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> restTemplateBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RestTemplate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> restTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">restTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getForObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;url&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//url、返回值类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的url暂时是写死的，如果服务做了集群这种做法就不恰当了，因为需要替换ip，所以需要使用到服务注册和发现的知识</p><p>服务注册中心</p><ol><li><p>服务地址的统一管理问题</p><p>管理服务提供者的所有url地址；当每一个服务启动时，把url注册到第三方组件上</p><p><strong>消费者无需注册</strong></p></li><li><p>动态感知（服务器上线（扩容）、下线（宕机））</p><p>途径：心跳HeartBeat，定时发送数据量很小的socket数据包，在某一个心跳超时时间内没有发送心跳数据包，可以认为服务已下线</p></li><li><p>通知客户端</p><ol><li>schedule pull 客户端定时轮询，服务注册中心看看服务提供者是否正常。条件：<strong>定时拉取的任务</strong>，缺陷：任务之间有间隔时间，<strong>需要考察合适的间隔时间</strong>，时间过长，数据有可能出现错误；时间过短，需要消耗客户端的线程资源去轮询。</li><li>push 服务注册中心主动推送服务提供者的状态改变。条件：和客户端（服务消费者）建立连接，这个连接需要一直处于激活的状态，这里就涉及到<strong>会话的维护</strong>，缺陷：<strong>如果说服务注册中心要和大量的服务消费者会话维持，需要维护大量的会话管理，对注册中心的性能有一定的消耗</strong></li><li><strong>long pull 客户端长轮询（Nacos的实现）</strong>，客户端发起请求后，在一段时间之内，如果服务端没有数据变化，那么服务端会先挂起这个请求，知道服务端发生变化后再推送数据。结合了客户端的pull和服务端的push</li><li>Zookeeper的做法：客户端需要告诉服务注册中心，订阅某个服务的变化通知，服务端推送客户端</li></ol></li></ol><p>Zookeeper存储结构</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1gg2axfnzi5j317k0jetca.jpg" alt="image-20200623162709638"></p><p>spring-cloud-product下面的是商品服务的集群；同一个服务名，但是有多个节点</p><p>持久化节点：节点创建之后，需要手动删除</p><p>临时节点：节点创建之后，和当前创建的会话的生命周期保持一致，会话关闭，节点删除。使用临时节点是因为，服务宕机后，zookeeper要去删除掉这个节点，随之通知服务消费者</p><p>关注其他组件</p><p>功能是一致的，所以需要重点关注特性</p>`,15),l=[t];function p(h,r){return a(),s("div",null,l)}const o=i(n,[["render",p],["__file","SpringCloudZookeeper.html.vue"]]),g=JSON.parse('{"path":"/writings/SpringCloud/SpringCloudZookeeper.html","title":"","lang":"zh-CN","frontmatter":{"description":"微服务是分布式的架构 分布式：一个整体的应用分布在不同的网络的节点上或不同的计算机上，每一个节点需要远程通信 重点：服务之间的通信 基于Http协议的简单远程调用，RestTemplate 这里的url暂时是写死的，如果服务做了集群这种做法就不恰当了，因为需要替换ip，所以需要使用到服务注册和发现的知识 服务注册中心 服务地址的统一管理问题 管理服务提...","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/SpringCloud/SpringCloudZookeeper.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:description","content":"微服务是分布式的架构 分布式：一个整体的应用分布在不同的网络的节点上或不同的计算机上，每一个节点需要远程通信 重点：服务之间的通信 基于Http协议的简单远程调用，RestTemplate 这里的url暂时是写死的，如果服务做了集群这种做法就不恰当了，因为需要替换ip，所以需要使用到服务注册和发现的知识 服务注册中心 服务地址的统一管理问题 管理服务提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1gg2axfnzi5j317k0jetca.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-14T05:20:02.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2022-07-14T05:20:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1gg2axfnzi5j317k0jetca.jpg\\"],\\"dateModified\\":\\"2022-07-14T05:20:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":1657776002000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":2.5,"words":751},"filePathRelative":"writings/SpringCloud/SpringCloudZookeeper.md","autoDesc":true}');export{o as comp,g as data};
