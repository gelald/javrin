const t=JSON.parse('{"key":"v-1ffb9084","path":"/writings/pattern/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"中介者模式","lang":"zh-CN","frontmatter":{"description":"中介者模式 定义：用一个中介对象封装一系列的对象交互，中介者使各对象不需要显式地相互作用，从而使其耦合松散，而且可以独立地改变他们之间的交互 核心：通过中介者解耦系统各层次对象的直接耦合，层次对象的对外依赖通信都交给中介者转发 适用场景：系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解 优点：降低了类之间的耦合度，把多对多依赖转换成一对多依赖，符合迪米特法则 缺点：当同事类数量变多时，中介者会变得臃肿且难以维护 示例 用一个简易的服务注册中心为例，在引入注册中心之前，服务调用方需要持有各个服务提供者的引用，高度耦合，引入注册中心后可以实现各服务解耦","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"中介者模式"}],["meta",{"property":"og:description","content":"中介者模式 定义：用一个中介对象封装一系列的对象交互，中介者使各对象不需要显式地相互作用，从而使其耦合松散，而且可以独立地改变他们之间的交互 核心：通过中介者解耦系统各层次对象的直接耦合，层次对象的对外依赖通信都交给中介者转发 适用场景：系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解 优点：降低了类之间的耦合度，把多对多依赖转换成一对多依赖，符合迪米特法则 缺点：当同事类数量变多时，中介者会变得臃肿且难以维护 示例 用一个简易的服务注册中心为例，在引入注册中心之前，服务调用方需要持有各个服务提供者的引用，高度耦合，引入注册中心后可以实现各服务解耦"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中介者模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"中介者模式在源码中的体现","slug":"中介者模式在源码中的体现","link":"#中介者模式在源码中的体现","children":[{"level":3,"title":"JDK","slug":"jdk","link":"#jdk","children":[]}]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"writings/pattern/中介者模式.md","localizedDate":"2023年3月1日","excerpt":"<h1> 中介者模式</h1>\\n<p>定义：用一个中介对象封装一系列的对象交互，中介者使各对象不需要显式地相互作用，从而使其耦合松散，而且可以独立地改变他们之间的交互</p>\\n<p>核心：通过中介者解耦系统各层次对象的直接耦合，层次对象的对外依赖通信都交给中介者转发</p>\\n<p>适用场景：系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解</p>\\n<p>优点：降低了类之间的耦合度，把多对多依赖转换成一对多依赖，符合迪米特法则</p>\\n<p>缺点：当同事类数量变多时，中介者会变得臃肿且难以维护</p>\\n<h2> 示例</h2>\\n<p>用一个简易的服务注册中心为例，在引入注册中心之前，服务调用方需要持有各个服务提供者的引用，高度耦合，引入注册中心后可以实现各服务解耦</p>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{t as data};
