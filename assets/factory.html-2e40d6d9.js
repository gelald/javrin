const e=JSON.parse('{"key":"v-1e1085cd","path":"/writings/pattern/factory.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"title":"工厂模式","icon":"article","category":["设计模式"],"description":"工厂模式 简单工厂模式（产品的工厂） 定义：由一个工厂对象决定创建出哪一种产品类的实例。但他不属于 GOF 23种设计模式之一 理解：不主动地调用经常需要创建的对象的构造方法，而是使用一个工厂来调用其方法帮助我们创建这个需要创建的对象 适用场景：创建对象较少且数量确定的场景 优点：只需传入一个正确的参数或不传入也可以，就可以获取所需对象，无须知道创建细节 缺点：增加新的产品时需要修改工厂类的判断逻辑，违背开闭原则，不易于扩展过于复杂的产品结构 示例","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/factory.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"工厂模式 简单工厂模式（产品的工厂） 定义：由一个工厂对象决定创建出哪一种产品类的实例。但他不属于 GOF 23种设计模式之一 理解：不主动地调用经常需要创建的对象的构造方法，而是使用一个工厂来调用其方法帮助我们创建这个需要创建的对象 适用场景：创建对象较少且数量确定的场景 优点：只需传入一个正确的参数或不传入也可以，就可以获取所需对象，无须知道创建细节 缺点：增加新的产品时需要修改工厂类的判断逻辑，违背开闭原则，不易于扩展过于复杂的产品结构 示例"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"简单工厂模式（产品的工厂）","slug":"简单工厂模式-产品的工厂","link":"#简单工厂模式-产品的工厂","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"简单工厂模式在源码中的体现","slug":"简单工厂模式在源码中的体现","link":"#简单工厂模式在源码中的体现","children":[]}]},{"level":2,"title":"工厂方法模式（工厂的工厂）","slug":"工厂方法模式-工厂的工厂","link":"#工厂方法模式-工厂的工厂","children":[{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"抽象工厂模式（复杂产品的工厂）","slug":"抽象工厂模式-复杂产品的工厂","link":"#抽象工厂模式-复杂产品的工厂","children":[{"level":3,"title":"示例","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"工厂方法模式和抽象工厂模式的区别","slug":"工厂方法模式和抽象工厂模式的区别","link":"#工厂方法模式和抽象工厂模式的区别","children":[]}]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":5.85,"words":1754},"filePathRelative":"writings/pattern/factory.md","localizedDate":"2023年3月1日","excerpt":"<h1> 工厂模式</h1>\\n<h2> 简单工厂模式（产品的工厂）</h2>\\n<p>定义：由一个工厂对象决定创建出哪一种产品类的实例。但他<strong>不属于 GOF 23种设计模式之一</strong></p>\\n<p>理解：不主动地调用经常需要创建的对象的构造方法，而是使用一个工厂来调用其方法帮助我们创建这个需要创建的对象</p>\\n<p>适用场景：创建对象较少且数量确定的场景</p>\\n<p>优点：只需传入一个正确的参数或不传入也可以，就可以获取所需对象，无须知道创建细节</p>\\n<p>缺点：增加新的产品时需要修改工厂类的判断逻辑，违背开闭原则，不易于扩展过于复杂的产品结构</p>\\n<h3> 示例</h3>","copyright":{"author":"gelald","license":"MIT Licensed"},"autoDesc":true}');export{e as data};
