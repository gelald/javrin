import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-BvnWu5Av.js";const o={};function s(r,e){return n(),a("div",null,[...e[0]||(e[0]=[t('<h1 id="sso" tabindex="-1"><a class="header-anchor" href="#sso"><span>SSO</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>SSO 是 Single Sign On 的缩写，意为单点登录，是一种思想、规范，单点登录的意思就是在一个多应用的系统中，用户只需要登陆一次就可以访问他权限范围内的应用，注销也同样只需要注销一次，比如淘宝、天猫等。</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221106162900.png" alt=""></p><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h2><p>既然 SSO 是一种抽象的思想，我们就需要按照它的思想来实现它，在 Java 中可以理解成是一个接口，那么 SSO 常见的解决方案有 OAuth2、CAS：</p><ul><li>CAS：CAS 是 Central Authentication Service 的缩写（中央式认证服务），该服务是<strong>为应用提供可信身份认证的单点登录系统</strong>。CAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</li><li>OAuth2：OAuth2 是 Open Authority 的缩写，是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（一般会使用 JWT 的方式来承载用户的 Access_Token），用来代替密码，供第三方应用使用。具体例子是：可以使用微信账号来登陆京东应用。</li></ul><h2 id="cas-认证流程" tabindex="-1"><a class="header-anchor" href="#cas-认证流程"><span>CAS 认证流程</span></a></h2><p>以下是 CAS 官网的流程图</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221107145356.png" alt=""></p><h3 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释"><span>名词解释</span></a></h3><ul><li>TGT：全名是 Ticket Granted Ticket，意为票根，当用户登录成功 CAS Server 创建，可以可以签发 ST</li><li>TGC：全名是 Ticket Granted Cookie，浏览器 cookie 中 CASTGC的值，CAS Server 创建 TGT 后，会在cookie中放入 TGC，可以通过 TGC 来找到 TGT</li><li>ST：全名是 Service Ticket，意为票据，由 TGT 生成，是具体业务服务的票据</li></ul><h3 id="单点登录的核心流程" tabindex="-1"><a class="header-anchor" href="#单点登录的核心流程"><span>单点登录的核心流程</span></a></h3><ol><li>用户第一次访问业务系统，业务系统发现本次请求的 cookie 中没有 sessionid，也没有 ST，重定向到 CAS 认证中心</li><li>CAS 认证中心发现本次请求的 cookie 中没有 TGC，于是展示登录页面</li><li>用户在浏览器完成登录操作，提交给 CAS Server 完成密码校验工作</li><li>CAS Server 验证用户信息后，创建 TGT，并将 TGT 的 id 写入到 cookie 中的 CASTGC 属性中，同时生成一个 ST 让用户重定向到业务系统</li><li>业务系统收到请求后，发现本次请求的 cookid 没有 sessionid，但是有 ST，去 CAS 认证中心验证 ST 的有效性，如果有效就创建 session，并把 sessionid 放到cookie 中</li><li>此后浏览器每一个请求都会带上这个 cookie 来请求，业务服务会根据 cookie 中的 sessionid 来获取对应的 session，判定用户已登录，就把资源返回给浏览器</li></ol><h3 id="访问另一个系统流程" tabindex="-1"><a class="header-anchor" href="#访问另一个系统流程"><span>访问另一个系统流程</span></a></h3><ol><li>业务系统B发现本次请求中的 cookie 里的 sessionid 找不到 session，但是看到 cookie 中有 TGC，那么会去 CAS 认证中心验证 TGC 的有效性</li><li>CAS 认证中心发现本次请求中的 cookie 里有CASTGC，其中记录了 TGT 的 id，所以会生成一个 ST 让用户重定向到业务系统B</li><li>业务系统B收到请求后，发现有 ST，去 CAS 认证中心验证 ST 的有效性，发现有效，创建 session，并把 sessionid 放到 cookie 中</li><li>此后用户就用这个 sessionid 和业务系统B进行通信</li></ol><h3 id="单点登出核心流程" tabindex="-1"><a class="header-anchor" href="#单点登出核心流程"><span>单点登出核心流程</span></a></h3><ol><li>用户在业务系统A中退出登录，业务系统A删除 session，并把 cookie 中的 sessionid 删掉</li><li>业务系统A通知 CAS 认证中心用户退出登录了</li><li>CAS 认证中心删除 TGT，并把 cookie 中的 CASTGC 删掉</li><li>CAS 认证中心通知其他这个用户访问过的应用</li><li>其他应用删除 session，并清除用户 cookie 中的 sessionid</li></ol><h2 id="oauth2-认证流程" tabindex="-1"><a class="header-anchor" href="#oauth2-认证流程"><span>OAuth2 认证流程</span></a></h2><p>以下是 OAuth2 的流程图</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221108130302.png" alt=""></p><h3 id="角色解释" tabindex="-1"><a class="header-anchor" href="#角色解释"><span>角色解释</span></a></h3><ul><li>Client：调用资源服务器API的客户端</li><li>User：资源拥有者，也就是用户</li><li>Authorization Server：认证服务器，进行认证和授权</li><li>Resource Server：资源服务器，保护受保护的资源</li></ul><p>举例阐述这个几个角色，比如现在京东可以使用微信进行登录（京东可以使用微信提供的一个微信用户唯一标识符openId作为自己用户的其中一个标识），京东要获取这个标识符，需要微信同意，微信同意的前提是获得用户的授权，用户授权后，京东就能完成通过微信登录了。如果此时京东还需要获取微信好友关系等信息，需要拿着登录后微信授予的令牌去请求，否则无法通过微信的权限校验。</p><p>这其中 Client 是京东App，User 是使用微信登录京东的用户，Authorization Server 是微信的认证服务器，Resource Server 是微信的资源服务器。</p><h3 id="单点登录的核心流程-1" tabindex="-1"><a class="header-anchor" href="#单点登录的核心流程-1"><span>单点登录的核心流程</span></a></h3><ol><li>用户打开京东客户端后，客户端向用户申请授权</li><li>用户在微信端同意给予京东客户端授权</li><li>京东客户端拿着用户给予的授权向微信认证服务器进行认证</li><li>认证服务器完成认证，给予京东客户端令牌（Access Token）</li><li>此后京东需要再向微信端获取其他信息就需要使用这个令牌</li><li>微信资源服务器校验令牌合法性，如果合法则放行</li></ol><h2 id="cas-与-oauth2-的区别" tabindex="-1"><a class="header-anchor" href="#cas-与-oauth2-的区别"><span>CAS 与 OAuth2 的区别</span></a></h2><p>CAS：</p><ul><li>中央认证服务，这是一种基于票据方式实现的 SSO 单点登录框架</li><li>CAS 单点登录是保障客户端的用户资源的安全</li><li>CAS 获取的最终信息是这个用户有没有权限访问 CAS 客户端的资源</li></ul><p>OAuth2：</p><ul><li>三方授权协议，核心思想是允许用户在不提供账号密码的情况下，通过信任的应用进行授权，使其客户端可以访问权限范围内的资源</li><li>OAuth2 保障服务端的用户资源的安全</li><li>OAuth2 获取的最终信息是 OAuth2 服务提供方的用户的资源能否被 OAuth2 客户端访问</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在以前，我经常会把 SSO 和 OAuth2 混为一谈，在了解过后才发现 SSO 其实是一种认证思想，而 OAuth2 是其一种常见的解决方案，而Spring Security OAuth2 是 Spring Security 和 OAuth2 整合起来的落地产品；另外还有 CAS 这种实现方式，了解过 CAS 框架觉得服务部署和配置更加复杂，不太易于上手，当然目前也有很多的系统在使用CAS，在选择的时候开发者根据这些区别和复杂程度去决策。我个人偏向于使用 OAuth2，因为他还可以授权一个第三方应用访问一些受保护的资源，授权方式更多样，能满足更多的应用场景。</p><p>参考资源：</p><p><a href="https://ximeneschen.blog.csdn.net/article/details/115182080" target="_blank" rel="noopener noreferrer">SSO单点登录和OAuth2.0的区别和理解</a></p><p><a href="https://blog.csdn.net/qq_32650789/article/details/124879861" target="_blank" rel="noopener noreferrer">CAS实现SSO全流程教程--基本原理和服务端配置（CAS集成JDBC,LDAP）</a></p>',37)])])}const S=i(o,[["render",s]]),p=JSON.parse('{"path":"/writings/SpringSecurity/SSO.html","title":"SSO 学习","lang":"zh-CN","frontmatter":{"title":"SSO 学习","icon":"article","order":2,"category":["框架"],"tag":["SpringSecurity","SSO","CAS","OAuth2"],"description":"SSO 概念 SSO 是 Single Sign On 的缩写，意为单点登录，是一种思想、规范，单点登录的意思就是在一个多应用的系统中，用户只需要登陆一次就可以访问他权限范围内的应用，注销也同样只需要注销一次，比如淘宝、天猫等。 实现方式 既然 SSO 是一种抽象的思想，我们就需要按照它的思想来实现它，在 Java 中可以理解成是一个接口，那么 SSO...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SSO 学习\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221106162900.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221107145356.png\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221108130302.png\\"],\\"dateModified\\":\\"2022-12-22T09:46:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"],["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/SpringSecurity/SSO.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"SSO 学习"}],["meta",{"property":"og:description","content":"SSO 概念 SSO 是 Single Sign On 的缩写，意为单点登录，是一种思想、规范，单点登录的意思就是在一个多应用的系统中，用户只需要登陆一次就可以访问他权限范围内的应用，注销也同样只需要注销一次，比如淘宝、天猫等。 实现方式 既然 SSO 是一种抽象的思想，我们就需要按照它的思想来实现它，在 Java 中可以理解成是一个接口，那么 SSO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20221106162900.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-22T09:46:59.000Z"}],["meta",{"property":"article:tag","content":"OAuth2"}],["meta",{"property":"article:tag","content":"CAS"}],["meta",{"property":"article:tag","content":"SSO"}],["meta",{"property":"article:tag","content":"SpringSecurity"}],["meta",{"property":"article:modified_time","content":"2022-12-22T09:46:59.000Z"}]]},"git":{"createdTime":1667896877000,"updatedTime":1671702419000,"contributors":[{"name":"gelald","username":"gelald","email":"yb.ng@foxmail.com","commits":2,"url":"https://github.com/gelald"},{"name":"wuyingbin","username":"wuyingbin","email":"yb.ng@foxmail.com","commits":1,"url":"https://github.com/wuyingbin"}]},"readingTime":{"minutes":6.2,"words":1860},"filePathRelative":"writings/SpringSecurity/SSO.md","autoDesc":true}');export{S as comp,p as data};
