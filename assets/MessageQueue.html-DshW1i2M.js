import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as i,a as t}from"./app-Bow4eu0W.js";const l={},n=t('<h1 id="消息队列基本概念" tabindex="-1"><a class="header-anchor" href="#消息队列基本概念"><span>消息队列基本概念</span></a></h1><h2 id="为什么使用消息队列" tabindex="-1"><a class="header-anchor" href="#为什么使用消息队列"><span>为什么使用消息队列</span></a></h2><ul><li><p>解耦</p><ul><li><p>传统：系统间直接耦合，每接入一个系统，都需要修改代码</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlaeqd1qj30fl0a7wf7.jpg" alt="img"></p></li><li><p>中间件：将消息写入消息队列，需要消息的系统自己从消息队列中订阅，从而系统A不需要做任何修改</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlang3m1j30dl0a7t9a.jpg" alt="img"></p></li></ul></li><li><p>异步</p><ul><li><p>传统：一些非必要的业务逻辑以同步的方式运行，比较耗费时间</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlcld8bfj30i408bwev.jpg" alt="img"></p></li><li><p>中间件：将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlcs8ebdj30hp09fwf3.jpg" alt="img"></p></li></ul></li><li><p>削峰</p><ul><li><p>传统：并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzldnsbj9j30e90dwaao.jpg" alt="img"></p></li><li><p>中间件：系统A慢慢的按照数据库能处理的并发量，从消息队列中慢慢拉取消息。在生产中，这个短暂的高峰期积压是允许的</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzldxkusnj30if0dwgme.jpg" alt="img"></p></li></ul></li></ul><h2 id="使用了消息队列会有什么缺点" tabindex="-1"><a class="header-anchor" href="#使用了消息队列会有什么缺点"><span>使用了消息队列会有什么缺点</span></a></h2><ul><li>从系统的可用性来看：加入了消息队列，就需要维护好消息队列服务，否则消息队列服务宕机，整个系统也就瘫痪</li><li>从系统的复杂度来看：需要考虑一致性问题、如何保证消息不被重复消费，如何保证保证消息可靠传输等一系列问题，因此，需要考虑的东西更多，系统复杂性增大。</li><li>但还是要用</li></ul><h2 id="如何保证消息队列是高可用的" tabindex="-1"><a class="header-anchor" href="#如何保证消息队列是高可用的"><span>如何保证消息队列是高可用的</span></a></h2><ul><li>不要使用单机模式的消息队列</li><li>了解各消息队列的集群模式</li></ul><h2 id="什么情况下的异步操作需要使用消息队列而不是多线程" tabindex="-1"><a class="header-anchor" href="#什么情况下的异步操作需要使用消息队列而不是多线程"><span>什么情况下的异步操作需要使用消息队列而不是多线程</span></a></h2><ul><li>消息队列和多线程两者并不冲突，多线程可以作为队列的生产者和消费者。在使用外部的消息队列时，可以提高应用的稳定性，当程序宕机后，已经写入外部消息队列的数据依旧是保存的</li><li>用线程的话，会占用主服务器资源；消息队列的话，可以放到其他机器上运行，让主服务器更纯粹地处理请求。如果用户不急着知道结果的操作，可以用消息队列，否则再考虑多线程</li><li>消息队列是在架构层面解决问题；多线程是在编程语言层面解决问题。消息队列解耦更充分，架构更合理</li></ul><h1 id="组件篇" tabindex="-1"><a class="header-anchor" href="#组件篇"><span>组件篇</span></a></h1><h2 id="activemq" tabindex="-1"><a class="header-anchor" href="#activemq"><span>ActiveMQ</span></a></h2><h2 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq"><span>RabbitMQ</span></a></h2><h2 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq"><span>RocketMQ</span></a></h2><h2 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka"><span>Kafka</span></a></h2>',14),s=[n];function g(o,c){return i(),a("div",null,s)}const r=e(l,[["render",g],["__file","MessageQueue.html.vue"]]),h=JSON.parse('{"path":"/writings/RocketMQ/MessageQueue.html","title":"消息队列基本概念","lang":"zh-CN","frontmatter":{"description":"消息队列基本概念 为什么使用消息队列 解耦 传统：系统间直接耦合，每接入一个系统，都需要修改代码 img 中间件：将消息写入消息队列，需要消息的系统自己从消息队列中订阅，从而系统A不需要做任何修改 img 异步 传统：一些非必要的业务逻辑以同步的方式运行，比较耗费时间 img 中间件：将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度 ...","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/RocketMQ/MessageQueue.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"消息队列基本概念"}],["meta",{"property":"og:description","content":"消息队列基本概念 为什么使用消息队列 解耦 传统：系统间直接耦合，每接入一个系统，都需要修改代码 img 中间件：将消息写入消息队列，需要消息的系统自己从消息队列中订阅，从而系统A不需要做任何修改 img 异步 传统：一些非必要的业务逻辑以同步的方式运行，比较耗费时间 img 中间件：将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlaeqd1qj30fl0a7wf7.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-04T10:49:34.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-04T10:49:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息队列基本概念\\",\\"image\\":[\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlaeqd1qj30fl0a7wf7.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlang3m1j30dl0a7t9a.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlcld8bfj30i408bwev.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzlcs8ebdj30hp09fwf3.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzldnsbj9j30e90dwaao.jpg\\",\\"https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/007S8ZIlgy1ggzldxkusnj30if0dwgme.jpg\\"],\\"dateModified\\":\\"2023-03-04T10:49:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"为什么使用消息队列","slug":"为什么使用消息队列","link":"#为什么使用消息队列","children":[]},{"level":2,"title":"使用了消息队列会有什么缺点","slug":"使用了消息队列会有什么缺点","link":"#使用了消息队列会有什么缺点","children":[]},{"level":2,"title":"如何保证消息队列是高可用的","slug":"如何保证消息队列是高可用的","link":"#如何保证消息队列是高可用的","children":[]},{"level":2,"title":"什么情况下的异步操作需要使用消息队列而不是多线程","slug":"什么情况下的异步操作需要使用消息队列而不是多线程","link":"#什么情况下的异步操作需要使用消息队列而不是多线程","children":[]},{"level":2,"title":"ActiveMQ","slug":"activemq","link":"#activemq","children":[]},{"level":2,"title":"RabbitMQ","slug":"rabbitmq","link":"#rabbitmq","children":[]},{"level":2,"title":"RocketMQ","slug":"rocketmq","link":"#rocketmq","children":[]},{"level":2,"title":"Kafka","slug":"kafka","link":"#kafka","children":[]}],"git":{"createdTime":null,"updatedTime":1677926974000,"contributors":[{"name":"gelald","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":2.21,"words":663},"filePathRelative":"writings/RocketMQ/MessageQueue.md","autoDesc":true}');export{r as comp,h as data};
