import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,d as t,e as l}from"./app-859571d0.js";const u={},i=l(`<h1 id="rocketmq-原理分析-2" tabindex="-1"><a class="header-anchor" href="#rocketmq-原理分析-2" aria-hidden="true">#</a> RocketMQ 原理分析-2</h1><blockquote><p>本篇原理分析主要讲解消息存储与读取方面</p></blockquote><h2 id="rocketmq-如何存储消息" tabindex="-1"><a class="header-anchor" href="#rocketmq-如何存储消息" aria-hidden="true">#</a> RocketMQ 如何存储消息</h2><p>消息发送到 RocketMQ 后，为了保证消息不会丢失，RocketMQ 会把消息内容存储到磁盘文件中，主要的存储文件包括 CommitLog、ConsumeQueue、IndexFile 文件</p><h3 id="commitlog" tabindex="-1"><a class="header-anchor" href="#commitlog" aria-hidden="true">#</a> CommitLog</h3><p>CommitLog 文件存储消息内容及消息总长度，其中消息总长度固定 4 个字节。</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220903164152.png" alt=""></p><p>单个文件大小默认 1G，文件名为起始偏移量，长度为 20 位，左边补零。消息<strong>顺序</strong>写入日志文件，当文件满了，自动写入下一个文件。<strong>其中数据顺序写可以极大提升写入效率</strong>。</p><blockquote><p>1G=1073741824Byte，第一个文件文件名是<code>00000000000000000000</code>，那么第二个文件文件名就是<code>00000000001073741824</code>，因为第一个文件最多存储 1G 的内容，所以第二个文件的起始偏移量就是 1073741824，以此类推。</p></blockquote><h4 id="broker-消息刷盘机制" tabindex="-1"><a class="header-anchor" href="#broker-消息刷盘机制" aria-hidden="true">#</a> Broker 消息刷盘机制</h4><p>正如 MySQL 中的 redo log 的刷盘，为了提高效率，MySQL 在 InnoDB 和磁盘文件之间加了一个 Log Buffer。那么同理，RocketMQ 中 Broker 记录数据时也在其与磁盘之间增加一个<strong>缓存区</strong>，写入时先把数据写入到缓存，等到要刷盘的时候就一次性把缓存中的数据写入到磁盘文件中，但是无法避免在 Broker 宕机时丢失还没来得及持久化的数据。</p><p>RocketMQ 提供了两种刷盘策略：</p><ul><li>同步刷盘：当消息到达 Broker 后，只有把消息写入到 CommitLog 日志文件中，才给生产者返回发送成功的响应。</li><li>异步刷盘：当消息到达 Broker 后，就给生产者返回数据发送成功了，并启动一个异步线程去把消息写入到 CommitLog 中。</li></ul><h3 id="consumequeue" tabindex="-1"><a class="header-anchor" href="#consumequeue" aria-hidden="true">#</a> ConsumeQueue</h3><p>ConsumeQueue 文件存储了<code>CommitLog 文件中的偏移量</code>、<code>消息长度</code>、<code>消息 Tag 的 hashcode 值</code>。可以看到 ConsumeQueue 文件不存储消息的内容，它的定位是 <strong>Topic 的 CommitLog 索引</strong>！</p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220903170125.png" style="zoom:45%;"><blockquote><p>为什么 Message Tag HashCode 的值是 8 个字节，Java 中<code>hashCode</code>方法不是返回 int 类型 (4 个字节） 的值吗？</p><p>因为在延时消息中，消息第一次投递时是投递到一个系统 Topic <code>SCHEDULE_TOPIC_XXXX</code> 下的队列，等待 <code>ScheduleMessageService</code> 服务进行二次投递，在 Message Tag HashCode 中记录的是投递时间的时间戳，而 Java 时间戳的数据超出 int 数据类型的数据范围 (-2^32 ~ 2^32 -1)，所以这个值需要设计成 8 个字节。</p></blockquote><p>ConsumeQueue 每一个存储单元固定是 20 个字节，一个文件能存储 30W 个单元，支持随机访问，一个文件的大小约 5M。</p><p>一个 MessageQueue 对应一个 ConsumeQueue 文件，主要的作用是记录当前 MessageQueue 被哪些消费者组消费到了 CommitLog 中哪一条消息。引入 ConsumeQueue 的目的主要是提高消息消费的性能。因为 RocketMQ 消费消息是围绕 Topic 来进行的，如果要遍历 CommitLog 文件并根据 Topic 检索消息的效率是非常低的。</p><p>ConsumeQueue 的构建机制是当消息到达 Broker 上的 CommitLog 文件后，由专门的线程产生消息转发任务，从而构建 ConsumeQueue 文件数据以及下文会提到的 IndexFile 文件数据。</p><blockquote><p>为什么我们在考虑 Broker 宕机时只考虑 CommitLog 记录丢失，而不考虑 ConsumeQueue 记录丢失呢？</p><p>因为 RocketMQ 做了一致性保证，CommitLog 中记录了消息的所有信息，包括消息内容、元数据 (Topic、Tag 等信息），那么即使 ConsumeQueue 丢失，也可以从 CommitLog 中完全地恢复出来。</p></blockquote><h3 id="indexfile" tabindex="-1"><a class="header-anchor" href="#indexfile" aria-hidden="true">#</a> IndexFile</h3><p>IndexFile 和消息的流转过程关系不大，主要是提供一种可以通过 key 或时间区间来的高效查询消息方法，提高检索消息的速度。</p><p>IndexFile 的底层存储设计为在文件系统中实现 HashMap 结构，所以它的结构是 Hash 槽与 Hash 冲突的链表结构，但是具体落地时会把每个 slot 槽挂载的 index 索引单元都存放到 indexes 区中。</p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220904145130.png" style="zoom:50%;"><blockquote><p>IndexFile 文件结构</p></blockquote><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220904145646.png" style="zoom:50%;"><blockquote><p>一个 Index 索引单元结构</p></blockquote><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220904145524.png" style="zoom:40%;"><blockquote><p>slot 与 index 的逻辑关系图</p></blockquote><h4 id="通过-key-查找消息" tabindex="-1"><a class="header-anchor" href="#通过-key-查找消息" aria-hidden="true">#</a> 通过 key 查找消息</h4><ol><li>通过传入的查询时间来确定查询哪一个 IndexFile，因为 IndexFile 使用时间戳来命名，存储够 2000W 个索引单元就自动创建新的索引文件。</li><li>计算 key 的 hash 值位于 50W 个 hash slot 中哪一个位置 (key 的 hash % 50W)。</li><li>每一个 hash slot 都有一个 indexNo，指向链表中最后（最新）的一个索引单元。</li><li>遍历索引项链表返回查询时间范围内的结果集。</li><li>取其中的 PhyOffset 去 CommitLog 查询具体的消息。</li></ol><h2 id="rocketmq-如何对文件进行读写" tabindex="-1"><a class="header-anchor" href="#rocketmq-如何对文件进行读写" aria-hidden="true">#</a> RocketMQ 如何对文件进行读写</h2><h3 id="consumequeue-文件" tabindex="-1"><a class="header-anchor" href="#consumequeue-文件" aria-hidden="true">#</a> ConsumeQueue 文件</h3><p>ConsumeQueue 文件主要存储的是索引信息，数据量不大，并且是顺序读写，利用操作系统中的 <code>page cache</code> 机制的预读取作用下，读取 ConsumeQueue 文件的速度几乎接近直接读取内存数据，所以即使发生消息堆积，也不会影响 ConsumeQueue 文件的读取性能。</p><h3 id="page-cache" tabindex="-1"><a class="header-anchor" href="#page-cache" aria-hidden="true">#</a> page cache</h3><p><code>page cache</code> 是操作系统对文件的缓存，主要的目的是加速文件的读写。对于文件读取，操作系统会把文件内容读取到内存中，如果没能成功命中 <code>page cache</code> ，那么操作系统从磁盘上读取文件时，会顺序地对其他相邻块地数据文件进行预读取。对于文件写入，操作系统会先把修改写入到缓存中，而后通过异步的方式由 pdflush 内核线程将缓存内的数据刷盘到磁盘上。</p><h3 id="commitlog-文件" tabindex="-1"><a class="header-anchor" href="#commitlog-文件" aria-hidden="true">#</a> CommitLog 文件</h3><p>CommitLog 文件存储消息，数据量大，虽然写入是顺序写不耗费太多性能，但是读取消息内容时会产生很多随机访问，随机读非常影响性能。</p><h3 id="零拷贝" tabindex="-1"><a class="header-anchor" href="#零拷贝" aria-hidden="true">#</a> 零拷贝</h3><p>另外，RocketMQ 主要通过 MappedByteBuffer 对文件进行读写操作。其中，利用了 NIO 中的 FileChannel 模型将磁盘上的物理文件直接映射到用户态的内存地址中，将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率（正因为需要使用内存映射机制，故 RocketMQ 的文件存储都使用定长结构来存储，方便一次将整个文件映射至内存）。</p><h2 id="rocketmq-消费者如何拉取消息" tabindex="-1"><a class="header-anchor" href="#rocketmq-消费者如何拉取消息" aria-hidden="true">#</a> RocketMQ 消费者如何拉取消息</h2><p>消费者会对 Broker 发起一个长轮询，如果对应的 Message Queue 没有数据，Broker 不会立即返回，而是把 PullRequest hold 住，等待有消息的时候或者长轮询的阻塞时间到了，就再重新处理该 Message Queue 上所有的 PullRequest。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//PullMessageProcessor#processRequest</span>
<span class="token comment">//如果没有拉取到数据</span>
<span class="token keyword">case</span> <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">PULL_NOT_FOUND</span><span class="token operator">:</span>
  <span class="token comment">//broker 和 消费者都允许请求挂起</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>brokerAllowSuspend <span class="token operator">&amp;&amp;</span> hasSuspendFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">long</span> pollingTimeMills <span class="token operator">=</span> suspendTimeoutMillisLong<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          pollingTimeMills <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getShortPollingTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token class-name">String</span> topic <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">long</span> offset <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> queueId <span class="token operator">=</span> requestHeader<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//把原来的 request 封装成一个 PullRequest</span>
      <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PullRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> pollingTimeMills<span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> subscriptionData<span class="token punctuation">,</span> messageFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//把 PullRequest 挂起</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getPullRequestHoldService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">suspendPullRequest</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
      response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PullRequestHoldService 会有一个线程不停检查 Message Queue 中是否有消息以及请求是否超时：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} service started&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getShortPollingTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">long</span> beginLockTimestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>systemClock<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//检查挂起的请求</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkHoldRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>systemClock<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginLockTimestamp<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>costTime <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[NOTIFYME] check hold request cost {} ms.&quot;</span><span class="token punctuation">,</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service has exception. &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} service end&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">checkHoldRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestTable<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> kArray <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">TOPIC_QUEUEID_SEPARATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> kArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">String</span> topic <span class="token operator">=</span> kArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> queueId <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>kArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">final</span> <span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxOffsetInQueue</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyMessageArriving</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;check hold request failed. topic={}, queueId={}&quot;</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> queueId<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rocketmq-如何保证负载均衡" tabindex="-1"><a class="header-anchor" href="#rocketmq-如何保证负载均衡" aria-hidden="true">#</a> RocketMQ 如何保证负载均衡</h2><p>RocketMQ 负载均衡都在客户端完成，具体可以分为生产者和消费者</p><h3 id="生产者的负载均衡" tabindex="-1"><a class="header-anchor" href="#生产者的负载均衡" aria-hidden="true">#</a> 生产者的负载均衡</h3><p>生产者的负载均衡主要体现在发送消息时进行队列选择的过程。</p><ul><li>发送消息</li></ul><p>生产者客户端发送消息最终会调用 <code>DefaultMQProducerImpl#sendDefaultImpl</code> 方法，其中发送时会进行队列选择：</p><p><img src="https://wingbun-notes-image.oss-cn-guangzhou.aliyuncs.com/images/20220907160241.png" alt=""></p><ul><li>退避策略</li></ul><p>其中在 <code>MQFaultStrategy</code> 的 <code>selectOneMessageQueue(final TopicPublishInfo tpInfo, final String lastBrokerName)</code> 方法中涉及到一个参数 <code>sendLatencyFaultEnable</code>，这个参数主要的用途是如果之前有发送失败的，需要做一定的策略来退避，降低发送失败的风险。比如上次请求的延迟超过 500ms，那就 3000ms 内不使用。如果这个设置关闭了，那么直接使用索引递增取模的方式来确定使用的队列。<strong><code>latencyFaultTolerance</code> 机制是实现消息发送高可用的核心关键所在</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">TopicPublishInfo</span> tpInfo<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//规避策略是否打开</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendLatencyFaultEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">%</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//检查这个队列是否需要退避/不使用</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//如果所有队列不不满足使用方式，还有最后的方案</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> notBestBroker <span class="token operator">=</span> latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">pickOneAtLeast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> writeQueueNums <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getQueueIdByBroker</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>writeQueueNums <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>notBestBroker <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mq<span class="token punctuation">.</span><span class="token function">setBrokerName</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mq<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> writeQueueNums<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred when selecting message queue&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//规避策略关闭则直接使用索引递增取模的方式</span>
    <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>选择队列</li></ul><p>在 <code>TopicPublishInfo</code> 中使用索引递增取模方式来确定使用的队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//索引递增，如果原本的值是 null 值，那么会随机选择一个值</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendWhichQueue<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//模运算</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费者负载均衡" tabindex="-1"><a class="header-anchor" href="#消费者负载均衡" aria-hidden="true">#</a> 消费者负载均衡</h3><p>消费者负载均衡主要体现在从消息队列中获取消息。因为一个 Topic 下可以绑定多个 Message Queue，这些 Message Queue 会分配给一个消费者组来消费。（消费者消费模式有有 Push 模式和 Pull 模式，其实都是基于 Pull 模式来从服务器拉取消息）</p><ul><li>负载均衡线程</li></ul><p>负载均衡服务 <code>RebalanceService</code> 每20秒会让所有的已经注册的消费者都调用负载均衡逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span>waitInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//负载均衡</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mqClientFactory<span class="token punctuation">.</span><span class="token function">doRebalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>具体负载均衡逻辑</li></ul><p>无论是哪一种类型(Push、Pull)的消费者，最终都会调用负载均衡核心类 <code>RebalanceImpl</code> 的 <code>rebalanceByTopic()</code> 方法，这个方法中对广播模式和集群模式分类处理了，广播模式下每一条消息都会发到每一个消费者实例上，我们主要看集群模式下的负载均衡实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//RebalanceImpl#rebalanceByTopic核心逻辑</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rebalanceByTopic</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>messageModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">CLUSTERING</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">//根据Topic获取与这个Topic绑定的消息队列</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicSubscribeInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//根据Topic和消费者组获取所有的消费者Id</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cidAll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findConsumerIdList</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSet <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cidAll <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqAll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mqAll<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>mqSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//对所有的消息队列和消费者实例进行排序，保证一个consumerGroup中的所有consumer看到的视图保持一致，确保一个MessageQueue不会被多个消费者分配</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>mqAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cidAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//消费者消息分配负载均衡策略，默认是使用AllocateMessageQueueAveragely平均分配算法</span>
                <span class="token class-name">AllocateMessageQueueStrategy</span> strategy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allocateMessageQueueStrategy<span class="token punctuation">;</span>

                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> allocateResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">//根据这个策略来获取将要使用的消息队列</span>
                    allocateResult <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup<span class="token punctuation">,</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        mqAll<span class="token punctuation">,</span>
                        cidAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;AllocateMessageQueueStrategy.allocate Exception. allocateMessageQueueStrategyName={}&quot;</span><span class="token punctuation">,</span> strategy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">//对比新分配的MessageQueue及consumer当前的负载集合，看看是否有MessageQueue的变化，并依据变化做出不同的处理</span>
                <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> allocateResultSet<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据指定的负载均衡策略来分配队列，默认是采用 <code>AllocateMessageQueueAveragely</code> 平均分配策略，将所有 Message Queue 平均地分配每一个消费者实例。 <ul><li>如果消费者实例数量和消息队列数量进行除法运算可以除尽，那么各个消费者实例互相平分这些消息队列。</li><li>如果不能除尽，假设余数是n，那么前n个消费者实例就平分这n个消息队列。</li><li>如果消费者实例数量大于消息队列数量，那么位于消费者实例前面的消费者来平分这些消息队列，靠后的消费者实例不进行消费。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerGroup<span class="token punctuation">,</span> <span class="token class-name">String</span> currentCID<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqAll<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cidAll<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//查询自己在消费者实例集合中的索引</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> cidAll<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>currentCID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//模运算的意义在于判断两个集合的长度是否能除尽</span>
    <span class="token keyword">int</span> mod <span class="token operator">=</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果消息队列的数量小于消费者实例的个数，那么就一个消费者分配一个队列，直到分配完所有消息队列</span>
    <span class="token comment">// 如果mod为0的话 那么所有消费者实例完全平均分配所有的消息队列</span>
    <span class="token comment">// 如果mod不为0，那么当前消费者所处的位置小于mod，那就要多负载一个队列，大于mod就消费是平均数</span>
    <span class="token keyword">int</span> averageSize <span class="token operator">=</span>
        mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>mod <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> mod <span class="token operator">?</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对比本次分配与上次分配的队列，如果有变化要做出处理</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqSet<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">//this.processQueueTable ：消费者当前的负载集合</span>
    <span class="token comment">//mqSet ：新分配的负载集合</span>
    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历当前负载的MessageQueue集合</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProcessQueue</span> pq <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mqSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//MessageQueue不在新分配的队列集合中，说明这一次负载均衡后这个消息队列被分配给其他消费者实例了</span>
                <span class="token comment">//需要暂停消费者在这个消息队列上面的消费，具体的做法是设置dropper为true，意为剔除</span>
                <span class="token comment">//并调用removeUnnecessaryMessageQueue保存消费进度并根据返回结果判断是否要从processQueueTable中删除</span>
                pq<span class="token punctuation">.</span><span class="token function">setDropped</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeUnnecessaryMessageQueue</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, remove unnecessary mq, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span> pullRequestList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PullRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历新分配的MessageQueue集合mqSet</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageQueue</span> mq <span class="token operator">:</span> mqSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果processQueueTable中不包含这个消息队列则说明该消息队列是本次新分配的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//删除内存中该消息队列的消费进度</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeDirtyOffset</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ProcessQueue</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//从磁盘中读取这个消息队列的消费进度</span>
            <span class="token keyword">long</span> nextOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computePullFromWhere</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextOffset <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//把新分配的消息队列放到自己的processQueueTable中</span>
                <span class="token class-name">ProcessQueue</span> pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, mq already exists, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">//构建PullRequest</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;doRebalance, {}, add a new mq, {}&quot;</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PullRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequest<span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//并且把消费进度加入到PullRequest中，计算从哪里开始拉取消息</span>
                    pullRequest<span class="token punctuation">.</span><span class="token function">setNextOffset</span><span class="token punctuation">(</span>nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequest<span class="token punctuation">.</span><span class="token function">setMessageQueue</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequest<span class="token punctuation">.</span><span class="token function">setProcessQueue</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    pullRequestList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调度这个PullRequest，具体做法是</span>
    <span class="token comment">//把这个PullRequest放到PullMessageService中的pullRequestQueue并唤醒PullMessageService线程</span>
    <span class="token comment">//PullMessageService会将PullRequest发送到Broker，Broker根据请求信息封装好消息数据并将其发送给具体的消费者实例</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchPullRequest</span><span class="token punctuation">(</span>pullRequestList<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> changed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消息消费队列在同一消费组不同消费者之间的负载均衡，其核心设计理念是：</p><ul><li>一个消息消费队列在同一时间只允许被同一消费组内的一个消费者消费</li><li>一个消息消费者能同时消费多个消息队列</li></ul><h2 id="rocketmq-高可用机制" tabindex="-1"><a class="header-anchor" href="#rocketmq-高可用机制" aria-hidden="true">#</a> RocketMQ 高可用机制</h2><p>为了保证高可用，可以使用集群部署方式，RocketMQ 集群部署有两种模式：</p><ul><li>多 master 模式：可以创建跨越多个 Broker 的 topic，如果一个 topic 有 8 个队列，那么两个 master 节点上会各有 4 个队列，当其中一个节点宕机时，这个 topic 还有 4 个队列可以使用，确保消息的生产和消费还是正常的。但是宕机的节点一些还没来得及持久化到磁盘的消息数据会丢失。</li><li>多 master 多 slave 模式：当其中一个 master 节点宕机时，部分还没来得及消费的消息可以从 slave 节点中把还没来得及消费的节点消费掉，确保消息不会丢失。其中主从节点数据的同步方式有： <ul><li>同步复制：当消息发送到其中一个 master 节点时，只有消息复制到 slave 节点上，才会给生产者发送消息发送成功的结果，这个复制过程是同步阻塞的。</li><li>异步复制：当消息发送到其中一个 master 节点时，master 节点就会给生产者返回发送确认，并且会启动一个异步线程把消息复制到 slave 节点上。</li></ul></li></ul><h3 id="异步复制会不会也像异步刷盘那样影响消息的可靠性呢" tabindex="-1"><a class="header-anchor" href="#异步复制会不会也像异步刷盘那样影响消息的可靠性呢" aria-hidden="true">#</a> 异步复制会不会也像异步刷盘那样影响消息的可靠性呢？</h3><p>不会的，因为两者是不同的概念。</p><p>数据同步方式影响的是整个架构的可用性，而刷盘策略影响的是消息可靠性。因为 RocketMQ 是不支持自动主从切换的，当主节点宕机后，而如果数据同步方式采用异步复制的方式，生产者就不能再给这个主节点生产消息了，并且从节点就少了一部分还没来得及从主节点上同步过来的消息。但是此时消费者是可以自动切换到从节点进行消费。所以在主节点挂掉的时间只会产生主从结点短暂的消息不一致的情况，降低了可用性，而当主节点重启之后，从节点那部分未来得及复制的消息还会继续复制。</p><h3 id="一般做法" tabindex="-1"><a class="header-anchor" href="#一般做法" aria-hidden="true">#</a> 一般做法</h3><p>如果要高可用和发送效率同时兼得，一般采取多 master 多 slave 同步复制 + 异步刷盘的模式。</p><p>因为把消息同步复制到从节点上的时间比把消息持久化到磁盘中的时间要短，可以确保消息发送的高并发，同时消息也不会丢失，因为一旦 master 节点宕机了，那么还是能在 slave 节点中找到。 刷盘需要把数据写入到磁盘中，速度是比较慢的，所以这个过程需要使用异步线程，否则生产者发送消息会变得缓慢。</p>`,82),k=n("p",null,"参考链接",-1),r={href:"https://blog.csdn.net/qq_21040559/article/details/122775049",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/eclipse9527/article/details/122131297",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/qq_25145759/article/details/111929810",target:"_blank",rel:"noopener noreferrer"};function v(b,g){const s=p("ExternalLinkIcon");return o(),c("div",null,[i,n("blockquote",null,[k,n("ul",null,[n("li",null,[n("p",null,[n("a",r,[a("RocketMQ 消息存储"),t(s)])])]),n("li",null,[n("p",null,[n("a",d,[a("RocketMQ（六）—IndexFile 详解"),t(s)])])]),n("li",null,[n("p",null,[n("a",m,[a("RocketMQ源码分析之RebalanceService"),t(s)])])])])])])}const y=e(u,[["render",v],["__file","RocketMQ-theory-2.html.vue"]]);export{y as default};
