const e=JSON.parse('{"key":"v-f3258c48","path":"/writings/pattern/builder.html","title":"建造者模式","lang":"zh-CN","frontmatter":{"title":"建造者模式","icon":"article","category":["设计模式"],"description":"建造者模式 定义：将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示 适用场景： 创建对象需要很多步骤，但是步骤的顺序不一定固定 创建的对象有非常复杂的内部结构（很多属性） 把复杂对象的创建和使用分离 优点： 封装性好，创建和使用分离 扩展性好，实体和建造类之间一定程度上解耦 缺点： 产生多余的 Builder 对象 产品内部发生改变，建造者的逻辑也要同步修改，成本较大","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/builder.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"建造者模式"}],["meta",{"property":"og:description","content":"建造者模式 定义：将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示 适用场景： 创建对象需要很多步骤，但是步骤的顺序不一定固定 创建的对象有非常复杂的内部结构（很多属性） 把复杂对象的创建和使用分离 优点： 封装性好，创建和使用分离 扩展性好，实体和建造类之间一定程度上解耦 缺点： 产生多余的 Builder 对象 产品内部发生改变，建造者的逻辑也要同步修改，成本较大"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"建造者模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"链式编程","slug":"链式编程","link":"#链式编程","children":[]},{"level":2,"title":"建造者模式在源码中的体现","slug":"建造者模式在源码中的体现","link":"#建造者模式在源码中的体现","children":[{"level":3,"title":"StringBuilder","slug":"stringbuilder","link":"#stringbuilder","children":[]},{"level":3,"title":"BeanDefinitionBuilder","slug":"beandefinitionbuilder","link":"#beandefinitionbuilder","children":[]}]},{"level":2,"title":"建造者模式与工厂模式的区别","slug":"建造者模式与工厂模式的区别","link":"#建造者模式与工厂模式的区别","children":[]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":1.72,"words":517},"filePathRelative":"writings/pattern/builder.md","localizedDate":"2023年3月1日","excerpt":"<h1> 建造者模式</h1>\\n<p>定义：将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示</p>\\n<p>适用场景：</p>\\n<ol>\\n<li>创建对象需要很多步骤，但是步骤的顺序不一定固定</li>\\n<li>创建的对象有非常复杂的内部结构（很多属性）</li>\\n<li>把复杂对象的创建和使用分离</li>\\n</ol>\\n<p>优点：</p>\\n<ol>\\n<li>\\n<p>封装性好，创建和使用分离</p>\\n</li>\\n<li>\\n<p>扩展性好，实体和建造类之间一定程度上解耦</p>\\n</li>\\n</ol>\\n<p>缺点：</p>\\n<ol>\\n<li>\\n<p>产生多余的 <code>Builder</code> 对象</p>\\n</li>\\n<li>\\n<p>产品内部发生改变，建造者的逻辑也要同步修改，成本较大</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
