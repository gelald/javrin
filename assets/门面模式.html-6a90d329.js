const t=JSON.parse('{"key":"v-6a496ddb","path":"/writings/pattern/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html","title":"门面模式","lang":"zh-CN","frontmatter":{"description":"门面模式 定义：提供了一个统一的接口，用来访问子系统中的一群接口 特征：定义了一个高层接口，让子系统更容易使用 适用场景： 子系统越来越复杂，增加门面模式提供简单的接口 构建多层系统结构，利用门面对象作为每层的入口，简化层间调用 优点： 简化了调用过程，无需深入了解子系统 减少系统依赖、松耦合。原本客户端依赖10个类，现在门面对象把这10个类的功能组织起来统一由它作为入口，那么客户端只需依赖门面对象 更好的划分访问层次，提高安全性，也符合迪米特法则","head":[["meta",{"property":"og:url","content":"https://gelald.github.io/javrin/javrin/writings/pattern/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Javrin"}],["meta",{"property":"og:title","content":"门面模式"}],["meta",{"property":"og:description","content":"门面模式 定义：提供了一个统一的接口，用来访问子系统中的一群接口 特征：定义了一个高层接口，让子系统更容易使用 适用场景： 子系统越来越复杂，增加门面模式提供简单的接口 构建多层系统结构，利用门面对象作为每层的入口，简化层间调用 优点： 简化了调用过程，无需深入了解子系统 减少系统依赖、松耦合。原本客户端依赖10个类，现在门面对象把这10个类的功能组织起来统一由它作为入口，那么客户端只需依赖门面对象 更好的划分访问层次，提高安全性，也符合迪米特法则"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-01T07:27:35.000Z"}],["meta",{"property":"article:author","content":"gelald"}],["meta",{"property":"article:modified_time","content":"2023-03-01T07:27:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"门面模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-01T07:27:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"gelald\\",\\"url\\":\\"https://github.com/gelald\\"}]}"]]},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"门面模式在源码中的体现","slug":"门面模式在源码中的体现","link":"#门面模式在源码中的体现","children":[{"level":3,"title":"Spring JDBC","slug":"spring-jdbc","link":"#spring-jdbc","children":[]},{"level":3,"title":"MyBatis","slug":"mybatis","link":"#mybatis","children":[]}]},{"level":2,"title":"门面模式和代理模式的区别","slug":"门面模式和代理模式的区别","link":"#门面模式和代理模式的区别","children":[]},{"level":2,"title":"门面模式和委派模式的区别","slug":"门面模式和委派模式的区别","link":"#门面模式和委派模式的区别","children":[]}],"git":{"createdTime":1677655655000,"updatedTime":1677655655000,"contributors":[{"name":"wuyingbin","email":"yb.ng@foxmail.com","commits":1}]},"readingTime":{"minutes":3.46,"words":1038},"filePathRelative":"writings/pattern/门面模式.md","localizedDate":"2023年3月1日","excerpt":"<h1> 门面模式</h1>\\n<p>定义：提供了一个统一的接口，用来访问子系统中的一群接口</p>\\n<p>特征：定义了一个高层接口，让子系统更容易使用</p>\\n<p>适用场景：</p>\\n<ol>\\n<li>子系统越来越复杂，增加门面模式提供简单的接口</li>\\n<li>构建多层系统结构，利用门面对象作为每层的入口，简化层间调用</li>\\n</ol>\\n<p>优点：</p>\\n<ol>\\n<li>简化了调用过程，无需深入了解子系统</li>\\n<li>减少系统依赖、松耦合。原本客户端依赖10个类，现在门面对象把这10个类的功能组织起来统一由它作为入口，那么客户端只需依赖门面对象</li>\\n<li>更好的划分访问层次，提高安全性，也符合迪米特法则</li>\\n</ol>","autoDesc":true}');export{t as data};
